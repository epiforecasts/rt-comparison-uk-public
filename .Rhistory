plot_rt$data <- plot_rt$data %>%
dplyr::filter(region %in% region_names$nations) %>%
dplyr::mutate(region = factor(region, levels = c("England", "Scotland", "Wales", "Northern Ireland")))
# Ratios
plot_ratio_caseb_deathb$data <- plot_ratio_caseb_deathb$data %>%
dplyr::filter(region %in% region_names$nations) %>%
dplyr::mutate(region = factor(region, levels = c("England", "Scotland", "Wales", "Northern Ireland")))
plot_ratio_caseb_hosp$data <- plot_ratio_caseb_hosp$data %>%
dplyr::filter(region %in% region_names$nations) %>%
dplyr::mutate(region = factor(region, levels = c("England", "Scotland", "Wales", "Northern Ireland")))
plot_ratio_hosp_deathb$data <- plot_ratio_hosp_deathb$data %>%
dplyr::filter(region %in% region_names$nations) %>%
dplyr::mutate(region = factor(region, levels = c("England", "Scotland", "Wales", "Northern Ireland")))
# Plot all
plot_national <- plot_ma +
plot_rt +
plot_ratio_caseb_deathb +
plot_ratio_caseb_hosp +
plot_ratio_hosp_deathb +
patchwork::plot_layout(nrow=6)
plot(plot_national)
source('C:/Users/kaths/GitHub/rt-comparison-uk-public/compare/plot-ratios.R', echo=TRUE)
# Plot all
plot_national <- plot_ma +
plot_rt +
plot_ratio_caseb_deathb +
plot_ratio_caseb_hosp +
plot_ratio_hosp_deathb +
patchwork::plot_layout(nrow=6)
plot(plot_national)
source('C:/Users/kaths/GitHub/rt-comparison-uk-public/compare/plot-ratios.R', echo=TRUE)
# Plot all
plot_national <- plot_ma +
plot_rt +
plot_ratio_caseb_deathb +
plot_ratio_caseb_hosp +
plot_ratio_hosp_deathb +
patchwork::plot_layout(nrow=6)
plot(plot_national)
ggsave(here::here("figures", paste0(Sys.Date(), "national_rt_and_ratios.pdf")),
plot_national, dpi = 330, height = 10, width = 15)
# Plot all
plot_national <- plot_ma +
plot_rt +
plot_ratio_caseb_deathb +
plot_ratio_caseb_hosp +
plot_ratio_hosp_deathb +
patchwork::plot_layout(nrow=6)
plot(plot_national)
# Ratios
plot_ratio_caseb_deathb$data <- plot_ratio_caseb_deathb$data %>%
dplyr::filter(region %in% region_names$nations) %>%
dplyr::mutate(region = factor(region, levels = c("England", "Scotland", "Wales", "Northern Ireland")))
plot_ratio_caseb_hosp$data <- plot_ratio_caseb_hosp$data %>%
dplyr::filter(region %in% region_names$nations) %>%
dplyr::mutate(region = factor(region, levels = c("England", "Scotland", "Wales", "Northern Ireland")))
plot_ratio_hosp_deathb$data <- plot_ratio_hosp_deathb$data %>%
dplyr::filter(region %in% region_names$nations) %>%
dplyr::mutate(region = factor(region, levels = c("England", "Scotland", "Wales", "Northern Ireland")))
# Plot all
plot_national <- plot_ma +
plot_rt +
plot_ratio_caseb_deathb +
plot_ratio_caseb_hosp +
plot_ratio_hosp_deathb +
patchwork::plot_layout(nrow=6)
plot(plot_national)
ggsave(here::here("figures", paste0(Sys.Date(), "-national_rt_and_ratios.pdf")),
plot_national, dpi = 330, height = 10, width = 15)
# Cases by report date on hospital admissions
plot_ratio_caseb_hosp <- summary_ratios %>%
ggplot(aes(x = date)) +
geom_ribbon(aes(ymin = caseb_hosp_l50, ymax = caseb_hosp_u50),
alpha = 0.2) +
geom_ribbon(aes(ymin = caseb_hosp_l90, ymax = caseb_hosp_u90),
alpha = 0.1, size = 0.2) +
geom_line(aes(y = caseb_hosp_l50), alpha = 0.1) +
geom_line(aes(y = caseb_hosp_u50), alpha = 0.1) +
geom_hline(yintercept = 1, linetype = 2) +
coord_cartesian(ylim = c(0.5,1.5)) +
scale_color_manual(values = colours) +
scale_fill_manual(values = colours) +
facet_wrap("region", nrow = 1) +
cowplot::theme_cowplot(font_size = 11) +
theme(panel.spacing.x = unit(0.5, "cm")) +
theme(strip.text.x = element_blank()) +
theme(axis.text.x = element_blank()) +
labs(title = "Rt(all cases) / Rt(hospital admissions)",
y = "Ratio", x = "")
# Ratios
plot_ratio_caseb_deathb$data <- plot_ratio_caseb_deathb$data %>%
dplyr::filter(region %in% region_names$nations) %>%
dplyr::mutate(region = factor(region, levels = c("England", "Scotland", "Wales", "Northern Ireland")))
plot_ratio_caseb_hosp$data <- plot_ratio_caseb_hosp$data %>%
dplyr::filter(region %in% region_names$nations) %>%
dplyr::mutate(region = factor(region, levels = c("England", "Scotland", "Wales", "Northern Ireland")))
plot_ratio_hosp_deathb$data <- plot_ratio_hosp_deathb$data %>%
dplyr::filter(region %in% region_names$nations) %>%
dplyr::mutate(region = factor(region, levels = c("England", "Scotland", "Wales", "Northern Ireland")))
# Plot all
plot_national <- plot_ma +
plot_rt +
plot_ratio_caseb_deathb +
plot_ratio_caseb_hosp +
plot_ratio_hosp_deathb +
patchwork::plot_layout(nrow=6)
plot(plot_national)
# Plot
plot_rt <- summary %>%
ggplot(aes(x = date, col = `Data source`, fill = `Data source`)) +
geom_ribbon(aes(ymin = lower_90, ymax = upper_90),
alpha = 0.1, size = 0.2) +
geom_ribbon(aes(ymin = lower_50, ymax = upper_50),
alpha = 0.1, size = 0.2) +
geom_hline(yintercept = 1, linetype = 2) +
scale_color_manual(values = colours) +
scale_fill_manual(values = colours) +
facet_wrap("region", nrow = 1) +
cowplot::theme_cowplot(font_size = 11) +
theme(panel.spacing.x = unit(0.5, "cm")) +
theme(strip.text.x = element_blank()) +
theme(axis.text.x = element_blank()) +
labs(title = "Rt estimate", caption = "50% credible interval",
y = "R", x = "", col = "Data source", fill = "Data source") +
theme(legend.position = "top")
plot(plot_rt)
# Plot
plot_rt <- summary %>%
ggplot(aes(x = date, col = `Data source`, fill = `Data source`)) +
geom_ribbon(aes(ymin = lower_90, ymax = upper_90),
alpha = 0.1, size = 0.2) +
#geom_ribbon(aes(ymin = lower_50, ymax = upper_50),
#            alpha = 0.1, size = 0.2) +
geom_hline(yintercept = 1, linetype = 2) +
scale_color_manual(values = colours) +
scale_fill_manual(values = colours) +
facet_wrap("region", nrow = 1) +
cowplot::theme_cowplot(font_size = 11) +
theme(panel.spacing.x = unit(0.5, "cm")) +
theme(strip.text.x = element_blank()) +
theme(axis.text.x = element_blank()) +
labs(title = "Rt estimate", caption = "50% credible interval",
y = "R", x = "", col = "Data source", fill = "Data source") +
theme(legend.position = "top")
plot(plot_rt)
# Plot
plot_rt <- summary %>%
ggplot(aes(x = date, col = `Data source`, fill = `Data source`)) +
geom_ribbon(aes(ymin = lower_90, ymax = upper_90),
alpha = 0.1, size = 0.2) +
#geom_ribbon(aes(ymin = lower_50, ymax = upper_50),
#            alpha = 0.1, size = 0.2) +
geom_hline(yintercept = 1, linetype = 2) +
scale_color_manual(values = colours) +
scale_fill_manual(values = colours) +
facet_wrap("region", nrow = 1) +
cowplot::theme_cowplot(font_size = 11) +
theme(panel.spacing.x = unit(0.5, "cm")) +
theme(strip.text.x = element_blank()) +
theme(axis.text.x = element_blank()) +
labs(title = "Rt estimate", caption = "90% credible interval",
y = "R", x = "", col = "Data source", fill = "Data source") +
theme(legend.position = "top")
plot(plot_rt)
# Rt estimates
plot_rt$data <- plot_rt$data %>%
dplyr::filter(region %in% region_names$nations) %>%
dplyr::mutate(region = factor(region, levels = c("England", "Scotland", "Wales", "Northern Ireland")))
# Plot all
plot_national <- plot_ma +
plot_rt +
plot_ratio_caseb_deathb +
plot_ratio_caseb_hosp +
plot_ratio_hosp_deathb +
patchwork::plot_layout(nrow=6)
plot(plot_national)
# Plot
plot_rt <- summary %>%
ggplot(aes(x = date, col = `Data source`, fill = `Data source`)) +
geom_ribbon(aes(ymin = lower_90, ymax = upper_90),
alpha = 0.1, size = 0.2) +
#geom_ribbon(aes(ymin = lower_50, ymax = upper_50),
#            alpha = 0.1, size = 0.2) +
geom_hline(yintercept = 1, linetype = 2) +
scale_color_manual(values = colours) +
scale_fill_manual(values = colours) +
facet_wrap("region", nrow = 1) +
cowplot::theme_cowplot(font_size = 11) +
theme(panel.spacing.x = unit(0.5, "cm")) +
theme(strip.text.x = element_blank()) +
theme(axis.text.x = element_blank()) +
labs(title = "Rt estimate",
y = "R", x = "", col = "Data source", fill = "Data source") +
theme(legend.position = "top")
# Rt estimates
plot_rt$data <- plot_rt$data %>%
dplyr::filter(region %in% region_names$nations) %>%
dplyr::mutate(region = factor(region, levels = c("England", "Scotland", "Wales", "Northern Ireland")))
# Plot all
plot_national <- plot_ma +
plot_rt +
plot_ratio_caseb_deathb +
plot_ratio_caseb_hosp +
plot_ratio_hosp_deathb +
patchwork::plot_layout(nrow=6)
plot(plot_nationa)
plot(plot_national)
View(summary_wide)
View(data)
rm(list=ls())
source('C:/Users/kaths/GitHub/rt-comparison-uk-public/compare/plot-all.R', echo=TRUE)
source('C:/Users/kaths/GitHub/rt-comparison-uk-public/compare/plot-all.R', echo=TRUE)
# Regional ----------------------------------------------------------------
# Raw data: moving average
plot_ma$data <- plot_ma$data %>%
dplyr::filter(region %in% region_names$nhsregions)
# Rt estimates
plot_rt$data <- plot_rt$data %>%
dplyr::filter(region %in% region_names$nhsregions)
# Ratios
plot_ratio_caseb_deathb$data <- plot_ratio_caseb_deathb$data %>%
dplyr::filter(region %in% region_names$nhsregions)
plot_ratio_caseb_hosp$data <- plot_ratio_caseb_hosp$data %>%
dplyr::filter(region %in% region_names$nhsregions)
plot_ratio_hosp_deathb$data <- plot_ratio_hosp_deathb$data %>%
dplyr::filter(region %in% region_names$nhsregions)
# All
plot_regional <- plot_ma +
plot_rt +
plot_ratio_caseb_deathb +
plot_ratio_caseb_hosp +
plot_ratio_hosp_deathb +
patchwork::plot_layout(nrow=6)
ggsave(here::here("figures", "regional_rt_and_ratios.pdf"),
plot_regional, dpi = 330, height = 8, width = 15)
plot(plot_regional)
View(plot_ma)
# Merge plots
source("data/plot-data.R")
source('C:/Users/kaths/GitHub/rt-comparison-uk-public/compare/plot-all.R', echo=TRUE)
# All
plot_regional <- plot_ma +
plot_rt +
plot_ratio_caseb_deathb +
plot_ratio_caseb_hosp +
plot_ratio_hosp_deathb +
patchwork::plot_layout(nrow=6)
ggsave(here::here("figures", paste0(Sys.Date(), "regional_rt_and_ratios.pdf")),
plot_regional, dpi = 330, height = 8, width = 15)
# All
plot_regional <- plot_ma +
plot_rt +
plot_ratio_caseb_deathb +
plot_ratio_caseb_hosp +
plot_ratio_hosp_deathb +
patchwork::plot_layout(nrow=6)
ggsave(here::here("figures", paste0(Sys.Date(), "-regional_rt_and_ratios.pdf")),
plot_regional, dpi = 330, height = 8, width = 15)
# Plot colours
# Data: data source
colours <- c(
# Cases
"Cases" = "#a6cee3",
"cases_blend" = "#a6cee3",
# Admissions
"Hospital admissions" = "#1f78b4",
"cases_hosp" = "#1f78b4",
# Deaths
"Deaths" = "#b2df8a",
"deaths_blend" = "#b2df8a"
)
saveRDS(colours, "colours.rds")
source('C:/Users/kaths/GitHub/rt-comparison-uk-public/compare/plot-all.R', echo=TRUE)
source('C:/Users/kaths/GitHub/rt-comparison-uk-public/compare/plot-all.R', echo=TRUE)
saveRDS(colours, "colours.rds")
source('C:/Users/kaths/GitHub/rt-comparison-uk-public/data/utils.R', echo=TRUE)
source('C:/Users/kaths/GitHub/rt-comparison-uk-public/compare/plot-all.R', echo=TRUE)
source('C:/Users/kaths/GitHub/rt-comparison-uk-public/compare/plot-all.R', echo=TRUE)
source('C:/Users/kaths/GitHub/rt-comparison-uk-public/compare/plot-ratios.R', echo=TRUE)
source('C:/Users/kaths/GitHub/rt-comparison-uk-public/compare/plot-all.R', echo=TRUE)
source('C:/Users/kaths/GitHub/rt-comparison-uk-public/compare/plot-all.R', echo=TRUE)
source('C:/Users/kaths/GitHub/rt-comparison-uk-public/compare/plot-all.R', echo=TRUE)
rm(list=ls())
source('C:/Users/kaths/GitHub/rt-comparison-uk-public/data/plot-data.R', echo=TRUE)
source('C:/Users/kaths/GitHub/rt-comparison-uk-public/data/plot-data.R', echo=TRUE)
source('C:/Users/kaths/GitHub/rt-comparison-uk-public/data/plot-data.R', echo=TRUE)
plot(plot_zscore)
rm(list=ls())
count_variable <- c("x", "y", "z")
count_variable <- c("x", "y", "z")
run_rt_estimate <- function(count_variable) {
for(i in count_variable){
count_variable = i
print(paste0("Estimates for ", i))
}
}
run_rt_estimate(count_variable = count_variable)
# Get delays and fresh UK data; set up cores
source(here::here("rt-estimate", "estimate", "utils", "rt-data-defaults.R"))
colnames(data)
count_variable <- c("cases_blend", "cases_hosp", "deaths_blend")
run_rt_estimate <- function(count_variable) {
for(i in count_variable){
data_select <- data.table::as.data.table(data)
data_select <- data.table::setnames(data_select, old = count_variable, new = "confirm")
return(colnames(data_select))
}
}
run_rt_estimate(count_variable = count_variable)
run_rt_estimate <- function(count_variable) {
for(i in count_variable){
count_variable <- i
data_select <- data.table::as.data.table(data)
data_select <- data.table::setnames(data_select, old = count_variable, new = "confirm")
return(colnames(data_select))
}
}
run_rt_estimate(count_variable = count_variable)
for(i in count_variable){
print(paste0("Estimates for ", count_variable[[i]]))
}
print(paste0("Estimates for ", count_variable[i]))
for(i in count_variable){
print(paste0("Estimates for ", count_variable[i]))
}
count_variable[1]
for(i in 1:length(count_variable)){
print(paste0("Estimates for ", count_variable[i]))
}
count_variable <- c("cases_blend", "cases_hosp", "deaths_blend")
run_rt_estimate <- function(count_variable) {
for(i in count_variable){
count_variable <- i
data_select <- data.table::as.data.table(data)
data_select <- data.table::setnames(data_select, old = count_variable, new = "confirm")
return(colnames(data_select))
}
}
run_rt_estimate <- function(count_variable) {
for(i in 1:length(count_variable)){
data_select <- data.table::as.data.table(data)
data_select <- data.table::setnames(data_select, old = count_variable, new = "confirm")
cols <- list()
cols[[i]] <- colnames(data_select)
}
return(cols)
}
run_rt_estimate(count_variable = count_variable)
run_rt_estimate <- function(count_variable) {
for(i in 1:length(count_variable)){
data_select <- data.table::as.data.table(data)
data_select <- data.table::setnames(data_select, old = count_variable[i], new = "confirm")
cols <- list()
cols[[i]] <- colnames(data_select)
}
return(cols)
}
run_rt_estimate(count_variable = count_variable)
# Set up running a single Rt forecast -------------------------------------
run_rt_estimate <- function(data, count_variable, reporting_delay) {
for(i in 1:length(count_variable)){
print(paste0("Estimates for ", count_variable[i]))
# Set up directories for models -------------------------------------------
if(!dir.exists(here::here("rt-estimate", "estimate",
count_variable))) {
dir.create(here::here("rt-estimate", "estimate",
count_variable))
}
targets <- paste0("rt-estimate/estimate/", count_variable[i], "/region")
summary <- paste0("rt-estimate/estimate/", count_variable[i], "/summary")
# Format for epinow2 ------------------------------------------------------
data_select <- data.table::as.data.table(data)
data_select <- data.table::setnames(data_select, old = count_variable[i], new = "confirm")
data_select <- data_select[, .(date, region, confirm)]
data_select <- data_select[, .SD[date <= (max(date) - lubridate::days(5))], by = region] # 21/08/20: 1 week
data.table::setorder(data_select, date)
# Check full date sequence
if(length(data_select$date) !=
(length(seq.Date(from = min(data_select$date), to = max(data_select$date), by = 1))
* length(unique(data_select$region)))) {
return(warning("Missing days in date sequence"))
}
return(head(data_select$confirm))
}
# Set up common settings --------------------------------------------------
EpiNow2::regional_epinow(target_folder = targets,
summary_dir = summary,
reported_cases = data_select,
delays = list(incubation_period, reporting_delay),
generation_time = generation_time,
horizon = 0,
samples = 2000,
warmup = 500,
burn_in = 14,
adapt_delta = 0.98,
cores = no_cores,
chains = ifelse(no_cores <= 2, 2, no_cores),
return_estimates = FALSE, verbose = TRUE)
}
# Set up running a single Rt forecast -------------------------------------
run_rt_estimate <- function(data, count_variable, reporting_delay) {
for(i in 1:length(count_variable)){
print(paste0("Estimates for ", count_variable[i]))
# Set up directories for models -------------------------------------------
if(!dir.exists(here::here("rt-estimate", "estimate",
count_variable))) {
dir.create(here::here("rt-estimate", "estimate",
count_variable))
}
targets <- paste0("rt-estimate/estimate/", count_variable[i], "/region")
summary <- paste0("rt-estimate/estimate/", count_variable[i], "/summary")
# Format for epinow2 ------------------------------------------------------
data_select <- data.table::as.data.table(data)
data_select <- data.table::setnames(data_select, old = count_variable[i], new = "confirm")
data_select <- data_select[, .(date, region, confirm)]
data_select <- data_select[, .SD[date <= (max(date) - lubridate::days(5))], by = region] # 21/08/20: 1 week
data.table::setorder(data_select, date)
# Check full date sequence
if(length(data_select$date) !=
(length(seq.Date(from = min(data_select$date), to = max(data_select$date), by = 1))
* length(unique(data_select$region)))) {
return(warning("Missing days in date sequence"))
}
return(head(data_select$confirm))
}
}
# Set up running a single Rt forecast -------------------------------------
run_rt_estimate <- function(data, count_variable, reporting_delay) {
for(i in 1:length(count_variable)){
print(paste0("Estimates for ", count_variable[i]))
# Set up directories for models -------------------------------------------
if(!dir.exists(here::here("rt-estimate", "estimate",
count_variable))) {
dir.create(here::here("rt-estimate", "estimate",
count_variable))
}
targets <- paste0("rt-estimate/estimate/", count_variable[i], "/region")
summary <- paste0("rt-estimate/estimate/", count_variable[i], "/summary")
# Format for epinow2 ------------------------------------------------------
data_select <- data.table::as.data.table(data)
data_select <- data.table::setnames(data_select, old = count_variable[i], new = "confirm")
data_select <- data_select[, .(date, region, confirm)]
data_select <- data_select[, .SD[date <= (max(date) - lubridate::days(5))], by = region] # 21/08/20: 1 week
data.table::setorder(data_select, date)
# Check full date sequence
if(length(data_select$date) !=
(length(seq.Date(from = min(data_select$date), to = max(data_select$date), by = 1))
* length(unique(data_select$region)))) {
return(warning("Missing days in date sequence"))
}
return(head(data_select$confirm))
}
}
count_variable <- c("cases_blend", "cases_hosp", "deaths_blend")
run_rt_estimate(count_variable = count_variable, data = data, reporting_delay = NULL)
# Set up running a single Rt forecast -------------------------------------
run_rt_estimate <- function(data, count_variable, reporting_delay) {
for(i in 1:length(count_variable)){
print(paste0("Estimates for ", count_variable[i]))
# Set up directories for models -------------------------------------------
if(!dir.exists(here::here("rt-estimate", "estimate",
count_variable[i]))) {
dir.create(here::here("rt-estimate", "estimate",
count_variable[i]))
}
targets <- paste0("rt-estimate/estimate/", count_variable[i], "/region")
summary <- paste0("rt-estimate/estimate/", count_variable[i], "/summary")
# Format for epinow2 ------------------------------------------------------
data_select <- data.table::as.data.table(data)
data_select <- data.table::setnames(data_select, old = count_variable[i], new = "confirm")
data_select <- data_select[, .(date, region, confirm)]
data_select <- data_select[, .SD[date <= (max(date) - lubridate::days(5))], by = region] # 21/08/20: 1 week
data.table::setorder(data_select, date)
# Check full date sequence
if(length(data_select$date) !=
(length(seq.Date(from = min(data_select$date), to = max(data_select$date), by = 1))
* length(unique(data_select$region)))) {
return(warning("Missing days in date sequence"))
}
return(head(data_select$confirm))
}
}
run_rt_estimate(count_variable = count_variable, data = data, reporting_delay = NULL)
View(data)
# Set up running a single Rt forecast -------------------------------------
run_rt_estimate <- function(data, count_variable, reporting_delay) {
for(i in 1:length(count_variable)){
print(paste0("Estimates for ", count_variable[i]))
# Set up directories for models -------------------------------------------
if(!dir.exists(here::here("rt-estimate", "estimate",
count_variable[i]))) {
dir.create(here::here("rt-estimate", "estimate",
count_variable[i]))
}
targets <- paste0("rt-estimate/estimate/", count_variable[i], "/region")
summary <- paste0("rt-estimate/estimate/", count_variable[i], "/summary")
# Format for epinow2 ------------------------------------------------------
data_select <- data.table::as.data.table(data)
data_select <- data.table::setnames(data_select, old = count_variable[i], new = "confirm")
data_select <- data_select[, .(date, region, confirm)]
data_select <- data_select[, .SD[date <= (max(date) - lubridate::days(5))], by = region] # 21/08/20: 1 week
data.table::setorder(data_select, date)
# Check full date sequence
if(length(data_select$date) !=
(length(seq.Date(from = min(data_select$date), to = max(data_select$date), by = 1))
* length(unique(data_select$region)))) {
return(warning("Missing days in date sequence"))
}
print(head(data_select$confirm))
}
}
run_rt_estimate(count_variable = count_variable, data = data, reporting_delay = NULL)
