ifelse(source == 2, "Hospital admissions",
"Deaths"))) %>%
dplyr::filter(variable == "R" & type == "estimate" | type == "estimate based on partial data") %>%
dplyr::select(-strat, -variable, -mean, -sd,
lower_90 = bottom, upper_90 = top,
lower_50 = lower, upper_50 = upper,
lower_20 = central_lower, upper_20 = central_upper)
# Format
summary <- dplyr::bind_rows(summary_cases, summary_hosp, summary_deaths, .id = "source") %>%
dplyr::mutate(source = ifelse(source == 1, "Test-positive cases",
ifelse(source == 2, "Hospital admissions",
"Deaths"))) %>%
dplyr::filter(variable == "R" & type == "estimate" | type == "estimate based on partial data") %>%
dplyr::select(#-strat, -variable,
-mean, -sd,
lower_90 = bottom, upper_90 = top,
lower_50 = lower, upper_50 = upper,
lower_20 = central_lower, upper_20 = central_upper)
# Format
summary <- dplyr::bind_rows(summary_cases, summary_hosp, summary_deaths, .id = "source") %>%
dplyr::mutate(source = ifelse(source == 1, "Test-positive cases",
ifelse(source == 2, "Hospital admissions",
"Deaths"))) %>%
dplyr::filter(variable == "R" & (type == "estimate" | type == "estimate based on partial data")) %>%
dplyr::select(#-strat, -variable,
-mean, -sd,
lower_90 = bottom, upper_90 = top,
lower_50 = lower, upper_50 = upper,
lower_20 = central_lower, upper_20 = central_upper)
# Format
summary <- dplyr::bind_rows(summary_cases, summary_hosp, summary_deaths, .id = "source") %>%
dplyr::mutate(source = ifelse(source == 1, "Test-positive cases",
ifelse(source == 2, "First hospital admissions",
"Deaths")),
date_created = Sys.Date()) %>%
dplyr::filter(variable == "R" & (type == "estimate" | type == "estimate based on partial data")) %>%
dplyr::select(-strat, -variable,
-mean, -sd,
lower_90 = bottom, upper_90 = top,
lower_50 = lower, upper_50 = upper,
lower_20 = central_lower, upper_20 = central_upper)
View(data)
plot(x = data[region==England,"date"], y = data[region==England,"cases_hosp_new"])
plot(x = data[region=="England","date"], y = data[region=="England","cases_hosp_new"])
plot(x = data[data$region=="England","date"], y = data[data$region=="England","cases_hosp_new"])
plot(x = data[data$region=="England"]$date, y = data[data$region=="England"]$cases_hosp_new)
saveRDS(data, "data/201004.rds")
# Latest data location
# 4 Oct 2020
data_save <- "data/201004.rds"
data <- readRDS(data_save)
rm(list=ls())
collate_estimates <- function(name, target = "rt"){
# Get locations of summary csv
sources <- as.list(paste0(list.files(here::here("subnational", name), full.names = TRUE),
"/summary/", target, ".csv"))
names(sources) <- list.files(here::here("subnational", name))
# Read and bind
sources <- sources[!grepl("collated", names(sources))]
df <- lapply(sources, data.table::fread)
df <- data.table::rbindlist(df, idcol = "source")
df <- df[type %in% "estimate"][, type := NULL]
# Check a collated file exists
if(!dir.exists(here::here("subnational", name, "collated", target))){
dir.create(here::here("subnational", name, "collated", target))
}
# Save back to main UK folder
data.table::fwrite(df, here::here("subnational", name, "collated", target, paste0(Sys.Date(), ".csv")))
return(invisible(NULL))
}
summary <- readRDS("rt-estimate/summary.rds")
View(summary)
deaths <- readr::read_csv("https://raw.githubusercontent.com/epiforecasts/covid-rt-estimates/master/subnational/united-kingdom/deaths/summary/rt.csv")
admissions <- readr::read_csv(https://github.com/epiforecasts/covid-rt-estimates/blob/master/subnational/united-kingdom/admissions/summary/rt.csv")
cases <- readr::read_csv("https://github.com/epiforecasts/covid-rt-estimates/blob/master/subnational/united-kingdom/cases/summary/rt.csv")
admissions <- readr::read_csv("https://github.com/epiforecasts/covid-rt-estimates/blob/master/subnational/united-kingdom/admissions/summary/rt.csv")
cases <- readr::read_csv("https://raw.githubusercontent.com/epiforecasts/covid-rt-estimates/master/subnational/united-kingdom/cases/summary/rt.csv")
admissions <- readr::read_csv("https://raw.githubusercontent.com/epiforecasts/covid-rt-estimates/master/subnational/united-kingdom/admissions/summary/rt.csv")
View(admissions)
View(admissions)
summary <- dplyr::bind_rows(cases, deaths, admissions, .id = "source")
View(summary)
?recode
summary <- dplyr::bind_rows(cases, admissions, deaths, .id = "source") %>%
dplyr::recode(source,
1 = "Test-positive",
2 = "Hospital admissions",
3 = "Deaths"))
summary <- dplyr::bind_rows(cases, admissions, deaths, .id = "source") %>%
dplyr::recode(source,
"1" = "Test-positive",
"2" = "Hospital admissions",
"3" = "Deaths"))
summary <- dplyr::bind_rows(cases, admissions, deaths, .id = "source") %>%
dplyr::recode(source,
"1" = "Test-positive",
"2" = "Hospital admissions",
"3" = "Deaths")
library(magrittr)
summary <- dplyr::bind_rows(cases, admissions, deaths, .id = "source") %>%
dplyr::recode(source,
"1" = "Test-positive",
"2" = "Hospital admissions",
"3" = "Deaths")
summary <- dplyr::bind_rows(cases, admissions, deaths, .id = "source") %>%
dplyr::recode("source",
"1" = "Test-positive",
"2" = "Hospital admissions",
"3" = "Deaths")
"3" = "Deaths")
summary <- dplyr::bind_rows(cases, admissions, deaths, .id = "source") %>%
dplyr::mutate(source = dplyr::recode(source,
"1" = "Test-positive",
"2" = "Hospital admissions",
"3" = "Deaths"))
View(summary)
summary <- dplyr::bind_rows(cases, admissions, deaths, .id = "source") %>%
dplyr::mutate(source = dplyr::recode(source,
"1" = "Test-positive",
"2" = "Hospital admissions",
"3" = "Deaths")) %>%
dplyr::filter(type == "estimate")
source("compare/plots/plot-data.R")
# Use daily updated estimates
source("utils/utils.R")
plot_rt_fn <- function(region_name){
summary %>%
dplyr::filter(region %in% region_name &
date >= date_min & date <= date_max) %>%
ggplot(aes(x = date, col = `Data source`, fill = `Data source`)) +
geom_ribbon(aes(ymin = lower_50, ymax = upper_50),
alpha = 0.2, size = 0, colour = NA) +
geom_ribbon(aes(ymin = lower_90, ymax = upper_90),
alpha = 0.1, colour = NA) +
geom_line(aes(y = median),
alpha = 0.9, size = 1) +
geom_hline(yintercept = 1, linetype = 2) +
coord_cartesian(#ylim = c(scale_min, scale_max),
xlim = c(date_min, date_max)) +
scale_color_manual(values = colours) +
scale_fill_manual(values = colours) +
scale_x_date(date_breaks = "1 month", date_labels = "%b") +
scale_y_continuous(breaks=seq(0, 1.4, by = 0.2)) +
cowplot::theme_cowplot() +
labs(y = "R", x = NULL, col = "Data source", fill = "Data source") +
theme(legend.position = "bottom") +
guides(colour = guide_legend(override.aes = list(alpha = 1)))
}
region_list <- as.list(region_names$region_factor)
names(region_list) <- region_names$region_factor
region_plot_rt <- purrr::map(region_list,
~ plot_rt_fn(region_name = .x))
date_min <- min(summary$date)
date_max <- max(summary$date)
region_plot_rt <- purrr::map(region_list,
~ plot_rt_fn(region_name = .x))
plot(region_plot_rt)
plot(region_plot_rt$England)
xlim = c(date_min, date_max)) +
scale_color_manual(values = colours) +
scale_fill_manual(values = colours) +
scale_x_date(date_breaks = "1 month", date_labels = "%b") +
scale_y_continuous(breaks=seq(0, 1.4, by = 0.2)) +
cowplot::theme_cowplot() +
labs(y = "R", x = NULL) +
theme(legend.position = "bottom") +
guides(colour = guide_legend(override.aes = list(alpha = 1)))
plot_rt_fn <- function(region_name){
summary %>%
dplyr::filter(region %in% region_name &
date >= date_min & date <= date_max) %>%
ggplot(aes(x = date, col = `Data source`, fill = `Data source`)) +
geom_ribbon(aes(ymin = lower_50, ymax = upper_50),
alpha = 0.2, size = 0, colour = NA) +
geom_ribbon(aes(ymin = lower_90, ymax = upper_90),
alpha = 0.1, colour = NA) +
geom_line(aes(y = median),
alpha = 0.9, size = 1) +
geom_hline(yintercept = 1, linetype = 2) +
coord_cartesian(#ylim = c(scale_min, scale_max),
xlim = c(date_min, date_max)) +
scale_color_manual(values = colours) +
scale_fill_manual(values = colours) +
scale_x_date(date_breaks = "1 month", date_labels = "%b") +
scale_y_continuous(breaks=seq(0, 1.4, by = 0.2)) +
cowplot::theme_cowplot() +
labs(y = "R", x = NULL) +
theme(legend.position = "bottom") +
guides(colour = guide_legend(override.aes = list(alpha = 1)))
}
region_plot_rt <- purrr::map(region_list,
~ plot_rt_fn(region_name = .x))
plot(region_plot_rt$England)
summary <- dplyr::bind_rows(cases, admissions, deaths, .id = "source") %>%
dplyr::mutate(`Data source` = dplyr::recode(source,
"1" = "Test-positive",
"2" = "Hospital admissions",
"3" = "Deaths")) %>%
dplyr::filter(type == "estimate")
date_min <- min(summary$date)
date_max <- max(summary$date)
plot_rt_fn <- function(region_name){
summary %>%
dplyr::filter(region %in% region_name &
date >= date_min & date <= date_max) %>%
ggplot(aes(x = date, col = `Data source`, fill = `Data source`)) +
geom_ribbon(aes(ymin = lower_50, ymax = upper_50),
alpha = 0.2, size = 0, colour = NA) +
geom_ribbon(aes(ymin = lower_90, ymax = upper_90),
alpha = 0.1, colour = NA) +
geom_line(aes(y = median),
alpha = 0.9, size = 1) +
geom_hline(yintercept = 1, linetype = 2) +
coord_cartesian(#ylim = c(scale_min, scale_max),
xlim = c(date_min, date_max)) +
scale_color_manual(values = colours) +
scale_fill_manual(values = colours) +
scale_x_date(date_breaks = "1 month", date_labels = "%b") +
scale_y_continuous(breaks=seq(0, 1.4, by = 0.2)) +
cowplot::theme_cowplot() +
labs(y = "R", x = NULL) +
theme(legend.position = "bottom") +
guides(colour = guide_legend(override.aes = list(alpha = 1)))
}
region_list <- as.list(region_names$region_factor)
names(region_list) <- region_names$region_factor
region_plot_rt <- purrr::map(region_list,
~ plot_rt_fn(region_name = .x))
region_plot_rt$`East of England`
xlim = c(date_min, date_max)) +
scale_color_manual(values = colours) +
scale_fill_manual(values = colours) +
scale_x_date(date_breaks = "1 week", date_labels = "%b") +
scale_y_continuous(breaks=seq(0, 1.4, by = 0.2)) +
cowplot::theme_cowplot() +
labs(y = "R", x = NULL) +
theme(legend.position = "bottom") +
guides(colour = guide_legend(override.aes = list(alpha = 1)))
plot_rt_fn <- function(region_name){
summary %>%
dplyr::filter(region %in% region_name &
date >= date_min & date <= date_max) %>%
ggplot(aes(x = date, col = `Data source`, fill = `Data source`)) +
geom_ribbon(aes(ymin = lower_50, ymax = upper_50),
alpha = 0.2, size = 0, colour = NA) +
geom_ribbon(aes(ymin = lower_90, ymax = upper_90),
alpha = 0.1, colour = NA) +
geom_line(aes(y = median),
alpha = 0.9, size = 1) +
geom_hline(yintercept = 1, linetype = 2) +
coord_cartesian(#ylim = c(scale_min, scale_max),
xlim = c(date_min, date_max)) +
scale_color_manual(values = colours) +
scale_fill_manual(values = colours) +
scale_x_date(date_breaks = "1 week", date_labels = "%b") +
scale_y_continuous(breaks=seq(0, 1.4, by = 0.2)) +
cowplot::theme_cowplot() +
labs(y = "R", x = NULL) +
theme(legend.position = "bottom") +
guides(colour = guide_legend(override.aes = list(alpha = 1)))
}
region_list <- as.list(region_names$region_factor)
names(region_list) <- region_names$region_factor
region_plot_rt <- purrr::map(region_list,
~ plot_rt_fn(region_name = .x))
plot_rt_fn <- function(region_name){
summary %>%
dplyr::filter(region %in% region_name &
date >= date_min & date <= date_max) %>%
ggplot(aes(x = date, col = `Data source`, fill = `Data source`)) +
geom_ribbon(aes(ymin = lower_50, ymax = upper_50),
alpha = 0.2, size = 0, colour = NA) +
geom_ribbon(aes(ymin = lower_90, ymax = upper_90),
alpha = 0.1, colour = NA) +
geom_line(aes(y = median),
alpha = 0.9, size = 1) +
geom_hline(yintercept = 1, linetype = 2) +
coord_cartesian(#ylim = c(scale_min, scale_max),
xlim = c(date_min, date_max)) +
scale_color_manual(values = colours) +
scale_fill_manual(values = colours) +
scale_x_date(date_breaks = "1 week") +
scale_y_continuous(breaks=seq(0, 1.4, by = 0.2)) +
cowplot::theme_cowplot() +
labs(y = "R", x = NULL) +
theme(legend.position = "bottom") +
guides(colour = guide_legend(override.aes = list(alpha = 1)))
}
region_list <- as.list(region_names$region_factor)
names(region_list) <- region_names$region_factor
region_plot_rt <- purrr::map(region_list,
~ plot_rt_fn(region_name = .x))
region_plot_rt$`East of England`
plot_rt_fn <- function(region_name){
summary %>%
dplyr::filter(region %in% region_name &
date >= date_min & date <= date_max) %>%
ggplot(aes(x = date, col = `Data source`, fill = `Data source`)) +
geom_ribbon(aes(ymin = lower_50, ymax = upper_50),
alpha = 0.2, size = 0, colour = NA) +
geom_ribbon(aes(ymin = lower_90, ymax = upper_90),
alpha = 0.1, colour = NA) +
geom_line(aes(y = median),
alpha = 0.9, size = 1) +
geom_hline(yintercept = 1, linetype = 2) +
coord_cartesian(#ylim = c(scale_min, scale_max),
xlim = c(date_min, date_max)) +
scale_color_manual(values = colours) +
scale_fill_manual(values = colours) +
scale_x_date(date_breaks = "1 week", date_labels = "%b") +
scale_y_continuous(breaks=seq(0, 1.4, by = 0.2)) +
cowplot::theme_cowplot() +
labs(y = "R", x = NULL) +
theme(legend.position = "bottom") +
guides(colour = guide_legend(override.aes = list(alpha = 1)))
}
region_plot_rt <- purrr::map(region_list,
~ plot_rt_fn(region_name = .x))
region_plot_rt$`East of England`
plot_rt_fn <- function(region_name){
summary %>%
dplyr::filter(region %in% region_name &
date >= date_min & date <= date_max) %>%
ggplot(aes(x = date, col = `Data source`, fill = `Data source`)) +
geom_ribbon(aes(ymin = lower_50, ymax = upper_50),
alpha = 0.2, size = 0, colour = NA) +
geom_ribbon(aes(ymin = lower_90, ymax = upper_90),
alpha = 0.1, colour = NA) +
geom_line(aes(y = median),
alpha = 0.9, size = 1) +
geom_hline(yintercept = 1, linetype = 2) +
coord_cartesian(#ylim = c(scale_min, scale_max),
xlim = c(date_min, date_max)) +
scale_color_manual(values = colours) +
scale_fill_manual(values = colours) +
scale_x_date(date_breaks = "1 week", date_labels = "%b%d") +
scale_y_continuous(breaks=seq(0, 1.4, by = 0.2)) +
cowplot::theme_cowplot() +
labs(y = "R", x = NULL) +
theme(legend.position = "bottom") +
guides(colour = guide_legend(override.aes = list(alpha = 1)))
}
region_plot_rt <- purrr::map(region_list,
~ plot_rt_fn(region_name = .x))
region_plot_rt$`East of England`
plot_rt_fn <- function(region_name){
summary %>%
dplyr::filter(region %in% region_name &
date >= date_min & date <= date_max) %>%
ggplot(aes(x = date, col = `Data source`, fill = `Data source`)) +
geom_ribbon(aes(ymin = lower_50, ymax = upper_50),
alpha = 0.2, size = 0, colour = NA) +
geom_ribbon(aes(ymin = lower_90, ymax = upper_90),
alpha = 0.1, colour = NA) +
geom_line(aes(y = median),
alpha = 0.9, size = 1) +
geom_hline(yintercept = 1, linetype = 2) +
coord_cartesian(#ylim = c(scale_min, scale_max),
xlim = c(date_min, date_max)) +
scale_color_manual(values = colours) +
scale_fill_manual(values = colours) +
scale_x_date(date_breaks = "1 week", date_labels = "%b%d") +
scale_y_continuous(breaks=seq(0, 1.4, by = 0.2)) +
cowplot::theme_cowplot() +
labs(y = "R", x = NULL) +
theme(legend.position = "bottom",
axis.text.x = element_text(angle = 45, hjust = 1)) +
guides(colour = guide_legend(override.aes = list(alpha = 1)))
}
region_plot_rt <- purrr::map(region_list,
~ plot_rt_fn(region_name = .x))
region_plot_rt$`East of England`
plot_rt_fn <- function(region_name){
summary %>%
dplyr::filter(region %in% region_name &
date >= date_min & date <= date_max) %>%
ggplot(aes(x = date, col = `Data source`, fill = `Data source`)) +
geom_ribbon(aes(ymin = lower_50, ymax = upper_50),
alpha = 0.2, size = 0, colour = NA) +
geom_ribbon(aes(ymin = lower_90, ymax = upper_90),
alpha = 0.1, colour = NA) +
geom_line(aes(y = median),
alpha = 0.9, size = 1) +
geom_hline(yintercept = 1, linetype = 2) +
coord_cartesian(#ylim = c(scale_min, scale_max),
xlim = c(date_min, date_max)) +
scale_color_manual(values = colours) +
scale_fill_manual(values = colours) +
scale_x_date(date_breaks = "1 week", date_labels = "%b %d") +
scale_y_continuous(breaks=seq(0, 1.4, by = 0.2)) +
cowplot::theme_cowplot() +
labs(y = "R", x = NULL) +
theme(legend.position = "bottom",
axis.text.x = element_text(angle = 45, hjust = 1)) +
guides(colour = guide_legend(override.aes = list(alpha = 1)))
}
region_plot_rt <- purrr::map(region_list,
~ plot_rt_fn(region_name = .x))
region_plot_rt$`East of England`
# Plot all regionsL
plot_everywhere <- (region_plot_rt[[1]] +
plot_layout(tag_level = "new",
widths = c(2,5)) &
theme(axis.text.x = element_blank())) +
plot_layout(guides = "collect") +
plot_annotation(tag_levels = c("A", "1"),
tag_sep = "(",
tag_suffix = ")") &
theme(legend.position = "bottom",
text = element_text(size = 20),
axis.text = element_text(size = 20),
plot.subtitle = element_text(size = 20),
plot.tag = element_text(size = 15))
# Plot all regions:
library(patchwork)
plot_everywhere <- (region_plot_rt[[1]] +
plot_layout(tag_level = "new",
widths = c(2,5)) &
theme(axis.text.x = element_blank())) +
plot_layout(guides = "collect") +
plot_annotation(tag_levels = c("A", "1"),
tag_sep = "(",
tag_suffix = ")") &
theme(legend.position = "bottom",
text = element_text(size = 20),
axis.text = element_text(size = 20),
plot.subtitle = element_text(size = 20),
plot.tag = element_text(size = 15))
plot_everywhere
plot_everywhere <- region_plot_rt[[1:7]]
plot_everywhere <- region_plot_rt[1:7]
plot_everywhere
date_min <- min(summary[summary$source==2,]$date)
date_min
summary[summary$source==2,]
min(summary[summary$source==2,]$date)
date_min <- min(dplyr::filter(summary, source == 2) %>%
dplyr::select(date))
date_min <- min(dplyr::filter(summary, source == 2)$date)
date_min
date_min <- min(admissions$date)
date_min
View(admissions)
date_min <- min(admissions[admissions$region=="England",]$date)
date_min
plot_rt_fn <- function(region_name){
summary %>%
dplyr::filter(region %in% region_name &
date >= date_min & date <= date_max) %>%
ggplot(aes(x = date, col = `Data source`, fill = `Data source`)) +
geom_ribbon(aes(ymin = lower_50, ymax = upper_50),
alpha = 0.2, size = 0, colour = NA) +
geom_ribbon(aes(ymin = lower_90, ymax = upper_90),
alpha = 0.1, colour = NA) +
geom_line(aes(y = median),
alpha = 0.9, size = 1) +
geom_hline(yintercept = 1, linetype = 2) +
coord_cartesian(#ylim = c(scale_min, scale_max),
xlim = c(date_min, date_max)) +
scale_color_manual(values = colours) +
scale_fill_manual(values = colours) +
scale_x_date(date_breaks = "1 week", date_labels = "%b %d") +
scale_y_continuous(breaks=seq(0, 1.4, by = 0.2)) +
cowplot::theme_cowplot() +
labs(y = "R", x = NULL) +
theme(legend.position = "bottom",
axis.text.x = element_text(angle = 45, hjust = 1)) +
guides(colour = guide_legend(override.aes = list(alpha = 1)))
}
region_plot_rt <- purrr::map(region_list,
~ plot_rt_fn(region_name = .x))
plot_everywhere <- region_plot_rt[1:7]
# Plot an individual region:
region_plot_rt$England
plot_everywhere <- region_plot_rt[[1]] +
region_plot_rt[[2]] +
region_plot_rt[[3]] +
region_plot_rt[[4]] +
region_plot_rt[[5]] +
region_plot_rt[[6]]
plot_everywhere
plot_everywhere <- region_plot_rt[[1]] +
region_plot_rt[[2]] +
region_plot_rt[[3]] +
region_plot_rt[[4]] +
region_plot_rt[[5]] +
region_plot_rt[[6]] +
plot_layout(guides = "collect")
plot_everywhere <- region_plot_rt[[1]] +
region_plot_rt[[2]] +
region_plot_rt[[3]] +
region_plot_rt[[4]] +
region_plot_rt[[5]] +
region_plot_rt[[6]] +
plot_layout(guides = "collect") &
theme(legend.position = "bottom")
plot_everywhere
colours
View(region_plot_rt)
plot_everywhere <- region_plot_rt[[1]] +
region_plot_rt[[2]] +
region_plot_rt[[3]] +
region_plot_rt[[4]] +
region_plot_rt[[5]] +
region_plot_rt[[6]] +
region_plot_rt[[7]] +
region_plot_rt[[8]] +
plot_layout(guides = "collect") &
theme(legend.position = "bottom")
plot_everywhere
# Plot an individual region:
region_plot_rt$England
