# Format for epinow2 ------------------------------------------------------
data_select <- data.table::as.data.table(data)
data_select <- data.table::setnames(data_select, old = count_variable[i], new = "confirm")
# Include breakpoint
data_select <- data_select[, .(date, region, confirm, breakpoint)]
# truncate 5 days
data_select <- data_select[, .SD[date <= (Sys.Date() - lubridate::days(truncate))], by = region]
data.table::setorder(data_select, date)
count_variable = "cases_new"
i = 1
truncate = 5
targets <- paste0(save_loc, count_variable[i], "/region")
summary <- paste0(save_loc, count_variable[i], "/summary")
# Format for epinow2 ------------------------------------------------------
data_select <- data.table::as.data.table(data)
data_select <- data.table::setnames(data_select, old = count_variable[i], new = "confirm")
# Include breakpoint
data_select <- data_select[, .(date, region, confirm, breakpoint)]
# truncate 5 days
data_select <- data_select[, .SD[date <= (Sys.Date() - lubridate::days(truncate))], by = region]
data.table::setorder(data_select, date)
count_variable = "cases_test"
targets <- paste0(save_loc, count_variable[i], "/region")
summary <- paste0(save_loc, count_variable[i], "/summary")
# Format for epinow2 ------------------------------------------------------
data_select <- data.table::as.data.table(data)
data_select <- data.table::setnames(data_select, old = count_variable[i], new = "confirm")
# Include breakpoint
data_select <- data_select[, .(date, region, confirm, breakpoint)]
# truncate 5 days
data_select <- data_select[, .SD[date <= (Sys.Date() - lubridate::days(truncate))], by = region]
data.table::setorder(data_select, date)
# US forecast settings
regional_epinow( # standard settings (US forecast)
samples = 2000,
horizon = 14,
generation_time = generation_time,
delays = list(incubation_period, reporting_delay),
stan_args = list(warmup = 500,
cores = no_cores,
control = list(adapt_delta = 0.95,
max_treedepth = 15),
chains = ifelse(no_cores <= 4, 4, no_cores)),
burn_in = 14,
non_zero_points = 14,
max_execution_time = 60 * 30,
future = TRUE,
output = c("region", "samples", "summary", "timing"),
# Custom settings
reported_cases = data_select,
target_folder = targets,
summary_args = list(summary_dir = summary,
all_regions = FALSE),
logs = "rt-estimate/logs/us-settings",
future_rt = "latest")
reporting_delay = cases_delay
# US forecast settings
regional_epinow( # standard settings (US forecast)
samples = 2000,
horizon = 14,
generation_time = generation_time,
delays = list(incubation_period, reporting_delay),
stan_args = list(warmup = 500,
cores = no_cores,
control = list(adapt_delta = 0.95,
max_treedepth = 15),
chains = ifelse(no_cores <= 4, 4, no_cores)),
burn_in = 14,
non_zero_points = 14,
max_execution_time = 60 * 30,
future = TRUE,
output = c("region", "samples", "summary", "timing"),
# Custom settings
reported_cases = data_select,
target_folder = targets,
summary_args = list(summary_dir = summary,
all_regions = FALSE),
logs = "rt-estimate/logs/us-settings",
future_rt = "latest")
# US forecast settings
regional_epinow( # standard settings (US forecast)
samples = 2000,
horizon = 14,
generation_time = generation_time,
delays = list(incubation_period, reporting_delay),
stan_args = list(warmup = 500,
cores = no_cores,
control = list(adapt_delta = 0.95,
max_treedepth = 15),
chains = ifelse(no_cores <= 4, 4, no_cores)),
burn_in = 14,
non_zero_points = 14,
max_execution_time = 60 * 30,
future = TRUE,
output = c("region", "samples", "summary", "timing"),
# Custom settings
reported_cases = data_select,
target_folder = targets,
summary_args = list(summary_dir = summary,
all_regions = FALSE),
logs = "rt-estimate/logs/us-settings",
future_rt = "latest")
# US forecast settings
regional_epinow( # standard settings (US forecast)
samples = 2000,
horizon = 14,
generation_time = generation_time,
delays = list(incubation_period, reporting_delay),
stan_args = list(warmup = 500,
cores = no_cores,
control = list(adapt_delta = 0.95,
max_treedepth = 15),
chains = ifelse(no_cores <= 4, 4, no_cores)),
burn_in = 14,
non_zero_points = 2,
max_execution_time = 60 * 30,
future = TRUE,
output = c("region", "samples", "summary", "timing"),
# Custom settings
reported_cases = data_select,
target_folder = targets,
summary_args = list(summary_dir = summary,
all_regions = FALSE),
logs = "rt-estimate/logs/us-settings",
future_rt = "latest")
# Get function for Rts
source(here::here("rt-estimate", "utils",  "rt-breakpoint.R"))
# Set root for saving estimates
save_loc <- "rt-estimate/estimate-break/"
# Cases
run_rt_breakpoint(data = data,
truncate = 5,
count_variable = "cases_test",
reporting_delay = cases_delay,
generation_time = generation_time,
save_loc = save_loc,
no_cores = no_cores)
# Cases
run_rt_breakpoint(data = data,
truncate = 5,
count_variable = "cases_test",
reporting_delay = cases_delay,
generation_time = generation_time,
save_loc = save_loc,
no_cores = no_cores)
# Cases
run_rt_breakpoint(data = data,
truncate = 3,
count_variable = "cases_test",
reporting_delay = cases_delay,
generation_time = generation_time,
save_loc = save_loc,
no_cores = no_cores)
?estimate_infections
?Epinow2::estimate_infections
?EpiNow2::estimate_infections
rm(list=ls(
))
library(EpiNow2)
library(data.table)
library(future)
# install.packages("EpiNow2")
# Delays -----------------------------------------------------------
# Update
# source(here::here("rt-estimate", "delays", "public-linelist-delays.R"))
# Fixed
generation_time <- readRDS(here::here("rt-estimate", "delays", "data", "generation_time.rds"))
incubation_period <- readRDS(here::here("rt-estimate", "delays", "data", "incubation_period.rds"))
# Deaths delay
deaths_delay <- readRDS(here::here("rt-estimate", "delays", "data", "cocin_onset_to_death_delay.rds"))
# Cases delay
cases_delay <- readRDS(here::here("rt-estimate", "delays", "data", "public_onset_to_report_delay.rds"))
# get data ----------------------------------------------------------------
# Set up query
structure <- list("date", "areaName",
"newDeaths28DaysByDeathDate",
"newCasesBySpecimenDate",
"newAdmissions")
names(structure) <- structure
areaType <- list("nation" = "areaType=nation")
# Get data
raw <- ukcovid19::get_data(filters = areaType, structure = structure)
# clean
data <- data.table::as.data.table(raw)
old <- unlist(structure)
new <- c("date", "region", "deaths_death",  "cases_test", "cases_hosp")
data <- data.table::setnames(data, old, new)
# Set date sequence to start from 12wks
data$date <- lubridate::ymd(data$date)
data <- data[, .SD[date >= (max(date)-84), by = region]]
data <- data[, .SD[date >= (max(date)-84)], by = region]
data <- data.table::as.data.table(raw)
old <- unlist(structure)
new <- c("date", "region", "deaths_death",  "cases_test", "cases_hosp")
data <- data.table::setnames(data, old, new)
# Set date sequence to start from 12wks
data$date <- lubridate::ymd(data$date)
data <- data[, .SD[date >= (max(date)-84)], by = region]
View(data)
# Remove England/Scotland
data <- data[region %in% c("Wales", "Northern Ireland")]
View(data)
# Add breakpoints
data <- data[, breakpoint := data.table::fifelse( (date == as.Date("2020-10-16") &
region == "Northern Ireland") |
(date == as.Date("2020-10-24") &
region == "Wales"),
1, 0)]
View(data)
lubridate::day(as.Date("2020-10-16"))
weekday(as.Date("2020-10-16"))
weekdays(as.Date("2020-10-16"))
# Add multiple breakpoints, weekly on Friday, for random walk
data <- data[, breakpoint := data.table::fifelse(weekdates(as.Date(date)) == "Friday",
1, breakpoint)]
# Add multiple breakpoints, weekly on Friday, for random walk
data <- data[, breakpoint := data.table::fifelse(weekdays(as.Date(date)) == "Friday",
1, breakpoint)]
View(data)
data <- data.table::as.data.table(raw)
old <- unlist(structure)
new <- c("date", "region", "deaths_death",  "cases_test", "cases_hosp")
data <- data.table::setnames(data, old, new)
# Set date sequence to start from 12wks
data$date <- lubridate::ymd(data$date)
data <- data[, .SD[date >= (max(date)-84)], by = region]
# Remove England/Scotland
data <- data[region %in% c("Wales", "Northern Ireland")]
# Add breakpoints
data <- data[, breakpoint := data.table::fifelse( (date == as.Date("2020-10-16") &
region == "Northern Ireland") |
(date == as.Date("2020-10-24") &
region == "Wales"),
1, 0)]
# Add multiple breakpoints, weekly on Friday, for random walk
data <- data[, breakpoint := data.table::fifelse(weekdays(as.Date(date)) == "Friday" &
breakpoint == 0,
1, breakpoint)]
data <- data.table::as.data.table(raw)
old <- unlist(structure)
new <- c("date", "region", "deaths_death",  "cases_test", "cases_hosp")
data <- data.table::setnames(data, old, new)
# Set date sequence to start from 12wks
data$date <- lubridate::ymd(data$date)
data <- data[, .SD[date >= (max(date)-84)], by = region]
# Remove England/Scotland
data <- data[region %in% c("Wales", "Northern Ireland")]
# Set breakpoints
breakpoints <- data.frame("region" = c("Wales", "Northern Ireland"),
"break" = as.Date(c("2020-10-24", "2020-10-16")))
View(breakpoints)
breakpoints$break.
# Set breakpoints
breakpoints <- data.frame("region" = c("Wales", "Northern Ireland"),
"breaks" = as.Date(c("2020-10-24", "2020-10-16")))
bkpt_wales <- data.frame("date" = seq.Date(from = min(data[data$region == "Wales", "date"]),
to = "2020-10-24", by = 1),
"region" = "Wales")
bkpt_wales <- data.frame("date" = seq.Date(from = min(data[data$region == "Wales", "date"]),
to = "2020-10-24", by = 1))
bkpt_wales <- data.frame("date" = seq.Date(from = min(as.Date(data[data$region == "Wales", "date"])),
to = as.Date("2020-10-24"), by = 1))
bkpt_wales <- data.frame("date" = seq.Date(from = as.Date(min(data[data$region == "Wales", "date"])),
to = as.Date("2020-10-24"), by = 1))
min(data$date)
min(which(weekdays(data$date)=="Friday"))
as.Date(min(which(weekdays(data$date)=="Friday")))
fridays <- data.frame("date" = data$date,
"day" = weekdays(date))
fridays <- data.frame("date" = data$date,
"day" = weekdays(data$date))
fridays <- data.frame("date" = data$date,
"day" = weekdays(data$date))[day == "Friday",]
fridays <- data.table("date" = data$date,
"day" = weekdays(data$date))
fridays <- fridays[day == "Friday",]
fridays <- data.table("date" = data$date,
"day" = weekdays(data$date))[day == "Friday",]
View(fridays)
fridays <- data.table(data[,c(date, region)]
fridays <- data.table("date" = data$date,
"day" = weekdays(data$date))[day == "Friday",]
bkpt_wales <- data.frame("date" = seq.Date(from = as.Date(min(data[data$region == "Wales", "date"])),
to = as.Date("2020-10-24"), by = 1))
,
"region" = "Wales")
fridays <- data.table(data[,c(date, region)])
View(fridays)
fridays <- data[,c(date, region)])
fridays <- data[,c(date, region)]
fridays <- data[, .(date, region)]
View(fridays)
breakpoints <- data[, .(date, region)]
breakpoints <- breakpoints[, .SD[date == (weekdays(date)=="Friday")], by = region]
breakpoints <- breakpoints[, .SD[date == (data$date[weekdays(date)=="Friday"),], by = region]
breakpoints <- data[, .(date, region)]
breakpoints <- breakpoints[, .SD[date == (data$date[weekdays(date)=="Friday","date"]), by = region]
breakpoints <- data[, .(date, region)]
breakpoints <- breakpoints[, .SD[date == (data$date[weekdays(date)=="Friday","date"])], by = region]
breakpoints <- breakpoints[, .SD[date %in% (data$date[weekdays(date)=="Friday"]$date)], by = region]
fridays <- data[weekdays(data$date)=="Friday", "date"]
View(fridays)
fridays <- rep(data[weekdays(data$date)=="Friday", "date"], 2)
View(fridays)
fridays <- data.frame("friday" = rep(data[weekdays(data$date)=="Friday", "date"], 2))
View(fridays)
fridays <- data.frame("friday" = (rep(data[weekdays(data$date)=="Friday", "date"], 2)))
View(fridays)
fridays <- rep(data[weekdays(data$date)=="Friday", "date"], 2)
fridays <- data[weekdays(data$date)=="Friday", "date"]
fridays <- rep(fridays, 2)
fridays <- rep(fridays)
fridays <- data[weekdays(data$date)=="Friday", "date"]
fridays <- rbind(fridays, fridays)
fridays <- data[weekdays(data$date)=="Friday", c("date", "region")]
View(fridays)
# Set breakpoints
breakpoints <- data.frame("region" = c("Wales", "Northern Ireland"),
"breaks" = as.Date(c("2020-10-24", "2020-10-16")))
View(breakpoints)
fridays <- merge(fridays, breakpoints, by = "region")
View(fridays)
fridays <- data[weekdays(data$date)=="Friday", c("date", "region")]
breaks <- rbind(fridays, breakpoints)
# Set breakpoints
breakpoints <- data.frame("region" = c("Wales", "Northern Ireland"),
"date" = as.Date(c("2020-10-24", "2020-10-16")))
fridays <- data[weekdays(data$date)=="Friday", c("date", "region")]
breaks <- rbind(fridays, breakpoints)
View(breaks)
breaks <- unique(breaks)
breaks <- merge(breaks, fridays)
View(breaks)
breakpoints <- data.frame("region" = c("Wales", "Northern Ireland"),
"date" = as.Date(c("2020-10-24", "2020-10-16")))
fridays <- data[weekdays(data$date)=="Friday", c("date", "region")]
breaks <- unique(rbind(fridays, breakpoints))
breaks <- merge(breakpoints, fridays)
View(breaks)
breakpoints <- data.frame("region" = c("Wales", "Northern Ireland"),
"date" = as.Date(c("2020-10-24", "2020-10-16")))
fridays <- data[weekdays(data$date)=="Friday", c("date", "region")]
breaks <- unique(rbind(fridays, breakpoints))
View(breaks)
breaks <- merge(breakpoints, fridays, by = "region")
View(breaks)
breakpoints <- data.frame("region" = c("Wales", "Northern Ireland"),
"date" = as.Date(c("2020-10-24", "2020-10-16")))
fridays <- data[weekdays(data$date)=="Friday", c("date", "region")]
fridays <- unique(rbind(fridays, breakpoints))
breaks <- merge(fridays, breakpoints, by = "region")
breaks$keep <- ifelse(breaks$date.x > breaks$date.y, FALSE, TRUE)
breaks <- breaks[breaks$keep == TRUE, "date"]
breaks <- breaks[breaks$keep == TRUE, "date.x"]
View(breaks)
breakpoints <- data.frame("region" = c("Wales", "Northern Ireland"),
"date" = as.Date(c("2020-10-24", "2020-10-16")))
fridays <- data[weekdays(data$date)=="Friday", c("date", "region")]
fridays <- unique(rbind(fridays, breakpoints))
breaks <- merge(fridays, breakpoints, by = "region")
breaks$keep <- ifelse(breaks$date.x > breaks$date.y, FALSE, TRUE)
breaks <- breaks[breaks$keep == TRUE, c("date.x", "region")]
View(breaks)
fridays <- data[weekdays(data$date)=="Monday", c("date", "region")]
fridays <- unique(rbind(fridays, breakpoints))
breaks <- merge(fridays, breakpoints, by = "region")
breaks$keep <- ifelse(breaks$date.x > breaks$date.y, FALSE, TRUE)
breaks <- breaks[breaks$keep == TRUE, c("date.x", "region")]
data_break <- merge(data, breaks, by = "region")
breakpoints <- data.frame("region" = c("Wales", "Northern Ireland"),
"date" = as.Date(c("2020-10-24", "2020-10-16")))
fridays <- data[weekdays(data$date)=="Monday", c("date", "region")]
fridays <- unique(rbind(fridays, breakpoints))
breaks <- merge(fridays, breakpoints, by = "region")
breaks$keep <- ifelse(breaks$date.x > breaks$date.y, FALSE, TRUE)
breaks <- breaks[breaks$keep == TRUE, c("date.x", "region")]
data_break <- merge(data, breaks, by = "region")
data <- data[, .SD[breakpoint := data.table::fifelse(date %in% breaks$date, 1, 0)], by = region]
data <- data[, .SD[, breakpoint := data.table::fifelse(date %in% breaks$date, 1, 0)], by = region]
?.SD
data <- data[, breakpoint := data.table::fifelse(date %in% breaks$date, 1, 0), by = region]
View(data)
rm(list=ls())
library(EpiNow2)
library(data.table)
library(future)
# install.packages("EpiNow2")
# Delays -----------------------------------------------------------
# Update
# source(here::here("rt-estimate", "delays", "public-linelist-delays.R"))
# Fixed
generation_time <- readRDS(here::here("rt-estimate", "delays", "data", "generation_time.rds"))
incubation_period <- readRDS(here::here("rt-estimate", "delays", "data", "incubation_period.rds"))
# Deaths delay
deaths_delay <- readRDS(here::here("rt-estimate", "delays", "data", "cocin_onset_to_death_delay.rds"))
# Cases delay
cases_delay <- readRDS(here::here("rt-estimate", "delays", "data", "public_onset_to_report_delay.rds"))
# get data ----------------------------------------------------------------
# Set up query
structure <- list("date", "areaName",
"newDeaths28DaysByDeathDate",
"newCasesBySpecimenDate",
"newAdmissions")
names(structure) <- structure
areaType <- list("nation" = "areaType=nation")
# Get data
raw <- ukcovid19::get_data(filters = areaType, structure = structure)
# clean
data <- data.table::as.data.table(raw)
old <- unlist(structure)
new <- c("date", "region", "deaths_death",  "cases_test", "cases_hosp")
data <- data.table::setnames(data, old, new)
# Set date sequence to start from 12wks
data$date <- lubridate::ymd(data$date)
data <- data[, .SD[date >= (max(date)-84)], by = region]
# Remove England/Scotland
data <- data[region %in% c("Wales", "Northern Ireland")]
# Add breakpoints
data <- data[, breakpoint := data.table::fifelse( (date == as.Date("2020-10-16") &
region == "Northern Ireland") |
(date == as.Date("2020-10-24") &
region == "Wales"),
1, 0)]
setup_future <- function(jobs) {
if (!interactive()) {
## If running as a script enable this
options(future.fork.enable = TRUE)
}
plan(tweak(multiprocess, workers = min(future::availableCores(), jobs)),
gc = TRUE, earlySignal = TRUE)
jobs <- max(1, round(future::availableCores() / jobs, 0))
return(jobs)
}
no_cores <- setup_future(length(unique(data$region)))
# Rt estimate -------------------------------------------------------------
# Get function for Rts
source(here::here("rt-estimate", "estimate-break",  "rt-breakpoint.R"))
# Set root for saving estimates
save_loc <- "rt-estimate/estimate-break/"
# Cases
cases <- run_rt_breakpoint(data = data,
truncate = 3,
count_variable = "cases_test",
reporting_delay = cases_delay,
generation_time = generation_time,
incubation_period = incubation_period,
save_loc = save_loc,
no_cores = no_cores)
# Get function for Rts
source(here::here("rt-estimate", "estimate-break",  "rt-breakpoint.R"))
if(!dir.exists(here::here(save_loc,
count_variable[i]))) {
dir.create(here::here(save_loc,
count_variable[i]))
}
targets <- paste0(save_loc, count_variable[i], "/region")
summary <- paste0(save_loc, count_variable[i], "/summary")
# Format for epinow2 ------------------------------------------------------
data_select <- data.table::as.data.table(data)
data_select <- data.table::setnames(data_select, old = count_variable[i], new = "confirm")
count_variable <- "cases_test"
data_select <- data.table::as.data.table(data)
data_select <- data.table::setnames(data_select, old = count_variable[i], new = "confirm")
# Include breakpoint
data_select <- data_select[, .(date, region, confirm, breakpoint)]
# truncate 5 days
data_select <- data_select[, .SD[date <= (Sys.Date() - lubridate::days(truncate))], by = region]
data.table::setorder(data_select, date)
(Sys.Date() - lubridate::days(truncate))
truncate
truncate = 3
# truncate 5 days
data_select <- data_select[, .SD[date <= (Sys.Date() - lubridate::days(truncate))], by = region]
# Get function for Rts
source(here::here("rt-estimate", "estimate-break",  "rt-breakpoint.R"))
# Get function for Rts
source(here::here("rt-estimate", "estimate-break",  "rt-breakpoint.R"))
# Set root for saving estimates
save_loc <- "rt-estimate/estimate-break/"
# Cases
cases <- run_rt_breakpoint(data = data,
truncate = 3,
count_variable = "cases_test",
reporting_delay = cases_delay,
generation_time = generation_time,
incubation_period = incubation_period,
save_loc = save_loc,
no_cores = no_cores)
# Cases
cases <- run_rt_breakpoint(data = data,
type = "breakpoint",
truncate = 3,
count_variable = "cases_test",
reporting_delay = cases_delay,
generation_time = generation_time,
incubation_period = incubation_period,
save_loc = save_loc,
no_cores = no_cores)
remotes::install_github("epiforecasts/EpiNow2")
# Get function for Rts
source(here::here("rt-estimate", "estimate-break",  "rt-breakpoint.R"))
# Cases
cases <- run_rt_breakpoint(data = data,
type = "breakpoint",
truncate = 3,
count_variable = "cases_test",
reporting_delay = cases_delay,
generation_time = generation_time,
incubation_period = incubation_period,
save_loc = save_loc,
no_cores = no_cores)
remotes::install_github("epiforecasts/EpiNow2")
