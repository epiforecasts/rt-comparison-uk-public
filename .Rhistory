wave_hosp_death <- wave_features(eng, variable = "hospb_deathb_med", window = 7)
wave_hosp_death <- wave_features(eng, variable = "hosp_deathb_med", window = 7)
View(wave_case_hosp)
View(data)
View(data_regional)
data$diff_cases_test <- diff(data$cases_test)
data$diff_cases_test <- diff(data$cases_test, 1)
View(eng)
eng <- merge(eng, data, by = "date")
View(eng)
diff(eng$cases_test)
eng$diff_cases_test <- diff(eng$cases_test)
eng$diff_cases_test <- c(NA, diff(eng$cases_test))
eng$diff_cases_hosp <- c(NA, diff(eng$cases_hosp))
eng$diff_deaths <- c(NA, diff(eng$deaths_death))
View(eng)
eng <- merge(eng, data[data$region == "England",], by = "date")
View(eng)
921-388
388/533
View(regional_wave_features)
regional_wave_features[["North East and Yorkshire"]][["cases"]][["amplitudes"]]
regional_wave_features[["North East and Yorkshire"]][["cases"]][["peaks"]]
t.test(0.035, 0.005, 0.090, 0.115, 0.050)
t.test(c(0.035, 0.005, 0.090, 0.115, 0.050))
regional_wave_features[["North West"]][["cases"]][["peaks"]]
regional_wave_features[["North West"]][["cases"]][["amplitudes"]]
regional_wave_features[["Midlands"]][["cases"]][["peaks"]]
regional_wave_features[["Midlands"]][["cases"]][["amplitudes"]]
mean(0.07,0.1)
mean(0.105, 0.065, 0.020, 0.065()
mean(c(0.105, 0.065, 0.020, 0.065))
View(all_wave)
all_wave[["cases"]][["England"]][["peaks"]]
all_wave[["cases"]][["England"]][["amplitudes"]]
mean(cC(0.030, 0.260, 0.100))
mean(c(0.030, 0.260, 0.100))
mean(c(0.79,0.005))
all_wave[["cases"]][["England"]][["peak_values"]]
all_wave[["cases"]][["England"]][["troughs"]]
all_wave[["cases"]][["England"]][["trough_values"]]
# National - Plot all
plot_national <-
{plot_ma_only_national +
plot_rt_national +
plot_layout(nrow=2, heights = c(2,5))} /
{plot_national_ratio_caseb_deathb +
plot_national_hosp_deathb +
plot_national_caseb_hosp +
plot_layout(ncol= 3)} +
patchwork::plot_annotation(tag_levels = c("A")) +
plot_layout(nrow = 2, guides = "collect") &
theme(legend.position = "bottom")
source("compare/plot-data.R")
source("compare/plot-rt.R")
source("compare/plot-ratios.R")
# National - Plot all
plot_national <-
{plot_ma_only_national +
plot_rt_national +
plot_layout(nrow=2, heights = c(2,5))} /
{plot_national_ratio_caseb_deathb +
plot_national_hosp_deathb +
plot_national_caseb_hosp +
plot_layout(ncol= 3)} +
patchwork::plot_annotation(tag_levels = c("A")) +
plot_layout(nrow = 2, guides = "collect") &
theme(legend.position = "bottom")
# Get region names and plotting colours
source("utils/utils.R")
# Set global variables
# consistent date axis:
date_min <- as.Date("2020-04-04")
date_max <-as.Date("2020-08-20")
theme_set(theme_classic(base_size = 12))
theme_set(theme_classic(base_size = 15))
source("compare/plot-data.R")
source("compare/plot-rt.R")
source("compare/plot-ratios.R")
# National - Plot all
plot_national <-
{plot_ma_only_national +
plot_rt_national +
plot_layout(nrow=2, heights = c(2,5))} /
{plot_national_ratio_caseb_deathb +
plot_national_hosp_deathb +
plot_national_caseb_hosp +
plot_layout(ncol= 3)} +
patchwork::plot_annotation(tag_levels = c("A")) +
plot_layout(nrow = 2, guides = "collect") &
theme(legend.position = "bottom")
source("compare/plot-data.R")
source("compare/plot-rt.R")
source("compare/plot-ratios.R")
# National - Plot all
plot_national <-
{plot_ma_only_national +
plot_rt_national +
plot_layout(nrow=2, heights = c(2,5))} /
{plot_national_ratio_caseb_deathb +
plot_national_hosp_deathb +
plot_national_caseb_hosp +
plot_layout(ncol= 3)} +
patchwork::plot_annotation(tag_levels = c("A")) +
plot_layout(nrow = 2, guides = "collect") &
theme(legend.position = "bottom")
source("data/age-settings-data.R")
# Get count data ----------------------------------------------------------
# If data won't download, read in a saved hard copy of cleaned data - 23 August 2020
if(class(try(source(here::here("data", "get-uk-data.R")))) == "try-error") {
message("--- API failure - loading saved data ---")
data <- readRDS("data/200823.rds")
} else {
source(here::here("data", "get-uk-data.R"))
}
# Get region names and plotting colours
source("utils/utils.R")
standardised_data <- data %>%
# Filter before data truncation (where Rt is "estimate" not "based on partial data")
dplyr::filter(date >= date_min & date <= date_max) %>%
# Standardise by region
dplyr::group_by(region) %>%
#  - z-scores
dplyr::mutate(# 7-day moving average
ma_cases_blend = forecast::ma(cases_blend, order = 7),
ma_cases_hosp = forecast::ma(cases_hosp, order = 7),
ma_deaths_blend = forecast::ma(deaths_blend, order = 7)) %>%
dplyr::ungroup()
# Factor regions for consistent plot alignment
standardised_data$region = factor(standardised_data$region,
levels = region_names$region_factor)
# Plot-ready 7-day MA ----------------------------------------------------------------
data_ma <- standardised_data %>%
dplyr::select(date, region, region_type, dplyr::starts_with("ma")) %>%
tidyr::pivot_longer(cols = dplyr::starts_with("ma"), names_to = "variable", values_to = "ma") %>%
dplyr::mutate(variable = stringr::str_remove_all(variable, "^ma_")) %>%
dplyr::mutate('Data source' = dplyr::recode_factor(variable,
"cases_blend" = "Cases",
"cases_hosp" = "Hospital admissions",
"deaths_blend" = "Deaths")) %>%
# Add positivity rates (weekly)
dplyr::left_join(pos_tests, by = c("date", "region")) %>%
dplyr::mutate(pos_perc = factor(ifelse(!`Data source` == "Cases", NA,
ifelse(pos_perc < 4.945 |
is.na(pos_perc), NA, ma))),
week = lubridate::week(date)) %>%
dplyr::group_by(region, week, `Data source`) %>%
tidyr::fill(pos_perc, .direction = "updown") %>%
dplyr::mutate(pos_perc = ifelse(is.na(pos_perc), NA, ma),
region = factor(region, levels = region_names$region_factor))
# Read in England positivity rates
raw_pos_eng <- readxl::read_excel(path = tf,
sheet = grep("Figure 5", sheets),
range = readxl::cell_limits(c(44, 2), c(NA, NA)))
raw_pos_eng <- raw_pos_eng[,1:2]
names(raw_pos_eng) <- c("week", "England")
# Join
raw_pos_pillar2$week <- as.numeric(raw_pos_pillar2$week)
raw_pos_eng$week <- as.numeric(raw_pos_eng$week)
# Read in England positivity rates
raw_pos_eng <- readxl::read_excel(path = tf,
sheet = grep("Figure 5", sheets),
range = readxl::cell_limits(c(44, 2), c(NA, NA)))
raw_pos_eng <- raw_pos_eng[,1:2]
View(raw_pos_eng)
# Total and proportion test-positive cases by age over time --------------------------------------------------
xls_url <- "https://assets.publishing.service.gov.uk/government/uploads/system/uploads/attachment_data/file/914814/Weekly_COVID19_report_data_w36.xlsx"
httr::GET(xls_url, httr::write_disk(tf <- tempfile(fileext = ".xlsx")))
sheets <- readxl::excel_sheets(tf)
sheets <- readxl::excel_sheets(tf)
sheets
xls_url <- "https://assets.publishing.service.gov.uk/government/uploads/system/uploads/attachment_data/file/914814/Weekly_COVID19_report_data_w36.xlsx"
httr::GET(xls_url, httr::write_disk(tf <- tempfile(fileext = ".xlsx")))
sheets <- readxl::excel_sheets(tf)
# # Regional pillar 2
raw_pos_pillar2 <- readxl::read_excel(path = tf,
sheet = grep("Figure 8", sheets),
range = readxl::cell_limits(c(44, 2), c(NA, NA)))
colnames(raw_pos_pillar2) <- colnames(pos_pillar1)
# Read in England positivity rates
raw_pos_eng <- readxl::read_excel(path = tf,
sheet = grep("Figure 5", sheets),
range = readxl::cell_limits(c(44, 2), c(NA, NA)))
raw_pos_eng <- raw_pos_eng[,1:2]
View(raw_pos_eng)
generation_time <- readRDS(here::here("rt-estimate", "estimate", "delays", "data", "generation_time.rds"))
incubation_period <- readRDS(here::here("rt-estimate","estimate", "delays", "data", "incubation_period.rds"))
# Deaths delay
deaths_delay <- readRDS(here::here("rt-estimate","estimate", "delays", "data", "onset_to_death_delay.rds"))
# Cases delay
cases_delay <- readRDS(here::here("rt-estimate","estimate", "delays", "data", "onset_to_admission_delay.rds"))
View(deaths_delay)
View(cases_delay)
exp(cases_delay[["mean"]])
exp(cases_delay[["mean_sd"]])
exp(cases_delay[["sd"]])
exp(cases_delay[["sd_sd"]])
exp(deaths_delay[["mean"]])
exp(deaths_delay[["mean_sd"]])
exp(deaths_delay[["sd"]])
exp(deaths_delay[["sd_sd"]])
eng
View(eng)
summary_wide <- readRDS("rt-estimate/summary_wide.rds")
england <- summary_wide[summary_wide$region=="England", "date" > as.Date("2020-06-01")]
england <- summary_wide[summary_wide$region=="England", "date" > as.Date("2020-06-01")]
england <- summary_wide[summary_wide$region=="England", summary_wide$date > as.Date("2020-06-01")]
england <- summary_wide[summary_wide$region=="England" &
summary_wide$date > as.Date("2020-06-01"),]
View(england)
england <- summary_wide[summary_wide$region=="England" &
summary_wide$date > as.Date("2020-06-01"),
c("date", "median_cases_blend")]
View(england)
summary_wide <- readRDS("rt-estimate/summary_wide.rds")
data <- summary_wide[summary_wide$region=="England" &
summary_wide$date > as.Date("2020-06-01"),
c("date", "median_cases_blend")]
data_zoo <- zoo::zoo(data["median_cases_blend"], order.by = data$date)
# Set a window to take the max from
window <- 7
# Roll over that window to find the index of the max value
peaks <- zoo::rollapply(data_zoo, window, function(x) which.max(x)==2)
peaks
zoo::index(peaks)[peaks == TRUE] -2 # Calibrate (overshoots by 2d)
?rollapply
2*4-1
2*7-1
2*3-1
# Roll over that window, identify max value, and return TRUE on that date
peaks <- zoo::rollapply(data_zoo, window, function(x) which.max(x))
peaks
# Roll over that window, identify max value, and return TRUE on that date
peaks <- zoo::rollapplyr(data_zoo, window, function(x) which.max(x))
peaks
data_zoo
View(data)
# Roll over that window, identify max value, and return TRUE on that date
peaks <- zoo::rollapply(data_zoo, window, function(x) which.max(x))
peaks
# Roll over that window, identify max value, and return TRUE on that date
peaks <- zoo::rollapply(data_zoo, window, function(x) which.max(x)==2)
peaks
# Roll over that window, identify max value, and return TRUE on that date
peaks <- zoo::rollapplyr(data_zoo, window, function(x) which.max(x)==2)
peaks
peaks <- zoo::rollapplyr(data_zoo, window, function(x) which.max(x)==window-1)
peaks
zoo::rollapply(data_zoo, window, function(x) which.max(x)==window-1)
plot(data_zoo)
data_zoo
zoo::rollapplyr(data_zoo, window, function(x) which.max(x)==window)
# Could also do any odd-number window
zoo::rollapply(data_zoo, 3, function(x) which.max(x)==3-1)
zoo::rollapply(data_zoo, window, function(x) which.max(x)==window)["median_cases_blend" == TRUE]
zoo::rollapply(data_zoo, window, function(x) which.max(x)==window)[TRUE,]
zoo::rollapply(data_zoo, window, function(x) which.max(x)==window)[2==TRUE,]
str(peak
)
peaks$median_cases_blend
zoo::rollapply(data_zoo, window, function(x) which.max(x)==window)$median_cases_blend == TRUE
zoo::rollapply(data_zoo, window, function(x) which.max(x)==window)[median_cases_blend == TRUE,]
zoo::rollapply(data_zoo, window, function(x) which.max(x)==window)["median_cases_blend" == TRUE,]
# Could also do any odd-number window
window <- 3
zoo::rollapply(data_zoo, window, function(x) which.max(x)==window-1)
window <- 5
zoo::rollapply(data_zoo, window, function(x) which.max(x)==window-1)
window <- 5
zoo::rollapply(data_zoo, window, function(x) which.max(x)==window-1)
# 2020-06-29, 2020-07-28, 2020-07-30
centre_index <- window/2
centre_index <- window/2
centre_index
2+1*7
2*2-1
2*7-1
2*4-1
7-2+1
7/2+1
7/2
7+1/2
# Find peaks
#
# For each date, returns TRUE if
# date == date at maximum found over 7 (-3,centre,+3) days
#
# Set a window to take the max from
window <- 7
# Set the centre position of that window
centre_index <- (window + 1) / 2
centre_index
# Roll over that window, identify max value, and return TRUE on that date
roll7 <- zoo::rollapplyr(data_zoo, window, function(x) which.max(x)==centre_index)
roll7
# Set the centre position of that window
centre_index <- (window - 1) / 2
centre_index
# Roll over that window, identify max value, and return TRUE on that date
roll7 <- zoo::rollapplyr(data_zoo, window, function(x) which.max(x)==centre_index)
roll7
# Roll over that window, identify max value, and return TRUE on that date
roll7 <- zoo::rollapplyr(data_zoo, window, function(x) which.max(x)==centre_index)
roll7
window <- 7
# Set the centre position of that window
centre_index <- (window - 1) / 2
# Roll over that window, identify max value, and return TRUE on that date
rollmax <- zoo::rollapplyr(data_zoo, window, function(x) which.max(x)==centre_index)
zoo::index(rollmax)[rollmax]
# Find peaks
#
# For each date, returns TRUE if
# date == date at maximum found over 7 (-3,centre,+3) days
#
# Set a window to take the max from
window <- 3
# Set the centre position of that window
centre_index <- (window - 1) / 2
# Roll over that window, identify max value, and return TRUE on that date
rollmax <- zoo::rollapplyr(data_zoo, window, function(x) which.max(x)==centre_index)
zoo::index(rollmax)[rollmax]
3-1
2/2
# Set the centre position of that window
centre_index <- (window + 1) / 2
centre_index
# Find peaks
#
# For each date, returns TRUE if
# date == date at maximum found over 7 (-3,centre,+3) days
#
# Set a window to take the max from
window <- 3
# Set the centre position of that window
centre_index <- (window + 1) / 2
# Roll over that window, identify max value, and return TRUE on that date
rollmax <- zoo::rollapplyr(data_zoo, window, function(x) which.max(x)==centre_index)
zoo::index(rollmax)[rollmax]
window <- 5
# Set the centre position of that window
centre_index <- (window + 1) / 2
# Roll over that window, identify max value, and return TRUE on that date
rollmax <- zoo::rollapplyr(data_zoo, window, function(x) which.max(x)==centre_index)
zoo::index(rollmax)[rollmax]
window <- 7
# Set the centre position of that window
centre_index <- (window + 1) / 2
# Roll over that window, identify max value, and return TRUE on that date
rollmax <- zoo::rollapplyr(data_zoo, window, function(x) which.max(x)==centre_index)
zoo::index(rollmax)[rollmax]
window <- 9
# Set the centre position of that window
centre_index <- (window + 1) / 2
# Roll over that window, identify max value, and return TRUE on that date
rollmax <- zoo::rollapplyr(data_zoo, window, function(x) which.max(x)==centre_index)
zoo::index(rollmax)[rollmax]
window <- 15
# Set the centre position of that window
centre_index <- (window + 1) / 2
# Roll over that window, identify max value, and return TRUE on that date
rollmax <- zoo::rollapplyr(data_zoo, window, function(x) which.max(x)==centre_index)
zoo::index(rollmax)[rollmax]
window <- 1
# Set the centre position of that window
centre_index <- (window + 1) / 2
# Roll over that window, identify max value, and return TRUE on that date
rollmax <- zoo::rollapplyr(data_zoo, window, function(x) which.max(x)==centre_index)
zoo::index(rollmax)[rollmax]
window <- 7
# Set the centre position of that window
centre_index <- (window + 1) / 2
# Roll over that window, identify max value, and return TRUE on that date
rollmax <- zoo::rollapplyr(data_zoo, window, function(x) which.max(x)==centre_index)
zoo::index(rollmax)[rollmax]
zoo::index(rollmax)[rollmax]-2
zoo::index(rollmax)[rollmax==T]
# Roll over that window, identify max value, and return TRUE on that date
rollmax <- zoo::rollapplyr(data_zoo, window, function(x) which.max(x)==centre_index)
zoo::index(rollmax)[rollmax==T]
window <- 3
# Set the centre position of that window
centre_index <- (window + 1) / 2
# Roll over that window, identify max value, and return TRUE on that date
rollmax <- zoo::rollapplyr(data_zoo, window, function(x) which.max(x)==centre_index)
zoo::index(rollmax)[rollmax==T]
window <- 5
# Set the centre position of that window
centre_index <- (window + 1) / 2
# Roll over that window, identify max value, and return TRUE on that date
rollmax <- zoo::rollapplyr(data_zoo, window, function(x) which.max(x)==centre_index)
zoo::index(rollmax)[rollmax==T]
# Find peaks
#
# For each date, returns TRUE if
# date == date at maximum found over 7 (-3,centre,+3) days
#
# Set a window to take the max from
window <- 7
# Set the centre position of that window
centre_index <- (window + 1) / 2
# Roll over that window, identify max value, and return TRUE on that date
rollmax <- zoo::rollapplyr(data_zoo, window, function(x) which.max(x)==centre_index)
zoo::index(rollmax)[rollmax==T]
(window + 1) / 2
# Find peaks
#
# For each date, returns TRUE if date == date at maximum found over window
#  - e.g. for a window = 7, at some date ("centre date")
#  - finds maximum estimate among a seven day period (-3 days, centre date, +3 days)
#  - TRUE if estimate of centre date is equal to maximum estimate
#
# Set an odd numbered window of days over which to take the max
window <- 7
# Set the centre position of that window
centre_index <- (window + 1) / 2
# Roll over that window, identify max value, and return TRUE on that date
rollmax <- zoo::rollapplyr(data_zoo, window, function(x) which.max(x)==centre_index)
# Get the dates at which the window maximums were found
peaks <- zoo::index(rollmax)[rollmax==T]
peaks
centre_index
# Find peaks
#
# For each date, returns TRUE if date == date at maximum found over window
#  - e.g. for a window = 7, at some date ("centre date")
#  - finds maximum estimate among a seven day period (-3 days, centre date, +3 days)
#  - TRUE if estimate of centre date is equal to maximum estimate
#
# Set an odd numbered window of days over which to take the max
window <- 7
# Set the centre position of that window
centre_index <- (window - 1) / 2
# Roll over that window, identify max value, and return TRUE on that date
rollmax <- zoo::rollapplyr(data_zoo, window, function(x) which.max(x)==centre_index)
# Get the dates at which the window maximums were found
peaks <- zoo::index(rollmax)[rollmax==T]
peaks
# Find peaks
#
# For each date, returns TRUE if date == date at maximum found over window
#  - e.g. for a window = 7, at some date ("centre date")
#  - finds maximum estimate among a seven day period (-3 days, centre date, +3 days)
#  - TRUE if estimate of centre date is equal to maximum estimate
#
# Set an odd numbered window of days over which to take the max
window <- 3
# Set the centre position of that window
centre_index <- (window - 1) / 2
centre_index
# Roll over that window, identify max value, and return TRUE on that date
rollmax <- zoo::rollapplyr(data_zoo, window, function(x) which.max(x)==centre_index)
# Get the dates at which the window maximums were found
peaks <- zoo::index(rollmax)[rollmax==T]
peaks
# Find peaks
#
# For each date, returns TRUE if date == date at maximum found over window
#  - e.g. for a window = 7, at some date ("centre date")
#  - finds maximum estimate among a seven day period (-3 days, centre date, +3 days)
#  - TRUE if estimate of centre date is equal to maximum estimate
#
# Set an odd numbered window of days over which to take the max
window <- 5
# Set the centre position of that window
centre_index <- (window - 1) / 2
# Roll over that window, identify max value, and return TRUE on that date
rollmax <- zoo::rollapplyr(data_zoo, window, function(x) which.max(x)==centre_index)
# Get the dates at which the window maximums were found
peaks <- zoo::index(rollmax)[rollmax==T]
peaks
centre_index
# Find peaks
#
# For each date, returns TRUE if date == date at maximum found over window
#  - e.g. for a window = 7, at some date ("centre date")
#  - finds maximum estimate among a seven day period (-3 days, centre date, +3 days)
#  - TRUE if estimate of centre date is equal to maximum estimate
#
# Set an odd numbered window of days over which to take the max
window <- 5
# Set the centre position of that window
centre_index <- (window + 1) / 2
# Roll over that window, identify max value, and return TRUE on that date
rollmax <- zoo::rollapplyr(data_zoo, window, function(x) which.max(x)==centre_index)
# Get the dates at which the window maximums were found
peaks <- zoo::index(rollmax)[rollmax==T]
peaks
# Find peaks
#
# For each date, returns TRUE if date == date at maximum found over window
#  - e.g. for a window = 7, at some date ("centre date")
#  - finds maximum estimate among a seven day period (-3 days, centre date, +3 days)
#  - TRUE if estimate of centre date is equal to maximum estimate
#
# Set an odd numbered window of days over which to take the max
window <- 3
# Set the centre position of that window
centre_index <- (window + 1) / 2
# Roll over that window, identify max value, and return TRUE on that date
rollmax <- zoo::rollapplyr(data_zoo, window, function(x) which.max(x)==centre_index)
# Get the dates at which the window maximums were found
peaks <- zoo::index(rollmax)[rollmax==T]
peaks
rm(list=ls())
rm(list=ls
)
rm(list = ls())
source('C:/Users/kaths/GitHub/rt-comparison-uk-public/data/get-uk-data.R', echo=TRUE)
View(data)
View(data)
saveRDS(data, "data/200914.rds")
