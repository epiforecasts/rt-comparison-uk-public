api_endpoint <- 'https://api.coronavirus.data.gov.uk/v1/data?filters=areaType=region&structure={"name":"areaName","date":"date","newDeaths28DaysByPublishDate":"newDeaths28DaysByPublishDate"}'
response <- httr::GET(api_endpoint)
json_text <- httr::content(response, "text")
dt <- jsonlite::fromJSON(json_text)
results <- rbind(dt$data)
uk_variables = list(
"date", "areaName", "newDeaths28DaysByPublishDate")
names(uk_variables) <- uk_variables
results <- list()
current_page <- 1
repeat {
response <- httr::VERB("GET",
url = api_endpoint,
query = list(
filters = list("areaType=region"),
structure = jsonlite::toJSON(uk_variables, auto_unbox = TRUE, pretty = FALSE),
page = current_page),
httr::timeout(60))
# Convert response from binary to JSON:
json_text <- httr::content(response, "text")
dt <- jsonlite::fromJSON(json_text)
results <- rbind(results, dt$data)
if (is.null( dt$pagination$`next`)) {
break
}
current_page <- current_page + 1
}
return(results)
}
api_endpoint <- 'https://api.coronavirus.data.gov.uk/v1/data?filters=areaType=region&structure={"name":"areaName","date":"date","newDeaths28DaysByPublishDate":"newDeaths28DaysByPublishDate"}'
response <- httr::GET(api_endpoint)
json_text <- httr::content(response, "text")
dt <- jsonlite::fromJSON(json_text)
results <- rbind(dt$data)
uk_variables = list(
"date", "areaName", "newDeaths28DaysByPublishDate")
names(uk_variables) <- uk_variables
results <- list()
current_page <- 1
repeat {
response <- httr::VERB("GET",
url = api_endpoint,
query = list(
filters = list("areaType=region"),
structure = jsonlite::toJSON(uk_variables, auto_unbox = TRUE, pretty = FALSE),
page = current_page),
httr::timeout(60))
# Convert response from binary to JSON:
json_text <- httr::content(response, "text")
dt <- jsonlite::fromJSON(json_text)
results <- rbind(results, dt$data)
if (is.null( dt$pagination$`next`)) {
break
}
current_page <- current_page + 1
}
return(results)
# Deaths
get_uk_data <- function() {
api_endpoint <- 'https://api.coronavirus.data.gov.uk/v1/data?filters=areaType=region&structure={"name":"areaName","date":"date","newDeaths28DaysByPublishDate":"newDeaths28DaysByPublishDate"}'
response <- httr::GET(api_endpoint)
json_text <- httr::content(response, "text")
dt <- jsonlite::fromJSON(json_text)
results <- rbind(dt$data)
uk_variables = list("date", "areaName", "newDeaths28DaysByPublishDate")
names(uk_variables) <- uk_variables
results <- list()
current_page <- 1
repeat {
response <- httr::VERB("GET",
url = api_endpoint,
query = list(
filters = list("areaType=region"),
structure = jsonlite::toJSON(uk_variables, auto_unbox = TRUE, pretty = FALSE),
page = current_page),
httr::timeout(60))
# Convert response from binary to JSON:
json_text <- httr::content(response, "text")
dt <- jsonlite::fromJSON(json_text)
results <- rbind(results, dt$data)
if (is.null( dt$pagination$`next`)) {
break
}
current_page <- current_page + 1
}
return(results)
}
# deaths: Deaths only download when queried separately from above (- check in covidregionaldata)
data_deaths <- get_uk_data()
nations <- c("England", "Scotland", "Wales", "Northern Ireland")
regions <- setdiff(unique(data$region), nations)
response <- httr::VERB("GET",
url = api_endpoint,
query = list(
filters = list("areaType=region", "areaName=London"),
structure = jsonlite::toJSON(uk_variables, auto_unbox = TRUE, pretty = FALSE),
page = current_page),
httr::timeout(60))
# Deaths
get_uk_data <- function() {
# api_endpoint <- 'https://api.coronavirus.data.gov.uk/v1/data?filters=areaType=region&structure={"name":"areaName","date":"date","newDeaths28DaysByPublishDate":"newDeaths28DaysByPublishDate"}'
# response <- httr::GET(api_endpoint)
# json_text <- httr::content(response, "text")
# dt <- jsonlite::fromJSON(json_text)
# results <- rbind(dt$data)
uk_variables = list("date", "areaName", "newDeaths28DaysByPublishDate")
names(uk_variables) <- uk_variables
results <- list()
current_page <- 1
repeat {
response <- httr::VERB("GET",
url = api_endpoint,
query = list(
filters = list("areaType=region", "areaName=London"),
structure = jsonlite::toJSON(uk_variables, auto_unbox = TRUE, pretty = FALSE),
page = current_page),
httr::timeout(60))
# Convert response from binary to JSON:
json_text <- httr::content(response, "text")
dt <- jsonlite::fromJSON(json_text)
results <- rbind(results, dt$data)
if (is.null( dt$pagination$`next`)) {
break
}
current_page <- current_page + 1
}
return(results)
}
# deaths: Deaths only download when queried separately from above (- check in covidregionaldata)
data_deaths <- get_uk_data()
api_endpoint <- 'https://api.coronavirus.data.gov.uk/v1/data?filters=areaType=region;areaName=London&structure={"name":"areaName","date":"date","newDeaths28DaysByPublishDate":"newDeaths28DaysByPublishDate"}'
response <- httr::GET(api_endpoint)
json_text <- httr::content(response, "text")
dt <- jsonlite::fromJSON(json_text)
results <- rbind(dt$data)
View(results)
api_endpoint <- 'https://api.coronavirus.data.gov.uk/v1/data?filters=areaType=region;areaName=London&structure={"name":"areaName","date":"date","cumDeaths28DaysByPublishDate":"cumDeaths28DaysByPublishDate"}'
response <- httr::GET(api_endpoint)
json_text <- httr::content(response, "text")
dt <- jsonlite::fromJSON(json_text)
results <- rbind(dt$data)
api_endpoint <- 'https://api.coronavirus.data.gov.uk/v1/data?filters=areaType=region;areaName=London&structure={"name":"areaName","date":"date","cumDeaths28DaysByPublishDate":"cumDeaths28DaysByPublishDate"}'
response <- httr::GET(api_endpoint)
json_text <- httr::content(response, "text")
dt <- jsonlite::fromJSON(json_text)
results <- rbind(dt$data)
api_endpoint <- 'https://api.coronavirus.data.gov.uk/v1/data?filters=areaType=region;areaName=London&structure={"name":"areaName","date":"date","newDeaths28DaysByPublishDate":"newDeaths28DaysByPublishDate"}'
response <- httr::GET(api_endpoint)
json_text <- httr::content(response, "text")
dt <- jsonlite::fromJSON(json_text)
results <- rbind(dt$data)
api_endpoint <- 'https://api.coronavirus.data.gov.uk/v1/data?filters=areaType=region;areaName=London&structure=%7B%22areaType%22:%22areaType%22,%22areaName%22:%22areaName%22,%22areaCode%22:%22areaCode%22,%22date%22:%22date%22,%22newDeaths28DaysByDeathDate%22:%22newDeaths28DaysByDeathDate%22,%22cumDeaths28DaysByDeathDate%22:%22cumDeaths28DaysByDeathDate%22%7D&format=csv"
response <- httr::GET(api_endpoint)
json_text <- httr::content(response, "text")
dt <- jsonlite::fromJSON(json_text)
results <- rbind(dt$data)
"https://api.coronavirus.data.gov.uk/v1/data?filters=areaType=region;areaName=London&structure=%7B%22areaType%22:%22areaType%22,%22areaName%22:%22areaName%22,%22areaCode%22:%22areaCode%22,%22date%22:%22date%22,%22newDeaths28DaysByDeathDate%22:%22newDeaths28DaysByDeathDate%22,%22cumDeaths28DaysByDeathDate%22:%22cumDeaths28DaysByDeathDate%22%7D&format=csv"
uk_variables = list("date", "areaName", "newDeaths28DaysByPublishDate")
names(uk_variables) <- uk_variables
results <- list()
current_page <- 1
repeat {
response <- httr::VERB("GET",
url = api_endpoint,
query = list(
filters = list("areaType=region", "areaName=London"),
structure = jsonlite::toJSON(uk_variables, auto_unbox = TRUE, pretty = FALSE),
page = current_page),
httr::timeout(60))
# Convert response from binary to JSON:
json_text <- httr::content(response, "text")
dt <- jsonlite::fromJSON(json_text)
results <- rbind(results, dt$data)
if (is.null( dt$pagination$`next`)) {
break
}
current_page <- current_page + 1
}
return(results)
}
# deaths: Deaths only download when queried separately from above (- check in covidregionaldata)
data_deaths <- get_uk_data()
data.table::setDT(data_deaths)
data.table::setnames(data_deaths, old = c("areaName", "newDeaths28DaysByDeathDate"), new = c("region", "deaths_region"))
data_deaths$date <- as.Date(data_deaths$date)
merge_deaths <- data_deaths[data, on = c("region", "date")]
remotes::install_github("publichealthengland/coronavirus-dashboard-api-R-sdk")
data <- ukcovid19::get_data(
filters = "areaType=region",
structure = list(date = "date", areaName = "areaName", newDeaths28DaysByDeathDate = "newDeaths28DaysByDeathDate"),
latest_by = "newCasesByPublishDate"
)
api_endpoint <- "https://api.coronavirus.data.gov.uk/v1/data?filters=areaType=region;areaName=London&structure=%7B%22areaType%22:%22areaType%22,%22areaName%22:%22areaName%22,%22areaCode%22:%22areaCode%22,%22date%22:%22date%22,%22newDeaths28DaysByDeathDate%22:%22newDeaths28DaysByDeathDate%22,%22cumDeaths28DaysByDeathDate%22:%22cumDeaths28DaysByDeathDate%22%7D&format=csv"
url <- https://api.coronavirus.data.gov.uk/v1/data?filters=areaType=region;areaName=London&structure=%7B%22areaType%22:%22areaType%22,%22areaName%22:%22areaName%22,%22areaCode%22:%22areaCode%22,%22date%22:%22date%22,%22newDeaths28DaysByDeathDate%22:%22newDeaths28DaysByDeathDate%22,%22cumDeaths28DaysByDeathDate%22:%22cumDeaths28DaysByDeathDate%22%7D&format=csv
url <- "https://api.coronavirus.data.gov.uk/v1/data?filters=areaType=region;areaName=London&structure=%7B%22areaType%22:%22areaType%22,%22areaName%22:%22areaName%22,%22areaCode%22:%22areaCode%22,%22date%22:%22date%22,%22newDeaths28DaysByDeathDate%22:%22newDeaths28DaysByDeathDate%22,%22cumDeaths28DaysByDeathDate%22:%22cumDeaths28DaysByDeathDate%22%7D&format=csv"
read.csv(url)
ldn <- read.csv(url)
View(ldn)
url_json <- "https://api.coronavirus.data.gov.uk/v1/data?filters=areaType=region;areaName=London&structure=%7B%22areaType%22:%22areaType%22,%22areaName%22:%22areaName%22,%22areaCode%22:%22areaCode%22,%22date%22:%22date%22,%22newDeaths28DaysByDeathDate%22:%22newDeaths28DaysByDeathDate%22,%22cumDeaths28DaysByDeathDate%22:%22cumDeaths28DaysByDeathDate%22%7D&format=json"
jsonlite::fromJSON(url_json)
ldn <- jsonlite::fromJSON(url_json)
View(ldn)
ldn <- jsonlite::fromJSON(url_json)$data
View(ldn)
data_pkg <- ukcovid19::get_data(
filters = "areaType=region",
structure = list("date" = "date", "areaName" = "areaName", "newDeaths28DaysByDeathDate" = "newDeaths28DaysByDeathDate")
)
View(data_pkg)
unique(data_pkg$areaName)
#'
#' @description Extracts daily COVID-19 data for the UK, stratified by region and nation.
#' Data source:
#'
#' @return A data frame of daily COVID cases for the UK by region, to be further processed by \code{get_regional_data()}.
#' @importFrom dplyr mutate rename bind_rows %>%
#' @importFrom stringr str_detect
#' @importFrom purrr map
#' @importFrom lubridate ymd
#'
get_uk_regional_cases_only_level_1 <- function() {
# Get UK data -------------------------------------------------------------
# Set up API query
query_filters <- list(nation = "areaType=nation",
region = "areaType=region")
# Get data for nations and regions
data_list <- purrr::map(query_filters, get_uk_data)
# Reshape for covidregionaldata -------------------------------------------
# Add or rename standardised variables
data <- dplyr::bind_rows(data_list$nation, data_list$region) %>%
dplyr::mutate(date = lubridate::ymd(date),
# Cases and deaths are by publish date for Scotland, Wales, NI;
#   but by specimen date and date of death for England
cases_new = ifelse(stringr::str_detect(areaCode, "^E"),
newCasesBySpecimenDate,
newCasesByPublishDate),
cases_total = ifelse(stringr::str_detect(areaCode, "^E"),
cumCasesBySpecimenDate,
cumCasesByPublishDate)) %>%
# Deaths (28 day), hospitalisations and tested variables are consistent across nations
dplyr::rename(deaths_new = newDeaths28DaysByPublishDate,
deaths_total = cumDeaths28DaysByPublishDate,
hosp_new = newAdmissions,
hosp_total = cumAdmissions,
tested_new = newTestsByPublishDate,
tested_total = cumTestsByPublishDate,
region_level_1 = areaName,
level_1_region_code = areaCode)
return(data)
}
covidregional <- get_uk_regional_cases_only_level_1()
#'
#' @description Extracts daily COVID-19 data for the UK, stratified by region and nation.
#' Data source:
#'
#' @return A data frame of daily COVID cases for the UK by region, to be further processed by \code{get_regional_data()}.
#' @importFrom dplyr mutate rename bind_rows %>%
#' @importFrom stringr str_detect
#' @importFrom purrr map
#' @importFrom lubridate ymd
#'
get_uk_regional_cases_only_level_1 <- function() {
# Get UK data -------------------------------------------------------------
# Set up API query
query_filters <- list(nation = "areaType=nation",
region = "areaType=region")
# Get data for nations and regions
data_list <- purrr::map(query_filters, get_uk_data)
# Reshape for covidregionaldata -------------------------------------------
# Add or rename standardised variables
data <- dplyr::bind_rows(data_list$nation, data_list$region) %>%
dplyr::mutate(date = lubridate::ymd(date),
# Cases and deaths are by publish date for Scotland, Wales, NI;
#   but by specimen date and date of death for England
cases_new = ifelse(stringr::str_detect(areaCode, "^E"),
newCasesBySpecimenDate,
newCasesByPublishDate),
cases_total = ifelse(stringr::str_detect(areaCode, "^E"),
cumCasesBySpecimenDate,
cumCasesByPublishDate)) %>%
# Deaths (28 day), hospitalisations and tested variables are consistent across nations
dplyr::rename(deaths_new = newDeaths28DaysByPublishDate,
deaths_total = cumDeaths28DaysByPublishDate,
hosp_new = newAdmissions,
hosp_total = cumAdmissions,
tested_new = newTestsByPublishDate,
tested_total = cumTestsByPublishDate,
region_level_1 = areaName,
level_1_region_code = areaCode)
return(data)
}
covidregional <- get_uk_regional_cases_only_level_1()
# Set up API query
query_filters <- list(nation = "areaType=nation",
region = "areaType=region")
# Get data for nations and regions
data_list <- purrr::map(query_filters, get_uk_data)
# Add or rename standardised variables
data <- dplyr::bind_rows(data_list$nation, data_list$region) %>%
dplyr::mutate(date = lubridate::ymd(date),
# Cases and deaths are by publish date for Scotland, Wales, NI;
#   but by specimen date and date of death for England
cases_new = ifelse(stringr::str_detect(areaCode, "^E"),
newCasesBySpecimenDate,
newCasesByPublishDate),
cases_total = ifelse(stringr::str_detect(areaCode, "^E"),
cumCasesBySpecimenDate,
cumCasesByPublishDate)) %>%
# Deaths (28 day), hospitalisations and tested variables are consistent across nations
dplyr::rename(deaths_new = newDeaths28DaysByPublishDate,
deaths_total = cumDeaths28DaysByPublishDate,
hosp_new = newAdmissions,
hosp_total = cumAdmissions,
tested_new = newTestsByPublishDate,
tested_total = cumTestsByPublishDate,
region_level_1 = areaName,
level_1_region_code = areaCode)
# Get data for nations and regions
data_list <- purrr::map(query_filters, get_uk_data)
# Set up API query
query_filters <- list(nation = "areaType=nation",
region = "areaType=region")
get_uk_data <- function(filters, progress_bar = FALSE) {
api_endpoint <- "https://api.coronavirus.data.gov.uk/v1/data"
uk_variables = list(
# --- Standard variables for covidregionaldata --- #
#
"date", "areaName", "areaCode",
# Cases by date of specimen
"newCasesBySpecimenDate", "cumCasesBySpecimenDate",
# Cases by date of report
"newCasesByPublishDate", "cumCasesByPublishDate",
# deaths
"newDeaths28DaysByPublishDate", "cumDeaths28DaysByPublishDate",
# Tests - all
"newTestsByPublishDate", "cumTestsByPublishDate",
# Hospital - admissions
"newAdmissions", "cumAdmissions",
#
# --- Additional non-standard variables --- #
# Hospital
"cumAdmissionsByAge", "covidOccupiedMVBeds",
"hospitalCases", "plannedCapacityByPublishDate",
# Tests by pillar
"newPillarOneTestsByPublishDate", "newPillarTwoTestsByPublishDate",
"newPillarThreeTestsByPublishDate", "newPillarFourTestsByPublishDate"
)
names(uk_variables) <- uk_variables
results <- list()
current_page <- 1
if (progress_bar) {
pb <- txtProgressBar(min = 0, max = 45, style = 3)
}
repeat {
response <- httr::VERB("GET",
url = api_endpoint,
query = list(
filters = filters,
structure = jsonlite::toJSON(uk_variables, auto_unbox = TRUE, pretty = FALSE),
page = current_page),
httr::timeout(20))
if (response$status_code >= 400) {
err_msg = httr::http_status(response)
stop(err_msg)
} else if (response$status_code == 204) {
break
}
# Convert response from binary to JSON:
json_text <- httr::content(response, "text")
dt <- jsonlite::fromJSON(json_text)
results <- rbind(results, dt$data)
if (is.null( dt$pagination$`next`)) {
break
}
current_page <- current_page + 1
if (progress_bar) {
setTxtProgressBar(pb, current_page)
}
}
return(results)
}
#'
#' @description Extracts daily COVID-19 data for the UK, stratified by region and nation.
#' Data source:
#'
#' @return A data frame of daily COVID cases for the UK by region, to be further processed by \code{get_regional_data()}.
#' @importFrom dplyr mutate rename bind_rows %>%
#' @importFrom stringr str_detect
#' @importFrom purrr map
#' @importFrom lubridate ymd
#'
get_uk_regional_cases_only_level_1 <- function() {
# Get UK data -------------------------------------------------------------
# Set up API query
query_filters <- list(nation = "areaType=nation",
region = "areaType=region")
# Get data for nations and regions
data_list <- purrr::map(query_filters, get_uk_data)
# Reshape for covidregionaldata -------------------------------------------
# Add or rename standardised variables
data <- dplyr::bind_rows(data_list$nation, data_list$region) %>%
dplyr::mutate(date = lubridate::ymd(date),
# Cases and deaths are by publish date for Scotland, Wales, NI;
#   but by specimen date and date of death for England
cases_new = ifelse(stringr::str_detect(areaCode, "^E"),
newCasesBySpecimenDate,
newCasesByPublishDate),
cases_total = ifelse(stringr::str_detect(areaCode, "^E"),
cumCasesBySpecimenDate,
cumCasesByPublishDate)) %>%
# Deaths (28 day), hospitalisations and tested variables are consistent across nations
dplyr::rename(deaths_new = newDeaths28DaysByPublishDate,
deaths_total = cumDeaths28DaysByPublishDate,
hosp_new = newAdmissions,
hosp_total = cumAdmissions,
tested_new = newTestsByPublishDate,
tested_total = cumTestsByPublishDate,
region_level_1 = areaName,
level_1_region_code = areaCode)
return(data)
}
covreg <- get_uk_regional_cases_only_level_1()
View(covreg)
# Set up API query
query_filters <- list(nation = "areaType=nation",
region = "areaType=region")
# Get data for nations and regions
data_list <- purrr::map(query_filters, get_uk_data)
View(data_list)
View(covreg)
colnames(covreg)
# Deaths
# remotes::install_github("publichealthengland/coronavirus-dashboard-api-R-sdk")
data_pkg <- ukcovid19::get_data(
filters = "areaType=region",
structure = list("date" = "date", "areaName" = "areaName",
"newDeaths28DaysByDeathDate" = "newDeaths28DaysByDeathDate",
"newCasesBySpecimenDate", "newCasesByPublishDate",
"newAdmissions"))
data.table::setDT(data_deaths)
data.table::setnames(data_deaths, old = c("areaName", "newDeaths28DaysByDeathDate"), new = c("region", "deaths_region"))
View(data_pkg)
structure <- list("date", "areaName",
"newDeaths28DaysByDeathDate" = "newDeaths28DaysByDeathDate",
"newCasesBySpecimenDate", "newCasesByPublishDate",
"newAdmissions")
names(structure) <- structure
data_pkg <- ukcovid19::get_data(
filters = "areaType=region",
structure = structure)
View(data_pkg)
structure <- list("date", "areaName",
"newDeaths28DaysByDeathDate", "newCasesBySpecimenDate",
"newCasesByPublishDate", "newAdmissions")
names(structure) <- structure
rm(list=ls())
structure <- list("date", "areaName",
"newDeaths28DaysByDeathDate", "newCasesBySpecimenDate",
"newCasesByPublishDate", "newAdmissions")
names(structure) <- structure
data_region <- ukcovid19::get_data(
filters = "areaType=region",
structure = structure)
data.table::setDT(data_deaths)
data <- purrr::map(areaType, ~ ukcovid19::get_data(filters = .x, structure = structure))
areaType <- list("region" = "areaType=region",
"nation" = "areaType=nation")
data <- purrr::map(areaType, ~ ukcovid19::get_data(filters = .x, structure = structure))
data <- purrr::map_dfr(areaType, ~ ukcovid19::get_data(filters = .x, structure = structure))
View(data)
data.table::setDT(data)
keep_cols <- unlist(structure)
old <- unlist(structure)
new <- c("date", "region", "deaths", "cases_test", "cases_publish", "cases_hosp")
data <- data.table::setnames(data, old, new)
View(data)
# Check date sequence is complete
if(length(seq.Date(from = min(data$date), to = max(data$date), by = 1))
!= (length(data$date) / length(unique(data$region)))){
warning("Missing days in date sequence")
}
data$date <- as.Date(data$date)
# Check date sequence is complete
if(length(seq.Date(from = min(data$date), to = max(data$date), by = 1))
!= (length(data$date) / length(unique(data$region)))){
warning("Missing days in date sequence")
}
rm(old, new, structure, areaType)
rm(data_region, keep_cols)
nations <- c("England", "Scotland", "Wales", "Northern Ireland")
regions <- setdiff(unique(data$region), nations)
data$cases_publish <- ifelse(data$region %in% regions, NA, data$cases_publish)
nations <- c("England", "Scotland", "Wales", "Northern Ireland")
regions <- setdiff(unique(data$region), nations)
data$region_type <- ifelse(data$region %in% nations, "nation", "region")
# cases_publish - regions show 0s where there should be NAs for cases by publish date
data$cases_publish <- ifelse(data$region %in% regions, NA, data$cases_publish)
nations <- c("England", "Scotland", "Wales", "Northern Ireland")
regions <- setdiff(unique(data$region), nations)
data$region_type <- ifelse(data$region %in% nations, "nation", "region")
# cases_publish - regions show 0s where there should be NAs for cases by publish date
data$cases_publish <- ifelse(data$region %in% regions, NA, data$cases_publish)
# Check date sequence is complete
if(length(seq.Date(from = min(data$date), to = max(data$date), by = 1))
!= (length(data$date) / length(unique(data$region)))){
warning("Missing days in date sequence")
}
rm(old, new, structure, areaType)
View(data)
summary_wide <- readRDS("rt-estimate/summary_wide.rds")
View(summary_wide)
data <- data[, .SD[date >= (max(date) - lubridate::weeks(12))], by = region]
