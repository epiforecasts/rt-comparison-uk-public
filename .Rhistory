dplyr::group_by(region, source) %>%
dplyr::mutate(date_n = seq_along(date),
peak_valley_type = ifelse(!is.na(peak), peak,
valley),
peak_valley_date = ifelse(!is.na(peak_valley_type), date_n, NA),
peak_start = ifelse(!is.na(peak), date_n, NA)) %>%
tidyr::fill(peak_start, .direction = "down") %>%
dplyr::mutate(peak_start = ifelse(is.na(peak_start), 1, peak_start)) %>%
dplyr::group_by(region, source, peak_start) %>%
dplyr::mutate(n = dplyr::n(),
midpt = ifelse(date_n == peak_start + round(n / 2), date_n, NA),
peak_to_midpt = peak_start - midpt)
# Join peaks and valleys to full summary data
peaks_valleys <- summary %>%
dplyr::left_join(dplyr::select(peak_bind, region, date, source, peak = point),
by = c("region", "date", "source")) %>%
dplyr::left_join(dplyr::select(valley_bind, region, date, source, valley = point),
by = c("region", "date", "source")) %>%
dplyr::group_by(region, source) %>%
dplyr::mutate(date_n = seq_along(date),
peak_valley_type = ifelse(!is.na(peak), peak,
valley),
peak_valley_date = ifelse(!is.na(peak_valley_type), date_n, NA),
peak_start = ifelse(!is.na(peak), date_n, NA)) %>%
tidyr::fill(peak_start, .direction = "down") %>%
dplyr::mutate(peak_start = ifelse(is.na(peak_start), 1, peak_start)) %>%
dplyr::group_by(region, source, peak_start) %>%
dplyr::mutate(n = dplyr::n(),
midpt = ifelse(date_n == peak_start + round(n / 2), date_n, NA),
peak_to_midpt = midpt - peak_start)
75-30
waves <- peaks_valleys %>%
dplyr::group_by(region, source, peak_start) %>%
dplyr::summarise(
n_days = dplyr::n(),
mean_median = mean(median, na.rm=T),
mean_lo95 = mean_median - 1.96 * (sd(median, na.rm=T) / n_days),
mean_hi95 = mean_median + 1.96 * (sd(median, na.rm=T) / n_days))
View(waves)
# Join peaks and valleys to full summary data
peaks_valleys <- summary %>%
dplyr::left_join(dplyr::select(peak_bind, region, date, source, peak = point),
by = c("region", "date", "source")) %>%
dplyr::left_join(dplyr::select(valley_bind, region, date, source, valley = point),
by = c("region", "date", "source")) %>%
dplyr::group_by(region, source) %>%
dplyr::mutate(date_n = seq_along(date),
peak_valley_type = ifelse(!is.na(peak), peak,
valley),
peak_valley_date = ifelse(!is.na(peak_valley_type), date_n, NA),
peak_start = ifelse(!is.na(peak), date_n, NA)) %>%
tidyr::fill(peak_start, .direction = "down") %>%
dplyr::mutate(peak_start = ifelse(is.na(peak_start), 1, peak_start)) %>%
dplyr::group_by(region, source, peak_start) %>%
dplyr::mutate(n = dplyr::n(),
midpt = ifelse(date_n == peak_start + round(n / 2), date_n, NA),
peak_to_midpt = midpt - peak_start) %>%
tidyr::fill(midpt, .direction = "down") %>%
dplyr::mutate(midpt = ifelse(is.na(midpt), 0, midpt)) %>%
waves <- peaks_valleys %>%
dplyr::group_by(region, source, midpt) %>%
dplyr::summarise(
n_days = dplyr::n(),
mean_median = mean(median, na.rm=T),
mean_lo95 = mean_median - 1.96 * (sd(median, na.rm=T) / n_days),
mean_hi95 = mean_median + 1.96 * (sd(median, na.rm=T) / n_days))
# Join peaks and valleys to full summary data
peaks_valleys <- summary %>%
dplyr::left_join(dplyr::select(peak_bind, region, date, source, peak = point),
by = c("region", "date", "source")) %>%
dplyr::left_join(dplyr::select(valley_bind, region, date, source, valley = point),
by = c("region", "date", "source")) %>%
dplyr::group_by(region, source) %>%
dplyr::mutate(date_n = seq_along(date),
peak_valley_type = ifelse(!is.na(peak), peak,
valley),
peak_valley_date = ifelse(!is.na(peak_valley_type), date_n, NA),
peak_start = ifelse(!is.na(peak), date_n, NA)) %>%
tidyr::fill(peak_start, .direction = "down") %>%
dplyr::mutate(peak_start = ifelse(is.na(peak_start), 1, peak_start)) %>%
dplyr::group_by(region, source, peak_start) %>%
dplyr::mutate(n = dplyr::n(),
midpt = ifelse(date_n == peak_start + round(n / 2), date_n, NA),
peak_to_midpt = midpt - peak_start) %>%
tidyr::fill(midpt, .direction = "down") %>%
dplyr::mutate(midpt = ifelse(is.na(midpt), 0, midpt))
waves <- peaks_valleys %>%
dplyr::group_by(region, source, midpt) %>%
dplyr::summarise(
n_days = dplyr::n(),
mean_median = mean(median, na.rm=T),
mean_lo95 = mean_median - 1.96 * (sd(median, na.rm=T) / n_days),
mean_hi95 = mean_median + 1.96 * (sd(median, na.rm=T) / n_days))
waves <- peaks_valleys %>%
dplyr::group_by(region, source, midpt) %>%
dplyr::summarise(
n_days = dplyr::n(),
peak_start = mean(peak_start),
mean_median = mean(median, na.rm=T),
mean_lo95 = mean_median - 1.96 * (sd(median, na.rm=T) / n_days),
mean_hi95 = mean_median + 1.96 * (sd(median, na.rm=T) / n_days))
# Join peaks and valleys to full summary data
peaks_valleys <- summary %>%
dplyr::left_join(dplyr::select(peak_bind, region, date, source, peak = point),
by = c("region", "date", "source")) %>%
dplyr::left_join(dplyr::select(valley_bind, region, date, source, valley = point),
by = c("region", "date", "source")) %>%
dplyr::group_by(region, source) %>%
dplyr::mutate(date_n = seq_along(date),
peak_valley_type = ifelse(!is.na(peak), peak,
valley),
peak_valley_date = ifelse(!is.na(peak_valley_type), date_n, NA),
peak_start = ifelse(!is.na(peak), date_n, NA)) %>%
tidyr::fill(peak_start, .direction = "down") %>%
dplyr::mutate(peak_start = ifelse(is.na(peak_start), 1, peak_start)) %>%
dplyr::group_by(region, source, peak_start) %>%
dplyr::mutate(n = dplyr::n(),
midpt = ifelse(date_n == peak_start + round(n / 2), date_n, NA),
peak_to_midpt = midpt - peak_start) %>%
tidyr::fill(midpt, .direction = "down")
# Join peaks and valleys to full summary data
peaks_valleys <- summary %>%
dplyr::left_join(dplyr::select(peak_bind, region, date, source, peak = point),
by = c("region", "date", "source")) %>%
dplyr::left_join(dplyr::select(valley_bind, region, date, source, valley = point),
by = c("region", "date", "source")) %>%
dplyr::group_by(region, source) %>%
dplyr::mutate(date_n = seq_along(date),
peak_valley_type = ifelse(!is.na(peak), peak,
valley),
peak_valley_date = ifelse(!is.na(peak_valley_type), date_n, NA),
peak_start = ifelse(!is.na(peak), date_n, NA)) %>%
tidyr::fill(peak_start, .direction = "down") %>%
dplyr::mutate(peak_start = ifelse(is.na(peak_start), 1, peak_start)) %>%
dplyr::group_by(region, source, peak_start) %>%
dplyr::mutate(n = dplyr::n(),
midpt = ifelse(date_n == peak_start + round(n / 2), date_n, NA),
peak_to_midpt = midpt - peak_start) %>%
dplyr::ungroup() %>%
dplyr::group_by(region, source) %>%
tidyr::fill(midpt, .direction = "down")
# Join peaks and valleys to full summary data
peaks_valleys <- summary %>%
dplyr::left_join(dplyr::select(peak_bind, region, date, source, peak = point),
by = c("region", "date", "source")) %>%
dplyr::left_join(dplyr::select(valley_bind, region, date, source, valley = point),
by = c("region", "date", "source")) %>%
dplyr::group_by(region, source) %>%
dplyr::mutate(date_n = seq_along(date),
peak_valley_type = ifelse(!is.na(peak), peak,
valley),
peak_valley_date = ifelse(!is.na(peak_valley_type), date_n, NA),
peak_start = ifelse(!is.na(peak), date_n, NA)) %>%
tidyr::fill(peak_start, .direction = "down") %>%
dplyr::mutate(peak_start = ifelse(is.na(peak_start), 1, peak_start)) %>%
dplyr::group_by(region, source, peak_start) %>%
dplyr::mutate(n = dplyr::n(),
midpt = ifelse(date_n == peak_start + round(n / 2), date_n, NA),
peak_to_midpt = midpt - peak_start) %>%
dplyr::ungroup() %>%
dplyr::group_by(region, source) %>%
tidyr::fill(midpt, .direction = "down") %>%
dplyr::mutate(midpt = ifelse(is.na(midpt), 1, midpt))
waves <- peaks_valleys %>%
dplyr::group_by(region, source, midpt) %>%
dplyr::summarise(
n_days = dplyr::n(),
peak_start = mean(peak_start),
mean_median = mean(median, na.rm=T),
mean_lo95 = mean_median - 1.96 * (sd(median, na.rm=T) / n_days),
mean_hi95 = mean_median + 1.96 * (sd(median, na.rm=T) / n_days))
waves <- peaks_valleys %>%
dplyr::group_by(region, source, midpt) %>%
dplyr::summarise(
n_days = dplyr::n(),
mean_median = mean(median, na.rm=T),
mean_lo95 = mean_median - 1.96 * (sd(median, na.rm=T) / n_days),
mean_hi95 = mean_median + 1.96 * (sd(median, na.rm=T) / n_days))
# wave split
wave_split <- split(waves, waves$region) %>%
purrr::map(., ~ split(., .$source))
View(wave_split)
wave_split[["England"]]
wave_split[["England"]]
t.test(wave_split$England$cases_test$mean_median)
# 14 , 108 - 4th april to 4th july
# Epinow2, PR #74
remotes::install_github("epiforecasts/EpiNow2#74")
# Epinow2, PR #74
remotes::install_github("epiforecasts/EpiNow2")
# Epinow2, PR #74
remotes::install_github("epiforecasts/EpiNow2")
# Epinow2, PR #74
remotes::install_github("epiforecasts/EpiNow2")
detach(data.table)
detach("data.table")
rm(list=ls())
source("data/get-uk-data.R")
library(magrittr)
library(data.table)
library(ukcovid19) # remotes::install_github("publichealthengland/coronavirus-dashboard-api-R-sdk")
# Get data ----------------------------------------------------------------
# Set up query
structure <- list("date", "areaName",
"newDeaths28DaysByDeathDate",
"newCasesBySpecimenDate",
"newAdmissions")
names(structure) <- structure
areaType <- list("nhsregion" = "areaType=nhsregion",
"region" = "areaType=region",
"nation" = "areaType=nation")
# Get data
raw <- purrr::map(areaType, ~ ukcovid19::get_data(filters = .x, structure = structure))
# NHS admissions data: from 1 Aug -----------------------------------------
nhs_url <- paste0("https://www.england.nhs.uk/statistics/wp-content/uploads/sites/2/2020/09/COVID-19-daily-admissions-",
gsub("-", "", as.character(Sys.Date()-1)),
".xlsx")
download.file(nhs_url, destfile = paste0("data/", Sys.Date(), "-nhs-admissions.xlsx"), mode = "wb")
lubridate::year(Sys.Date())
lubridate::month(Sys.Date())
lubridate::month("2020-09-10")
length(lubridate::month(Sys.Date()))
as.character(lubridate::month("2020-09-10"))
ifelse(lubridate::month(Sys.Date())<10,
paste0(0,lubridate::month(Sys.Date())),
lubridate::month(Sys.Date()))
# NHS admissions data: from 1 Aug -----------------------------------------
nhs_url <- paste0("https://www.england.nhs.uk/statistics/wp-content/uploads/sites/2/",
lubridate::year(Sys.Date()), "/",
ifelse(lubridate::month(Sys.Date())<10,
paste0(0,lubridate::month(Sys.Date())),
lubridate::month(Sys.Date())),
"/COVID-19-daily-admissions-",
gsub("-", "", as.character(Sys.Date()-1)),
".xlsx")
download.file(nhs_url, destfile = paste0("data/", Sys.Date(), "-nhs-admissions.xlsx"), mode = "wb")
rm(nhs_url)
adm_new <- readxl::read_excel(paste0("data/", Sys.Date(), "-nhs-admissions.xlsx"),
sheet = 1,
range = readxl::cell_limits(c(13, 2), c(21, NA))) %>%
t() %>%
tibble::as_tibble() %>%
janitor::row_to_names(1) %>%
dplyr::mutate(date = seq.Date(from = as.Date("2020-08-01"), by = 1, length.out = nrow(.))) %>%
tidyr::pivot_longer(-date, names_to = "region", values_to = "cases_hosp_new") %>%
dplyr::mutate(region = ifelse(region == "ENGLAND", "England", region),
cases_hosp_new = as.numeric(cases_hosp_new))
adm_new <- readxl::read_excel(paste0("data/", Sys.Date(), "-nhs-admissions.xlsx"),
sheet = 1,
range = readxl::cell_limits(c(13, 2), c(21, NA))) %>%
t() %>%
tibble::as_tibble(.name_repair = "unique") %>%
janitor::row_to_names(1) %>%
dplyr::mutate(date = seq.Date(from = as.Date("2020-08-01"), by = 1, length.out = nrow(.))) %>%
tidyr::pivot_longer(-date, names_to = "region", values_to = "cases_hosp_new") %>%
dplyr::mutate(region = ifelse(region == "ENGLAND", "England", region),
cases_hosp_new = as.numeric(cases_hosp_new))
adm_new <- readxl::read_excel(paste0("data/", Sys.Date(), "-nhs-admissions.xlsx"),
sheet = 1,
range = readxl::cell_limits(c(13, 2), c(21, NA))) %>%
t() %>%
tibble::as_tibble(.name_repair = "universal") %>%
janitor::row_to_names(1) %>%
dplyr::mutate(date = seq.Date(from = as.Date("2020-08-01"), by = 1, length.out = nrow(.))) %>%
tidyr::pivot_longer(-date, names_to = "region", values_to = "cases_hosp_new") %>%
dplyr::mutate(region = ifelse(region == "ENGLAND", "England", region),
cases_hosp_new = as.numeric(cases_hosp_new))
adm_new <- readxl::read_excel(paste0("data/", Sys.Date(), "-nhs-admissions.xlsx"),
sheet = 1,
range = readxl::cell_limits(c(13, 2), c(21, NA))) %>%
t() %>%
suppressMessages(tibble::as_tibble(.name_repair = "universal")) %>%
janitor::row_to_names(1) %>%
dplyr::mutate(date = seq.Date(from = as.Date("2020-08-01"), by = 1, length.out = nrow(.))) %>%
tidyr::pivot_longer(-date, names_to = "region", values_to = "cases_hosp_new") %>%
dplyr::mutate(region = ifelse(region == "ENGLAND", "England", region),
cases_hosp_new = as.numeric(cases_hosp_new))
adm_new <- readxl::read_excel(paste0("data/", Sys.Date(), "-nhs-admissions.xlsx"),
sheet = 1,
range = readxl::cell_limits(c(13, 2), c(21, NA))) %>%
t() %>%
suppressMessages(expr = tibble::as_tibble(.name_repair = "universal")) %>%
janitor::row_to_names(1) %>%
dplyr::mutate(date = seq.Date(from = as.Date("2020-08-01"), by = 1, length.out = nrow(.))) %>%
tidyr::pivot_longer(-date, names_to = "region", values_to = "cases_hosp_new") %>%
dplyr::mutate(region = ifelse(region == "ENGLAND", "England", region),
cases_hosp_new = as.numeric(cases_hosp_new))
adm_new <- suppressMessages(readxl::read_excel(paste0("data/", Sys.Date(), "-nhs-admissions.xlsx"),
sheet = 1,
range = readxl::cell_limits(c(13, 2), c(21, NA))) %>%
t() %>%
expr = tibble::as_tibble(.name_repair = "universal") %>%
janitor::row_to_names(1) %>%
dplyr::mutate(date = seq.Date(from = as.Date("2020-08-01"), by = 1, length.out = nrow(.))) %>%
tidyr::pivot_longer(-date, names_to = "region", values_to = "cases_hosp_new") %>%
dplyr::mutate(region = ifelse(region == "ENGLAND", "England", region),
cases_hosp_new = as.numeric(cases_hosp_new)))
adm_new <- suppressMessages(readxl::read_excel(paste0("data/", Sys.Date(), "-nhs-admissions.xlsx"),
sheet = 1,
range = readxl::cell_limits(c(13, 2), c(21, NA))) %>%
t() %>%
expr = tibble::as_tibble(.name_repair = "universal") %>%
janitor::row_to_names(1) %>%
dplyr::mutate(date = seq.Date(from = as.Date("2020-08-01"), by = 1, length.out = nrow(.))) %>%
tidyr::pivot_longer(-date, names_to = "region", values_to = "cases_hosp_new") %>%
dplyr::mutate(region = ifelse(region == "ENGLAND", "England", region),
cases_hosp_new = as.numeric(cases_hosp_new)))
adm_new <- suppressMessages(readxl::read_excel(paste0("data/", Sys.Date(), "-nhs-admissions.xlsx"),
sheet = 1,
range = readxl::cell_limits(c(13, 2), c(21, NA))) %>%
t() %>%
expr = tibble::as_tibble(.name_repair = "universal") %>%
janitor::row_to_names(1) %>%
dplyr::mutate(date = seq.Date(from = as.Date("2020-08-01"), by = 1, length.out = nrow(.))) %>%
tidyr::pivot_longer(-date, names_to = "region", values_to = "cases_hosp_new") %>%
dplyr::mutate(region = ifelse(region == "ENGLAND", "England", region),
cases_hosp_new = as.numeric(cases_hosp_new)))
adm_new <- readxl::read_excel(paste0("data/", Sys.Date(), "-nhs-admissions.xlsx"),
sheet = 1,
range = readxl::cell_limits(c(13, 2), c(21, NA))) %>%
t() %>%
expr = tibble::as_tibble(.name_repair = "universal") %>%
janitor::row_to_names(1) %>%
dplyr::mutate(date = seq.Date(from = as.Date("2020-08-01"), by = 1, length.out = nrow(.))) %>%
tidyr::pivot_longer(-date, names_to = "region", values_to = "cases_hosp_new") %>%
dplyr::mutate(region = ifelse(region == "ENGLAND", "England", region),
cases_hosp_new = as.numeric(cases_hosp_new))
adm_new <- suppressMessages(readxl::read_excel(paste0("data/", Sys.Date(), "-nhs-admissions.xlsx"),
sheet = 1,
range = readxl::cell_limits(c(13, 2), c(21, NA))) %>%
t() %>%
tibble::as_tibble(.name_repair = "universal") %>%
janitor::row_to_names(1) %>%
dplyr::mutate(date = seq.Date(from = as.Date("2020-08-01"), by = 1, length.out = nrow(.))) %>%
tidyr::pivot_longer(-date, names_to = "region", values_to = "cases_hosp_new") %>%
dplyr::mutate(region = ifelse(region == "ENGLAND", "England", region),
cases_hosp_new = as.numeric(cases_hosp_new)))
View(adm_new)
data <- dplyr::left_join(data, adm_new, by = c("date", "region")) %>%
dplyr::mutate(region = factor(region, levels = region_names$region_factor))
data
dir
save_loc <- "rt-estimate/estimate-all-time/"
targets <- paste0(save_loc, count_variable[i], "/region")
count_variable[1] = "cases_blend"
count_variable[1] <- c("cases_blend")
count_variable <- c("cases_blend")
targets <- paste0(save_loc, count_variable[i], "/region")
i <- 1
targets <- paste0(save_loc, count_variable[i], "/region")
dir.exists(targets)
targets
tweak(multiprocess, workers = min(future::availableCores(), jobs))
library(future)
tweak(multiprocess, workers = min(future::availableCores(), jobs))
round(future::availableCores() / jobs, 0)
jobs <- 8
round(future::availableCores() / jobs, 0)
future::availableCores()
future::availableCores() / jobs
8.1
8/1
future::availableCores() / jobs
tweak(multiprocess, workers = max(1, round(future::availableCores() / jobs, 0)))))
tweak(multiprocess, workers = max(1, round(future::availableCores() / jobs, 0)))
list(tweak(multiprocess, workers = min(future::availableCores(), jobs)))
6*7
Sys.Date()-42
Sys.Date()-(42+6)
source("data/get-uk-data.R")
# Join NHS and dashboard data ---------------------------------------------
source("utils/utils.R")
source('C:/Users/kaths/GitHub/rt-comparison-uk-public/data/get-uk-data.R', echo=TRUE)
View(data)
dplyr::select(data, -region, date, cases_hosp)
colnames(dplyr::select(data, -region, date, cases_hosp))
# Cases positive test
summary_cases <- EpiNow2::get_regional_results(results_dir = "rt-estimate/estimate-all-time/cases_test/region",
date = "latest")$estimates$summarised
# Admissions
summary_hosp <- EpiNow2::get_regional_results(results_dir = "rt-estimate/estimate-all-time/cases_hosp/region",
date = "latest")$estimates$summarised
# Deaths
summary_deaths <- EpiNow2::get_regional_results(results_dir = "rt-estimate/estimate-all-time/deaths_death/region",
date = "2020-09-17")$estimates$summarised
# Format
summary <- dplyr::bind_rows(summary_cases, summary_hosp, summary_deaths, .id = "source") %>%
dplyr::mutate(source = stringr::str_replace_all(.id, 1, "cases_test")) %>%
dplyr::filter(variable == "R" & type == "estimate") %>%
dplyr::select(-strat, -variable, -mean, -sd,
source,
lower_90 = bottom, upper_90 = top,
lower_50 = lower, upper_50 = upper,
lower_20 = central_lower, upper_20 = central_upper)
summary <- dplyr::bind_rows(summary_cases, summary_hosp, summary_deaths, .id = "source")
View(summary)
summary <- dplyr::bind_rows(summary_cases, summary_hosp, summary_deaths, .id = "source") %>%
dplyr::mutate(source = stringr::str_replace_all(source, 1, "cases_test"))
summary <- dplyr::bind_rows(summary_cases, summary_hosp, summary_deaths, .id = "source") %>%
dplyr::mutate(source = ifelse(source == 1, "cases_test",
ifelse(source == 2, "cases_hosp",
"deaths_death")))
View(summary)
# Format
summary <- dplyr::bind_rows(summary_cases, summary_hosp, summary_deaths, .id = "source") %>%
dplyr::mutate(source = ifelse(source == 1, "cases_test",
ifelse(source == 2, "cases_hosp",
"deaths_death"))) %>%
dplyr::filter(variable == "R" & type == "estimate") %>%
dplyr::select(-strat, -variable, -mean, -sd,
source,
lower_90 = bottom, upper_90 = top,
lower_50 = lower, upper_50 = upper,
lower_20 = central_lower, upper_20 = central_upper)
View(summary)
View(summary)
View(summary_cases)
# Format
summary <- dplyr::bind_rows(summary_cases, summary_hosp_new, summary_deaths, .id = "source") %>%
dplyr::mutate(source = ifelse(source == 1, "Test-positive cases",
ifelse(source == 2, "Hospital admissions",
"Deaths"))) %>%
dplyr::filter(variable == "R" & type == "estimate" | "estimate based on partial data") %>%
dplyr::select(-strat, -variable, -mean, -sd,
lower_90 = bottom, upper_90 = top,
lower_50 = lower, upper_50 = upper,
lower_20 = central_lower, upper_20 = central_upper)
# Format
summary <- dplyr::bind_rows(summary_cases, summary_hosp, summary_deaths, .id = "source") %>%
dplyr::mutate(source = ifelse(source == 1, "Test-positive cases",
ifelse(source == 2, "Hospital admissions",
"Deaths"))) %>%
dplyr::filter(variable == "R" & (type == "estimate" | "estimate based on partial data")) %>%
dplyr::select(-strat, -variable, -mean, -sd,
lower_90 = bottom, upper_90 = top,
lower_50 = lower, upper_50 = upper,
lower_20 = central_lower, upper_20 = central_upper)
# Format
summary <- dplyr::bind_rows(summary_cases, summary_hosp, summary_deaths, .id = "source") %>%
dplyr::mutate(source = ifelse(source == 1, "Test-positive cases",
ifelse(source == 2, "Hospital admissions",
"Deaths"))) %>%
dplyr::filter(variable == "R" & type == "estimate" | "estimate based on partial data") %>%
dplyr::select(-strat, -variable, -mean, -sd,
lower_90 = bottom, upper_90 = top,
lower_50 = lower, upper_50 = upper,
lower_20 = central_lower, upper_20 = central_upper)
# Format
summary <- dplyr::bind_rows(summary_cases, summary_hosp, summary_deaths, .id = "source") %>%
dplyr::mutate(source = ifelse(source == 1, "Test-positive cases",
ifelse(source == 2, "Hospital admissions",
"Deaths"))) %>%
dplyr::filter(variable == "R" & type == "estimate" |
variable == "R" & "estimate based on partial data") %>%
dplyr::select(-strat, -variable, -mean, -sd,
lower_90 = bottom, upper_90 = top,
lower_50 = lower, upper_50 = upper,
lower_20 = central_lower, upper_20 = central_upper)
# Format
summary <- dplyr::bind_rows(summary_cases, summary_hosp, summary_deaths, .id = "source") %>%
dplyr::mutate(source = ifelse(source == 1, "Test-positive cases",
ifelse(source == 2, "Hospital admissions",
"Deaths"))) %>%
dplyr::filter(variable == "R" & type == "estimate" | type == "estimate based on partial data") %>%
dplyr::select(-strat, -variable, -mean, -sd,
lower_90 = bottom, upper_90 = top,
lower_50 = lower, upper_50 = upper,
lower_20 = central_lower, upper_20 = central_upper)
# Format
summary <- dplyr::bind_rows(summary_cases, summary_hosp, summary_deaths, .id = "source") %>%
dplyr::mutate(source = ifelse(source == 1, "Test-positive cases",
ifelse(source == 2, "Hospital admissions",
"Deaths"))) %>%
dplyr::filter(variable == "R" & type == "estimate" | type == "estimate based on partial data") %>%
dplyr::select(#-strat, -variable,
-mean, -sd,
lower_90 = bottom, upper_90 = top,
lower_50 = lower, upper_50 = upper,
lower_20 = central_lower, upper_20 = central_upper)
# Format
summary <- dplyr::bind_rows(summary_cases, summary_hosp, summary_deaths, .id = "source") %>%
dplyr::mutate(source = ifelse(source == 1, "Test-positive cases",
ifelse(source == 2, "Hospital admissions",
"Deaths"))) %>%
dplyr::filter(variable == "R" & (type == "estimate" | type == "estimate based on partial data")) %>%
dplyr::select(#-strat, -variable,
-mean, -sd,
lower_90 = bottom, upper_90 = top,
lower_50 = lower, upper_50 = upper,
lower_20 = central_lower, upper_20 = central_upper)
# Format
summary <- dplyr::bind_rows(summary_cases, summary_hosp, summary_deaths, .id = "source") %>%
dplyr::mutate(source = ifelse(source == 1, "Test-positive cases",
ifelse(source == 2, "First hospital admissions",
"Deaths")),
date_created = Sys.Date()) %>%
dplyr::filter(variable == "R" & (type == "estimate" | type == "estimate based on partial data")) %>%
dplyr::select(-strat, -variable,
-mean, -sd,
lower_90 = bottom, upper_90 = top,
lower_50 = lower, upper_50 = upper,
lower_20 = central_lower, upper_20 = central_upper)
View(data)
plot(x = data[region==England,"date"], y = data[region==England,"cases_hosp_new"])
plot(x = data[region=="England","date"], y = data[region=="England","cases_hosp_new"])
plot(x = data[data$region=="England","date"], y = data[data$region=="England","cases_hosp_new"])
plot(x = data[data$region=="England"]$date, y = data[data$region=="England"]$cases_hosp_new)
saveRDS(data, "data/201004.rds")
# Latest data location
# 4 Oct 2020
data_save <- "data/201004.rds"
data <- readRDS(data_save)
