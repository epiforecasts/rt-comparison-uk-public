structure <- list("date", "areaName",
"newDeaths28DaysByDeathDate",  "newDeaths28DaysByPublishDate",
"newCasesBySpecimenDate", "newCasesByPublishDate", "newAdmissions")
names(structure) <- structure
areaType <- list("region" = "areaType=nhsregion",
"nation" = "areaType=nation")
# Set up query
structure <- list("date", "areaName",
"newDeaths28DaysByDeathDate",  "newDeaths28DaysByPublishDate",
"newCasesBySpecimenDate", "newCasesByPublishDate", "newAdmissions")
names(structure) <- structure
areaType <- list("region" = "areaType=nhsregion",
"nation" = "areaType=nation")
# Get data
data <- purrr::map_dfr(areaType, ~ ukcovid19::get_data(filters = .x, structure = structure))
View(data)
# Set up query
structure <- list("date", "areaName",
"newDeaths28DaysByDeathDate",  "newDeaths28DaysByPublishDate",
"newCasesBySpecimenDate", "newCasesByPublishDate", "newAdmissions")
names(structure) <- structure
areaType <- list("nhsregion" = "areaType=nhsregion",
"region" = "areaType=region",
"nation" = "areaType=nation")
# Get data
data <- purrr::map_dfr(areaType, .id = "region_type", ~ ukcovid19::get_data(filters = .x, structure = structure))
View(data)
# Rename
data.table::setDT(data)
old <- unlist(structure)
new <- c("date", "region", "deaths_death", "deaths_publish",  "cases_test", "cases_publish", "cases_hosp")
data <- data.table::setnames(data, old, new)
data$date <- as.Date(data$date)
View(data)
View(data)
data_sum <- data %>%
dplyr::group_by("region", "region_type") %>%
dplyr::summarise(deaths_death = sum(deaths_death),
deaths_publish = sum(deaths_publish),
cases_test = sum(cases_test),
cases_publish = sum(cases_publish),
cases_hosp = sum(cases_hosp))
View(data_sum)
data_sum <- data %>%
dplyr::group_by(region, region_type) %>%
dplyr::summarise(deaths_death = sum(deaths_death, na.rm=T),
deaths_publish = sum(deaths_publish, na.rm=T),
cases_test = sum(cases_test, na.rm=T),
cases_publish = sum(cases_publish, na.rm=T),
cases_hosp = sum(cases_hosp, na.rm=T))
View(data_sum)
# Set up query
structure <- list("date", "areaName",
"newDeaths28DaysByDeathDate",  "newDeaths28DaysByPublishDate",
"newCasesBySpecimenDate", "newCasesByPublishDate")#, "newAdmissions")
names(structure) <- structure
areaType <- list("nhsregion" = "areaType=nhsregion",
"region" = "areaType=region",
"nation" = "areaType=nation")
# Get data
data <- purrr::map_dfr(areaType, .id = "region_type", ~ ukcovid19::get_data(filters = .x, structure = structure))
# Rename
data.table::setDT(data)
old <- unlist(structure)
new <- c("date", "region", "deaths_death", "deaths_publish",  "cases_test", "cases_publish", "cases_hosp")
data <- data.table::setnames(data, old, new)
new <- c("date", "region", "deaths_death", "deaths_publish",  "cases_test", "cases_publish" ) #, "cases_hosp")
data <- data.table::setnames(data, old, new)
data$date <- as.Date(data$date)
data_sum <- data %>%
dplyr::group_by(region, region_type) %>%
dplyr::summarise(deaths_death = sum(deaths_death, na.rm=T),
deaths_publish = sum(deaths_publish, na.rm=T),
cases_test = sum(cases_test, na.rm=T),
cases_publish = sum(cases_publish, na.rm=T),
cases_hosp = sum(cases_hosp, na.rm=T))
data_sum <- data %>%
dplyr::group_by(region, region_type) %>%
dplyr::summarise(deaths_death = sum(deaths_death, na.rm=T),
deaths_publish = sum(deaths_publish, na.rm=T),
cases_test = sum(cases_test, na.rm=T),
cases_publish = sum(cases_publish, na.rm=T)) #,
View(data_sum)
# Set up query
structure <- list("date", "areaName",
"newDeaths28DaysByDeathDate",  "newDeaths28DaysByPublishDate",
"newCasesBySpecimenDate", "newCasesByPublishDate", "newAdmissions")
names(structure) <- structure
areaType <- list("nhsregion" = "areaType=nhsregion",
"region" = "areaType=region",
"nation" = "areaType=nation")
# Get data
data <- purrr::map(areaType, ~ ukcovid19::get_data(filters = .x, structure = structure))
View(data)
data$nhsregion <- data$nhsregion[.(date, areaName, newAdmissions)]
library(data.table)
data$nhsregion <- data$nhsregion[.(date, areaName, newAdmissions)]
data$nhsregion <- data$nhsregion[, .(date, areaName, newAdmissions)]
data$nhsregion <- data$nhsregion[, c(date, areaName, newAdmissions)]
data$nhsregion <- data$nhsregion[, .(date, areaName, newAdmissions)]
# # Clean
setDT(data$nhsregion)
data$nhsregion <- data$nhsregion[, .(date, areaName, newAdmissions)]
View(data)
unique(data[["nhsregion"]][["areaName"]])
data$midlands <- data$region[region %in% "Midlands"]
setDT(data$region)
data$midlands <- data$region[region %in% "Midlands"]
data$midlands <- data$region[areaName %in% "Midlands"]
View(data)
data$midlands <- data$region[areaName %in% c("East Midlands", "West Midlands")]
View(data)
data$midlands <- data$region[areaName %in% c("East Midlands", "West Midlands") ][, by = date, .(newDeaths28DaysByDeathDate = sum(newDeaths28DaysByDeathDate),
newDeaths28DaysByPublishDate = NA,
newCasesBySpecimenDate = sum(newCasesBySpecimenDate),
newCasesByPublishDate = NA,
newAdmissions = NA)]
View(data)
head(data$midlands0
)
head(data$midlands)
data_all <- rbind(data$nhsregion, data$region, data$midlands, data$nation)
data$region_else <- data$region[!areaName %in% c("East Midlands", "West Midlands")]
data_all <- rbind(data$nhsregion, data$region_else, data$midlands, data$nation, fill = TRUE)
View(data_all)
data$midlands <- data$region[areaName %in% c("East Midlands", "West Midlands") ][, by = date, .(newDeaths28DaysByDeathDate = sum(newDeaths28DaysByDeathDate),
newDeaths28DaysByPublishDate = NA,
newCasesBySpecimenDate = sum(newCasesBySpecimenDate),
newCasesByPublishDate = NA,
newAdmissions = NA,
areaName = "Midlands")]
data$region_else <- data$region[!areaName %in% c("East Midlands", "West Midlands")]
setDT(data$nation)
data_all <- rbind(data$nhsregion, data$region_else, data$midlands, data$nation, fill = TRUE)
View(data)
View(data)
data_all <- rbind(data$region_else, data$midlands, data$nation, fill = TRUE)
View(data_all)
data_all$newAdmissions = NULL
data_all <- merge(data_all, data$nhsregion, by = c("date", "areaName"))
View(data_all)
data_all <- rbind(data$region_else, data$midlands, data$nation)
View(data_all)
data_all <- merge(data_all, data$nhsregion, by = c("date", "areaName"))
data_all <- merge(data_all, data$nhsregion, by = c("date", "areaName"), all.x = TRUE)
data_all <- rbind(data$region_else, data$midlands, data$nation)
data_all <- merge(data_all, data$nhsregion, by = c("date", "areaName"), all.x = TRUE)
all_regions <- readRDS("data/all_regions.rds")
region_names <- readRDS("data/region_names.rds")
data_all$newAdmissions <- ifelse(data_all$areaName %in% region_names$nation,
data_all$newAdmissions.x, data_all$newAdmissions.y)
View(data_all)
data_all$newAdmissions.x <- NULL
data_all$newAdmissions.y <- NULL
rm(list=ls())
# Get UK data from which to estimate Rt
library(magrittr)
library(data.table)
library(ukcovid19) # remotes::install_github("publichealthengland/coronavirus-dashboard-api-R-sdk")
# Set up query
structure <- list("date", "areaName",
"newDeaths28DaysByDeathDate",  "newDeaths28DaysByPublishDate",
"newCasesBySpecimenDate", "newCasesByPublishDate", "newAdmissions")
names(structure) <- structure
areaType <- list("nhsregion" = "areaType=nhsregion",
"region" = "areaType=region",
"nation" = "areaType=nation")
# Get data
raw <- purrr::map(areaType, ~ ukcovid19::get_data(filters = .x, structure = structure))
# # Clean
# Set Midlands to one region to match NHS regions (given that is where admissions data are available)
setDT(raw$nhsregion)
raw$nhsregion <- raw$nhsregion[, .(date, areaName, newAdmissions)]
setDT(raw$region)
raw$midlands <- raw$region[areaName %in% c("East Midlands", "West Midlands") ][, by = date, .(newDeaths28DaysByDeathDate = sum(newDeaths28DaysByDeathDate),
newDeaths28DaysByPublishDate = NA,
newCasesBySpecimenDate = sum(newCasesBySpecimenDate),
newCasesByPublishDate = NA,
newAdmissions = NA,
areaName = "Midlands")]
raw$region_else <- data$region[!areaName %in% c("East Midlands", "West Midlands")]
# Bind and merge regional, national, and all data variables
data <- rbind(data$region_else, data$midlands, data$nation)
data <- merge(data, data$nhsregion, by = c("date", "areaName"), all.x = TRUE)
# Keep existing admissions data at nation level
region_names <- readRDS("data/region_names.rds")
data$newAdmissions <- ifelse(data$areaName %in% region_names$nation,
data$newAdmissions.x, data$newAdmissions.y)
data$newAdmissions.x <- NULL
data$newAdmissions.y <- NULL
raw$region_else <- raw$region[!areaName %in% c("East Midlands", "West Midlands")]
# Bind and merge regional, national, and all data variables
data <- rbind(data$region_else, data$midlands, data$nation)
data <- merge(data, data$nhsregion, by = c("date", "areaName"), all.x = TRUE)
# Bind and merge regional, national, and all data variables
data <- rbind(raw$region_else, raw$midlands, raw$nation)
data <- merge(data, raw$nhsregion, by = c("date", "areaName"), all.x = TRUE)
# Keep existing admissions data at nation level
region_names <- readRDS("data/region_names.rds")
data$newAdmissions <- ifelse(data$areaName %in% region_names$nation,
data$newAdmissions.x, data$newAdmissions.y)
data$newAdmissions.x <- NULL
data$newAdmissions.y <- NULL
# Rename
data.table::setDT(data)
old <- unlist(structure)
new <- c("date", "region", "deaths_death", "deaths_publish",  "cases_test", "cases_publish", "cases_hosp")
data <- data.table::setnames(data, old, new)
data$date <- as.Date(data$date)
# Add column to identify regions vs nations
nations <- c("England", "Scotland", "Wales", "Northern Ireland")
# Add column to identify regions vs nations
data$region_type <- ifelse(data$region %in% nations, "nation", "region")
# Add blended cases - publish date for nations, specimen date for regions
data$cases_blend = ifelse(data$region %in% nations, data$cases_publish, data$cases_test)
# Add blended deaths - publish date for nations, date of death for regions
data$deaths_blend = ifelse(data$region %in% nations, data$deaths_publish, data$deaths_death)
# Regions show 0s where there should be NAs for data by publish date
data$cases_publish <- ifelse(data$region %in% regions, NA, data$cases_publish)
data$deaths_publish <- ifelse(data$region %in% regions, NA, data$deaths_publish)
# Regions show 0s where there should be NAs for data by publish date
data$cases_publish <- ifelse(data$region %in% region_names$regions, NA, data$cases_publish)
data$deaths_publish <- ifelse(data$region %in% region_names$regions, NA, data$deaths_publish)
# Check date sequence is complete
if(length(seq.Date(from = min(data$date), to = max(data$date), by = 1))
!= (length(data$date) / length(unique(data$region)))){
warning("Missing days in date sequence")
}
rm(old, new, structure, areaType)
rm(old, new, structure, areaType, raw, nations)
View(data)
# Set up query
structure <- list("date", "areaName",
"newDeaths28DaysByDeathDate",  "newDeaths28DaysByPublishDate",
"newCasesBySpecimenDate", "newCasesByPublishDate", "newAdmissions")
names(structure) <- structure
areaType <- list("nhsregion" = "areaType=nhsregion",
"region" = "areaType=region",
"nation" = "areaType=nation")
# Get data
raw <- purrr::map(areaType, ~ ukcovid19::get_data(filters = .x, structure = structure))
# # Clean
# Set Midlands to one region to match NHS regions (given that is where admissions data are available)
setDT(raw$nhsregion)
raw$nhsregion <- raw$nhsregion[, .(date, areaName, newAdmissions)]
View(raw)
View(raw$nhsregion)
View(table(raw$nhsregion$date, raw$nhsregion$areaName))
View(table(raw$nhsregion$date))
# Set Midlands to one region to match NHS regions (given that is where admissions data are available)
setDT(raw$nhsregion)
raw$nhsregion <- raw$nhsregion[, .(date, areaName, newAdmissions)]
setDT(raw$region)
raw$midlands <- raw$region[areaName %in% c("East Midlands", "West Midlands") ][, by = date, .(newDeaths28DaysByDeathDate = sum(newDeaths28DaysByDeathDate),
newDeaths28DaysByPublishDate = NA,
newCasesBySpecimenDate = sum(newCasesBySpecimenDate),
newCasesByPublishDate = NA,
newAdmissions = NA,
areaName = "Midlands")]
raw$region_else <- raw$region[!areaName %in% c("East Midlands", "West Midlands")]
# Bind and merge regional, national, and all data variables
data <- rbind(raw$region_else, raw$midlands, raw$nation)
data <- merge(data, raw$nhsregion, by = c("date", "areaName"), all.x = TRUE)
View(data)
# Keep existing admissions data at nation level
region_names <- readRDS("data/region_names.rds")
data$newAdmissions <- ifelse(data$areaName %in% region_names$nation,
data$newAdmissions.x, data$newAdmissions.y)
View(data)
rm(list=ls())
# Set up query
structure <- list("date", "areaName",
"newDeaths28DaysByDeathDate",  "newDeaths28DaysByPublishDate",
"newCasesBySpecimenDate", "newCasesByPublishDate", "newAdmissions")
names(structure) <- structure
areaType <- list("nhsregion" = "areaType=nhsregion",
"region" = "areaType=region",
"nation" = "areaType=nation")
# Get data
raw <- purrr::map(areaType, ~ ukcovid19::get_data(filters = .x, structure = structure))
# # Clean
# Set Midlands to one region to match NHS regions (given that is where admissions data are available)
setDT(raw$nhsregion)
raw$nhsregion <- raw$nhsregion[, .(date, areaName, newAdmissions)]
setDT(raw$region)
raw$midlands <- raw$region[areaName %in% c("East Midlands", "West Midlands") ][, by = date, .(newDeaths28DaysByDeathDate = sum(newDeaths28DaysByDeathDate),
newDeaths28DaysByPublishDate = NA,
newCasesBySpecimenDate = sum(newCasesBySpecimenDate),
newCasesByPublishDate = NA,
newAdmissions = NA,
areaName = "Midlands")]
# Set NE & Yorkshire to one region to match NHS regions
setDT(raw$nhsregion)
raw$nhsregion <- raw$nhsregion[, .(date, areaName, newAdmissions)]
setDT(raw$region)
raw$ney <- raw$region[areaName %in% c("North East", "Yorkshire and The Humber") ][, by = date, .(newDeaths28DaysByDeathDate = sum(newDeaths28DaysByDeathDate),
newDeaths28DaysByPublishDate = NA,
newCasesBySpecimenDate = sum(newCasesBySpecimenDate),
newCasesByPublishDate = NA,
newAdmissions = NA,
areaName = "North East and Yorkshire")]
# Separate all other regions
raw$region_else <- raw$region[!areaName %in% c("East Midlands", "West Midlands", "North East", "Yorkshire and The Humber")]
# Bind Midlands, North East and Yorkshire, other regions, national
data <- rbind(raw$region_else, raw$midlands, raw$ney, raw$nation)
# Merge with hospital admissions
data <- merge(data, raw$nhsregion, by = c("date", "areaName"), all.x = TRUE)
# Keep existing admissions data at nation level
region_names <- readRDS("data/region_names.rds")
data$newAdmissions <- ifelse(data$areaName %in% region_names$nation,
data$newAdmissions.x, data$newAdmissions.y)
data$newAdmissions.x <- NULL
data$newAdmissions.y <- NULL
# Set up query
structure <- list("date", "areaName",
"newDeaths28DaysByDeathDate",  "newDeaths28DaysByPublishDate",
"newCasesBySpecimenDate", "newCasesByPublishDate", "newAdmissions")
names(structure) <- structure
areaType <- list("nhsregion" = "areaType=nhsregion",
"region" = "areaType=region",
"nation" = "areaType=nation")
# Get data
raw <- purrr::map(areaType, ~ ukcovid19::get_data(filters = .x, structure = structure))
# Get data
raw <- purrr::map(areaType, ~ ukcovid19::get_data(filters = .x, structure = structure))
# Set Midlands to one region to match NHS regions (given that is where admissions data are available)
setDT(raw$nhsregion)
raw$nhsregion <- raw$nhsregion[, .(date, areaName, newAdmissions)]
setDT(raw$region)
raw$midlands <- raw$region[areaName %in% c("East Midlands", "West Midlands") ][, by = date, .(newDeaths28DaysByDeathDate = sum(newDeaths28DaysByDeathDate),
newDeaths28DaysByPublishDate = NA,
newCasesBySpecimenDate = sum(newCasesBySpecimenDate),
newCasesByPublishDate = NA,
newAdmissions = NA,
areaName = "Midlands")]
# Set NE & Yorkshire to one region to match NHS regions
setDT(raw$nhsregion)
raw$nhsregion <- raw$nhsregion[, .(date, areaName, newAdmissions)]
setDT(raw$region)
raw$ney <- raw$region[areaName %in% c("North East", "Yorkshire and The Humber") ][, by = date, .(newDeaths28DaysByDeathDate = sum(newDeaths28DaysByDeathDate),
newDeaths28DaysByPublishDate = NA,
newCasesBySpecimenDate = sum(newCasesBySpecimenDate),
newCasesByPublishDate = NA,
newAdmissions = NA,
areaName = "North East and Yorkshire")]
# Separate all other regions
raw$region_else <- raw$region[!areaName %in% c("East Midlands", "West Midlands", "North East", "Yorkshire and The Humber")]
# Bind Midlands, North East and Yorkshire, other regions, national
data <- rbind(raw$region_else, raw$midlands, raw$ney, raw$nation)
# Merge with hospital admissions
data <- merge(data, raw$nhsregion, by = c("date", "areaName"), all.x = TRUE)
# Keep existing admissions data at nation level
region_names <- readRDS("data/region_names.rds")
data$newAdmissions <- ifelse(data$areaName %in% region_names$nation,
data$newAdmissions.x, data$newAdmissions.y)
data$newAdmissions.x <- NULL
data$newAdmissions.y <- NULL
View(data)
# Rename
data.table::setDT(data)
old <- unlist(structure)
new <- c("date", "region", "deaths_death", "deaths_publish",  "cases_test", "cases_publish", "cases_hosp")
data <- data.table::setnames(data, old, new)
data$date <- as.Date(data$date)
# Add column to identify regions vs nations
data$region_type <- ifelse(data$region %in% nations, "nation", "region")
# Add blended cases - publish date for nations, specimen date for regions
data$cases_blend = ifelse(data$region %in% nations, data$cases_publish, data$cases_test)
# Add column to identify regions vs nations
data$region_type <- ifelse(data$region %in% region_names$nations, "nation", "region")
# Add blended cases - publish date for nations, specimen date for regions
data$cases_blend = ifelse(data$region %in% nations, data$cases_publish, data$cases_test)
# Add blended deaths - publish date for nations, date of death for regions
data$deaths_blend = ifelse(data$region %in% nations, data$deaths_publish, data$deaths_death)
# Add blended cases - publish date for nations, specimen date for regions
data$cases_blend = ifelse(data$region %in% region_names$nations, data$cases_publish, data$cases_test)
# Add blended deaths - publish date for nations, date of death for regions
data$deaths_blend = ifelse(data$region %in% region_names$nations, data$deaths_publish, data$deaths_death)
# Regions show 0s where there should be NAs for data by publish date
data$cases_publish <- ifelse(data$region %in% region_names$regions, NA, data$cases_publish)
data$deaths_publish <- ifelse(data$region %in% region_names$regions, NA, data$deaths_publish)
# Check date sequence is complete
if(length(seq.Date(from = min(data$date), to = max(data$date), by = 1))
!= (length(data$date) / length(unique(data$region)))){
warning("Missing days in date sequence")
}
rm(old, new, structure, areaType, raw, nations)
saveRDS(data, "data/200821.rds")
data_select <- setDT(data)
data_select <- data.table::setnames(data_select, old = count_variable, new = "confirm")
data_select <- data_select[, .(date, region, confirm)]
data_select <- data_select[, .SD[date > (max(date) - lubridate::weeks(1))], by = region]
View(data_select)
data_select <- setDT(data)
data_select <- data_select[, .SD[date <= (max(date) - lubridate::weeks(1))], by = region]
View(data_select)
View(data)
# Get delays and fresh UK data; set up cores
source(here::here("rt-estimate", "estimate", "utils", "rt-data-defaults.R"))
# Get function for Rts
source(here::here("rt-estimate", "estimate", "utils",  "run-rt-estimate.R"))
run_rt_estimate(data = data,
count_variable = c("cases_blend", "cases_hosp", "cases_publish", "cases_test"),
reporting_delay = cases_delay)
View(data)
rm(list=ls())
# Set up query
structure <- list("date", "areaName",
"newDeaths28DaysByDeathDate",  "newDeaths28DaysByPublishDate",
"newCasesBySpecimenDate", "newCasesByPublishDate", "newAdmissions")
names(structure) <- structure
areaType <- list("nhsregion" = "areaType=nhsregion",
"region" = "areaType=region",
"nation" = "areaType=nation")
# Get data
raw <- purrr::map(areaType, ~ ukcovid19::get_data(filters = .x, structure = structure))
# # Clean
# Set Midlands to one region to match NHS regions (given that is where admissions data are available)
setDT(raw$nhsregion)
raw$nhsregion <- raw$nhsregion[, .(date, areaName, newAdmissions)]
setDT(raw$region)
raw$midlands <- raw$region[areaName %in% c("East Midlands", "West Midlands") ][, by = date, .(newDeaths28DaysByDeathDate = sum(newDeaths28DaysByDeathDate),
newDeaths28DaysByPublishDate = NA,
newCasesBySpecimenDate = sum(newCasesBySpecimenDate),
newCasesByPublishDate = NA,
newAdmissions = NA,
areaName = "Midlands")]
# Set NE & Yorkshire to one region to match NHS regions
setDT(raw$nhsregion)
raw$nhsregion <- raw$nhsregion[, .(date, areaName, newAdmissions)]
setDT(raw$region)
raw$ney <- raw$region[areaName %in% c("North East", "Yorkshire and The Humber") ][, by = date, .(newDeaths28DaysByDeathDate = sum(newDeaths28DaysByDeathDate),
newDeaths28DaysByPublishDate = NA,
newCasesBySpecimenDate = sum(newCasesBySpecimenDate),
newCasesByPublishDate = NA,
newAdmissions = NA,
areaName = "North East and Yorkshire")]
# Separate all other regions
raw$region_else <- raw$region[!areaName %in% c("East Midlands", "West Midlands", "North East", "Yorkshire and The Humber")]
# Bind Midlands, North East and Yorkshire, other regions, national
data <- rbind(raw$region_else, raw$midlands, raw$ney, raw$nation)
# Merge with hospital admissions
data <- merge(data, raw$nhsregion, by = c("date", "areaName"), all.x = TRUE)
# Keep existing admissions data at nation level
region_names <- readRDS("data/region_names.rds")
data$newAdmissions <- ifelse(data$areaName %in% region_names$nation,
data$newAdmissions.x, data$newAdmissions.y)
data$newAdmissions.x <- NULL
data$newAdmissions.y <- NULL
# Rename
data.table::setDT(data)
old <- unlist(structure)
new <- c("date", "region", "deaths_death", "deaths_publish",  "cases_test", "cases_publish", "cases_hosp")
data <- data.table::setnames(data, old, new)
data$date <- as.Date(data$date)
# Add column to identify regions vs nations
data$region_type <- ifelse(data$region %in% region_names$nations, "nation", "region")
View(data)
View(region_names)
region_names[["region"]]
region_names <- unique(data$region)
region_names <- c("England", "Scotland", "Wales", "Northern Ireland")
nations <- setdiff(region_names, unique(data$region))
nations <- c("England", "Scotland", "Wales", "Northern Ireland")
regions <- setdiff(nations, unique(data$region))
regions <- setdiff(nations, data$region)
unique(data$region)
regions <- setdiff(data$region, nations)
nhsregions <- setdiff(data$region, nations)
region_names <- list(nations, nhsregions)
View(region_names)
region_names[["region"]]
View(region_names)
region_names <- list("nation" = nations, "nhsregion" = nhsregions)
View(region_names)
saveRDS(region_names, "data/region_names.rds")
# Add blended cases - publish date for nations, specimen date for regions
data$cases_blend = ifelse(data$region %in% region_names$nations, data$cases_publish, data$cases_test)
# Add column to identify regions vs nations
data$region_type <- ifelse(data$region %in% region_names$nations, "nation", "region")
# Add blended cases - publish date for nations, specimen date for regions
data$cases_blend = ifelse(data$region %in% region_names$nations, data$cases_publish, data$cases_test)
region_names$nation
# Add column to identify regions vs nations
data$region_type <- ifelse(data$region %in% region_names$nation, "nation", "region")
# Add blended cases - publish date for nations, specimen date for regions
data$cases_blend = ifelse(data$region %in% region_names$nation, data$cases_publish, data$cases_test)
# Add blended deaths - publish date for nations, date of death for regions
data$deaths_blend = ifelse(data$region %in% region_names$nation, data$deaths_publish, data$deaths_death)
# Regions show 0s where there should be NAs for data by publish date
data$cases_publish <- ifelse(data$region %in% region_names$nhsregion, NA, data$cases_publish)
data$deaths_publish <- ifelse(data$region %in% region_names$nhsregion, NA, data$deaths_publish)
# Check date sequence is complete
if(length(seq.Date(from = min(data$date), to = max(data$date), by = 1))
!= (length(data$date) / length(unique(data$region)))){
warning("Missing days in date sequence")
}
rm(old, new, structure, areaType, raw)
rm(nations, nhsregions, regions)
# Get delays and fresh UK data; set up cores
source(here::here("rt-estimate", "estimate", "utils", "rt-data-defaults.R"))
# Get function for Rts
source(here::here("rt-estimate", "estimate", "utils",  "run-rt-estimate.R"))
start <- Sys.time()
run_rt_estimate(data = data,
count_variable = c("cases_blend", "cases_hosp", "cases_publish", "cases_test"),
reporting_delay = cases_delay)
# Get function for Rts
source(here::here("rt-estimate", "estimate", "utils",  "run-rt-estimate.R"))
run_rt_estimate(data = data,
count_variable = c("cases_blend", "cases_hosp", "cases_publish", "cases_test"),
reporting_delay = cases_delay)
