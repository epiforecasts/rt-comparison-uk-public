# Set root for saving estimates
save_loc <- "rt-estimate/estimate-all-time"
# Run estimates -----------------------------------------------------------
# Run everything everywhere
# Cases - by test date
run_rt_estimate(data = data,
save_loc = save_loc,
count_variable = c("cases_test"),
reporting_delay = cases_delay,
burn_in = 0,
no_cores = no_cores,
future = FALSE)
library(EpiNow2, quietly = TRUE)
library(lubridate, quietly = TRUE)
library(here)
library(data.table)
# Set up running a single Rt forecast -------------------------------------
run_rt_estimate <- function(data,
save_loc,
count_variable,
reporting_delay,
no_cores,
burn_in = 0,
future = TRUE,
max_execution_time = Inf) {
for(i in 1:length(count_variable)){
print(paste0("Estimates for ", count_variable[i]))
# Set up directories for models -------------------------------------------
if(!dir.exists(here::here(save_loc,
count_variable[i]))) {
dir.create(here::here(save_loc,
count_variable[i]))
}
targets <- paste0(save_loc, count_variable[i], "/region")
summary <- paste0(save_loc, count_variable[i], "/summary")
# Format for epinow2 ------------------------------------------------------
data_select <- data.table::as.data.table(data)
data_select <- data.table::setnames(data_select, old = count_variable[i], new = "confirm")
data_select <- data_select[, .(date, region, confirm)]
data_select <- data_select[, .SD[date <= (Sys.Date() - lubridate::days(5))], by = region]
data.table::setorder(data_select, date)
# Set up log
setup_log <- function(threshold = "INFO", file = "info.log") {
futile.logger::flog.threshold(threshold)
futile.logger::flog.appender(futile.logger::appender.tee(file))
return(invisible(NULL))
}
# Set up common settings --------------------------------------------------
futile.logger::flog.trace("calling regional_epinow")
out <- regional_epinow(reported_cases = data_select,
generation_time = generation_time,
delays = list(incubation_period,
reporting_delay),
horizon = 0,
burn_in = burn_in,
samples = 4000,
stan_args = list(warmup = 1000,
cores = no_cores,
chains = ifelse(no_cores <= 4, 4, no_cores)),
target_folder = targets,
return_estimates = FALSE,
summary = TRUE,
return_timings = TRUE,
future = future,
max_execution_time = max_execution_time)
futile.logger::flog.debug("resetting future plan to sequential")
future::plan("sequential")
futile.logger::flog.trace("generating summary data")
regional_summary(
reported_cases = data_select,
results_dir = targets,
summary_dir =  summary,
return_summary = FALSE)
}
}
library(EpiNow2)
# Update delays
# source(here::here("rt-estimate", "delays", "public-linelist-delays.R"))
# Get delays and fresh UK data; set up cores
source(here::here("rt-estimate", "utils", "rt-data-defaults.R"))
# Get function for Rts
source(here::here("rt-estimate", "utils",  "run-rt-estimate.R"))
# Set min/max dates for data
data <- data[data$date >= as.Date("2020-03-19") & data$date <= max(data$date)-1,]
# regional data only available after 19 March; this trims England data to same
# hospital admissions always 1 day more delayed than other data
# Set root for saving estimates
save_loc <- "rt-estimate/estimate-all-time"
# Run estimates -----------------------------------------------------------
# Run everything everywhere
# Cases - by test date
run_rt_estimate(data = data,
save_loc = save_loc,
count_variable = c("cases_test"),
reporting_delay = cases_delay,
burn_in = 0,
no_cores = no_cores,
future = FALSE)
library(EpiNow2)
# Update delays
# source(here::here("rt-estimate", "delays", "public-linelist-delays.R"))
# Get delays and fresh UK data; set up cores
source(here::here("rt-estimate", "utils", "rt-data-defaults.R"))
# Get function for Rts
source(here::here("rt-estimate", "utils",  "run-rt-estimate.R"))
# Set min/max dates for data
data <- data[data$date >= as.Date("2020-03-19") & data$date <= max(data$date)-1,]
# regional data only available after 19 March; this trims England data to same
# hospital admissions always 1 day more delayed than other data
# Set root for saving estimates
save_loc <- "rt-estimate/estimate-all-time"
# Run estimates -----------------------------------------------------------
# Run everything everywhere
# Cases - by test date
run_rt_estimate(data = data,
save_loc = save_loc,
count_variable = c("cases_test"),
reporting_delay = cases_delay,
burn_in = 0,
no_cores = no_cores,
future = FALSE)
library(EpiNow2)
# Update delays
# source(here::here("rt-estimate", "delays", "public-linelist-delays.R"))
# Get delays and fresh UK data; set up cores
source(here::here("rt-estimate", "utils", "rt-data-defaults.R"))
# Get function for Rts
source(here::here("rt-estimate", "utils",  "run-rt-estimate.R"))
# Set min/max dates for data
data <- data[data$date >= as.Date("2020-03-19") & data$date <= max(data$date)-1,]
# regional data only available after 19 March; this trims England data to same
# hospital admissions always 1 day more delayed than other data
# Set root for saving estimates
save_loc <- "rt-estimate/estimate-all-time/"
# Run estimates -----------------------------------------------------------
# Run everything everywhere
# Cases - by test date
run_rt_estimate(data = data,
save_loc = save_loc,
count_variable = c("cases_test"),
reporting_delay = cases_delay,
burn_in = 0,
no_cores = no_cores,
future = FALSE)
# Packages -----------------------------------------------------------------
library(EpiNow2)
library(data.table)
library(future)
# install.packages("EpiNow2")
# Delays -----------------------------------------------------------
# Update
# source(here::here("rt-estimate", "delays", "public-linelist-delays.R"))
# Fixed
generation_time <- readRDS(here::here("rt-estimate", "delays", "data", "generation_time.rds"))
incubation_period <- readRDS(here::here("rt-estimate", "delays", "data", "incubation_period.rds"))
# Deaths delay
deaths_delay <- readRDS(here::here("rt-estimate", "delays", "data", "cocin_onset_to_death_delay.rds"))
# Cases delay
cases_delay <- readRDS(here::here("rt-estimate", "delays", "data", "public_onset_to_report_delay.rds"))
# get data ----------------------------------------------------------------
# Set up query
structure <- list("date", "areaName",
"newDeaths28DaysByDeathDate",
"newCasesBySpecimenDate",
"newAdmissions")
names(structure) <- structure
areaType <- list("nation" = "areaType=nation")
# Get data
raw <- ukcovid19::get_data(filters = areaType, structure = structure)
# clean
data <- data.table::as.data.table(raw)
old <- unlist(structure)
new <- c("date", "region", "deaths_death",  "cases_test", "cases_hosp")
data <- data.table::setnames(data, old, new)
# Set date sequence to start from 12wks
data$date <- lubridate::ymd(data$date)
data <- data[, .SD[date >= max(date)-84]]
# Remove England/Scotland
data <- data[region %in% c("Wales", "Northern Ireland")]
# Add breakpoints
data <- data[, breakpoint := data.table::fifelse( (date == as.Date("2020-10-16") &
region == "Northern Ireland") |
(date == as.Date("2020-10-24") &
region == "Wales"),
1, 0)]
# # # Set up cores -----------------------------------------------------
setup_future <- function(jobs) {
if (!interactive()) {
## If running as a script enable this
options(future.fork.enable = TRUE)
}
plan(tweak(multiprocess, workers = min(future::availableCores(), jobs)),
gc = TRUE, earlySignal = TRUE)
jobs <- max(1, round(future::availableCores() / jobs, 0))
return(jobs)
}
no_cores <- setup_future(length(unique(data$region)))
# Rt estimate -------------------------------------------------------------
# Get function for Rts
source(here::here("rt-estimate", "utils",  "rt-breakpoint.R"))
# Set root for saving estimates
save_loc <- "rt-estimate/estimate-break/"
# Cases
run_rt_breakpoint(data = data,
truncate = 5,
count_variable = "cases_test",
reporting_delay = cases_delay,
save_loc = save_loc,
no_cores = no_cores,
max_execution_time = 60*60)
?regional_epinow
rm(list=ls())
generation_time <- readRDS(here::here("rt-estimate", "delays", "data", "generation_time.rds"))
incubation_period <- readRDS(here::here("rt-estimate", "delays", "data", "incubation_period.rds"))
# Deaths delay
deaths_delay <- readRDS(here::here("rt-estimate", "delays", "data", "cocin_onset_to_death_delay.rds"))
# Cases delay
cases_delay <- readRDS(here::here("rt-estimate", "delays", "data", "public_onset_to_report_delay.rds"))
# get data ----------------------------------------------------------------
# Set up query
structure <- list("date", "areaName",
"newDeaths28DaysByDeathDate",
"newCasesBySpecimenDate",
"newAdmissions")
names(structure) <- structure
areaType <- list("nation" = "areaType=nation")
# Get data
raw <- ukcovid19::get_data(filters = areaType, structure = structure)
# clean
data <- data.table::as.data.table(raw)
old <- unlist(structure)
new <- c("date", "region", "deaths_death",  "cases_test", "cases_hosp")
data <- data.table::setnames(data, old, new)
# Set date sequence to start from 12wks
data$date <- lubridate::ymd(data$date)
data <- data[, .SD[date >= max(date)-84]]
# Remove England/Scotland
data <- data[region %in% c("Wales", "Northern Ireland")]
# Add breakpoints
data <- data[, breakpoint := data.table::fifelse( (date == as.Date("2020-10-16") &
region == "Northern Ireland") |
(date == as.Date("2020-10-24") &
region == "Wales"),
1, 0)]
# # # Set up cores -----------------------------------------------------
setup_future <- function(jobs) {
if (!interactive()) {
## If running as a script enable this
options(future.fork.enable = TRUE)
}
plan(tweak(multiprocess, workers = min(future::availableCores(), jobs)),
gc = TRUE, earlySignal = TRUE)
jobs <- max(1, round(future::availableCores() / jobs, 0))
return(jobs)
}
no_cores <- setup_future(length(unique(data$region)))
# Rt estimate -------------------------------------------------------------
# Get function for Rts
source(here::here("rt-estimate", "utils",  "rt-breakpoint.R"))
# Set root for saving estimates
save_loc <- "rt-estimate/estimate-break/"
# Cases
run_rt_breakpoint(data = data,
truncate = 5,
count_variable = "cases_test",
reporting_delay = cases_delay,
save_loc = save_loc,
no_cores = no_cores)
rm(list=ls())
generation_time <- readRDS(here::here("rt-estimate", "delays", "data", "generation_time.rds"))
incubation_period <- readRDS(here::here("rt-estimate", "delays", "data", "incubation_period.rds"))
# Deaths delay
deaths_delay <- readRDS(here::here("rt-estimate", "delays", "data", "cocin_onset_to_death_delay.rds"))
# Cases delay
cases_delay <- readRDS(here::here("rt-estimate", "delays", "data", "public_onset_to_report_delay.rds"))
# get data ----------------------------------------------------------------
# Set up query
structure <- list("date", "areaName",
"newDeaths28DaysByDeathDate",
"newCasesBySpecimenDate",
"newAdmissions")
names(structure) <- structure
areaType <- list("nation" = "areaType=nation")
# Get data
raw <- ukcovid19::get_data(filters = areaType, structure = structure)
# clean
data <- data.table::as.data.table(raw)
old <- unlist(structure)
new <- c("date", "region", "deaths_death",  "cases_test", "cases_hosp")
data <- data.table::setnames(data, old, new)
# Set date sequence to start from 12wks
data$date <- lubridate::ymd(data$date)
data <- data[, .SD[date >= max(date)-84]]
# Remove England/Scotland
data <- data[region %in% c("Wales", "Northern Ireland")]
# Add breakpoints
data <- data[, breakpoint := data.table::fifelse( (date == as.Date("2020-10-16") &
region == "Northern Ireland") |
(date == as.Date("2020-10-24") &
region == "Wales"),
1, 0)]
# # # Set up cores -----------------------------------------------------
setup_future <- function(jobs) {
if (!interactive()) {
## If running as a script enable this
options(future.fork.enable = TRUE)
}
plan(tweak(multiprocess, workers = min(future::availableCores(), jobs)),
gc = TRUE, earlySignal = TRUE)
jobs <- max(1, round(future::availableCores() / jobs, 0))
return(jobs)
}
no_cores <- setup_future(length(unique(data$region)))
# Rt estimate -------------------------------------------------------------
# Get function for Rts
source(here::here("rt-estimate", "utils",  "rt-breakpoint.R"))
# Set root for saving estimates
save_loc <- "rt-estimate/estimate-break/"
# Cases
run_rt_breakpoint(data = data,
truncate = 5,
count_variable = "cases_test",
reporting_delay = cases_delay,
save_loc = save_loc,
no_cores = no_cores)
generation_time <- readRDS(here::here("rt-estimate", "delays", "data", "generation_time.rds"))
incubation_period <- readRDS(here::here("rt-estimate", "delays", "data", "incubation_period.rds"))
# Deaths delay
deaths_delay <- readRDS(here::here("rt-estimate", "delays", "data", "cocin_onset_to_death_delay.rds"))
# Cases delay
cases_delay <- readRDS(here::here("rt-estimate", "delays", "data", "public_onset_to_report_delay.rds"))
# get data ----------------------------------------------------------------
# Set up query
structure <- list("date", "areaName",
"newDeaths28DaysByDeathDate",
"newCasesBySpecimenDate",
"newAdmissions")
names(structure) <- structure
areaType <- list("nation" = "areaType=nation")
# Get data
raw <- ukcovid19::get_data(filters = areaType, structure = structure)
# clean
data <- data.table::as.data.table(raw)
old <- unlist(structure)
new <- c("date", "region", "deaths_death",  "cases_test", "cases_hosp")
data <- data.table::setnames(data, old, new)
# Set date sequence to start from 12wks
data$date <- lubridate::ymd(data$date)
data <- data[, .SD[date >= max(date)-84]]
# Remove England/Scotland
data <- data[region %in% c("Wales", "Northern Ireland")]
# Add breakpoints
data <- data[, breakpoint := data.table::fifelse( (date == as.Date("2020-10-16") &
region == "Northern Ireland") |
(date == as.Date("2020-10-24") &
region == "Wales"),
1, 0)]
targets <- paste0(save_loc, count_variable[i], "/region")
summary <- paste0(save_loc, count_variable[i], "/summary")
# Format for epinow2 ------------------------------------------------------
data_select <- data.table::as.data.table(data)
data_select <- data.table::setnames(data_select, old = count_variable[i], new = "confirm")
# Include breakpoint
data_select <- data_select[, .(date, region, confirm, breakpoint)]
# truncate 5 days
data_select <- data_select[, .SD[date <= (Sys.Date() - lubridate::days(truncate))], by = region]
data.table::setorder(data_select, date)
count_variable = "cases_new"
i = 1
truncate = 5
targets <- paste0(save_loc, count_variable[i], "/region")
summary <- paste0(save_loc, count_variable[i], "/summary")
# Format for epinow2 ------------------------------------------------------
data_select <- data.table::as.data.table(data)
data_select <- data.table::setnames(data_select, old = count_variable[i], new = "confirm")
# Include breakpoint
data_select <- data_select[, .(date, region, confirm, breakpoint)]
# truncate 5 days
data_select <- data_select[, .SD[date <= (Sys.Date() - lubridate::days(truncate))], by = region]
data.table::setorder(data_select, date)
count_variable = "cases_test"
targets <- paste0(save_loc, count_variable[i], "/region")
summary <- paste0(save_loc, count_variable[i], "/summary")
# Format for epinow2 ------------------------------------------------------
data_select <- data.table::as.data.table(data)
data_select <- data.table::setnames(data_select, old = count_variable[i], new = "confirm")
# Include breakpoint
data_select <- data_select[, .(date, region, confirm, breakpoint)]
# truncate 5 days
data_select <- data_select[, .SD[date <= (Sys.Date() - lubridate::days(truncate))], by = region]
data.table::setorder(data_select, date)
# US forecast settings
regional_epinow( # standard settings (US forecast)
samples = 2000,
horizon = 14,
generation_time = generation_time,
delays = list(incubation_period, reporting_delay),
stan_args = list(warmup = 500,
cores = no_cores,
control = list(adapt_delta = 0.95,
max_treedepth = 15),
chains = ifelse(no_cores <= 4, 4, no_cores)),
burn_in = 14,
non_zero_points = 14,
max_execution_time = 60 * 30,
future = TRUE,
output = c("region", "samples", "summary", "timing"),
# Custom settings
reported_cases = data_select,
target_folder = targets,
summary_args = list(summary_dir = summary,
all_regions = FALSE),
logs = "rt-estimate/logs/us-settings",
future_rt = "latest")
reporting_delay = cases_delay
# US forecast settings
regional_epinow( # standard settings (US forecast)
samples = 2000,
horizon = 14,
generation_time = generation_time,
delays = list(incubation_period, reporting_delay),
stan_args = list(warmup = 500,
cores = no_cores,
control = list(adapt_delta = 0.95,
max_treedepth = 15),
chains = ifelse(no_cores <= 4, 4, no_cores)),
burn_in = 14,
non_zero_points = 14,
max_execution_time = 60 * 30,
future = TRUE,
output = c("region", "samples", "summary", "timing"),
# Custom settings
reported_cases = data_select,
target_folder = targets,
summary_args = list(summary_dir = summary,
all_regions = FALSE),
logs = "rt-estimate/logs/us-settings",
future_rt = "latest")
# US forecast settings
regional_epinow( # standard settings (US forecast)
samples = 2000,
horizon = 14,
generation_time = generation_time,
delays = list(incubation_period, reporting_delay),
stan_args = list(warmup = 500,
cores = no_cores,
control = list(adapt_delta = 0.95,
max_treedepth = 15),
chains = ifelse(no_cores <= 4, 4, no_cores)),
burn_in = 14,
non_zero_points = 14,
max_execution_time = 60 * 30,
future = TRUE,
output = c("region", "samples", "summary", "timing"),
# Custom settings
reported_cases = data_select,
target_folder = targets,
summary_args = list(summary_dir = summary,
all_regions = FALSE),
logs = "rt-estimate/logs/us-settings",
future_rt = "latest")
# US forecast settings
regional_epinow( # standard settings (US forecast)
samples = 2000,
horizon = 14,
generation_time = generation_time,
delays = list(incubation_period, reporting_delay),
stan_args = list(warmup = 500,
cores = no_cores,
control = list(adapt_delta = 0.95,
max_treedepth = 15),
chains = ifelse(no_cores <= 4, 4, no_cores)),
burn_in = 14,
non_zero_points = 2,
max_execution_time = 60 * 30,
future = TRUE,
output = c("region", "samples", "summary", "timing"),
# Custom settings
reported_cases = data_select,
target_folder = targets,
summary_args = list(summary_dir = summary,
all_regions = FALSE),
logs = "rt-estimate/logs/us-settings",
future_rt = "latest")
# Get function for Rts
source(here::here("rt-estimate", "utils",  "rt-breakpoint.R"))
# Set root for saving estimates
save_loc <- "rt-estimate/estimate-break/"
# Cases
run_rt_breakpoint(data = data,
truncate = 5,
count_variable = "cases_test",
reporting_delay = cases_delay,
generation_time = generation_time,
save_loc = save_loc,
no_cores = no_cores)
# Cases
run_rt_breakpoint(data = data,
truncate = 5,
count_variable = "cases_test",
reporting_delay = cases_delay,
generation_time = generation_time,
save_loc = save_loc,
no_cores = no_cores)
# Cases
run_rt_breakpoint(data = data,
truncate = 3,
count_variable = "cases_test",
reporting_delay = cases_delay,
generation_time = generation_time,
save_loc = save_loc,
no_cores = no_cores)
