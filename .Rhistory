replacement = "_",
x = Sys.timezone())),
".md")
printer <- file(
filename,
open = "w"
)
write(funding_statement$`TRUE`, file = printer)
write("\n", file = printer, append = T)
write(author_text, file = printer, append = T)
write("\n", file = printer, append = T)
write(funding_statement$`FALSE`, file = printer, append = T)
close(printer)
readr::write_csv(x = author_order, path = sub(pattern = "\\.md$", "\\.csv", x = filename))
onset_to_admission_delay <- readRDS("C:/Users/kaths/GitHub/rt-comparison-uk-public/rt-estimate/estimate/delays/data/onset_to_admission_delay.rds")
View(onset_to_admission_delay)
onset_to_death_delay <- readRDS("C:/Users/kaths/GitHub/rt-comparison-uk-public/rt-estimate/estimate/delays/data/onset_to_death_delay.rds")
View(onset_to_death_delay)
generation_time <- readRDS("C:/Users/kaths/GitHub/rt-comparison-uk-public/rt-estimate/estimate/delays/data/generation_time.rds")
View(generation_time)
incubation_period <- readRDS("C:/Users/kaths/GitHub/rt-comparison-uk-public/rt-estimate/estimate/delays/data/incubation_period.rds")
View(incubation_period)
exp(1.621)
exp(1.4)
exp(2.3)
exp(incubation_period$mean_sd)
exp(incubation_period$sd)
exp(incubation_period$sd_sd)
exp(onset_to_admission_delay$mean)
exp(onset_to_admission_delay$mean_sd)
exp(onset_to_admission_delay$sd_sd)
exp(onset_to_admission_delay$sd_sd_sd)
exp(onset_to_admission_delay$sd_sd)
exp(onset_to_admission_delay$sd)
exp(onset_to_admission_delay$sd_sd)
exp(onset_to_death_delay$mean)
exp(onset_to_death_delay$mean_sd)
exp(onset_to_death_delay$sd)
exp(onset_to_death_delay$sd_sd)
citation("EpiNow2")
# Check % of time that one estimate is within the 50% CI of another estimate
summary_wide <- readRDS("rt-estimate/summary_wide.rds")
median_within <- summary_wide %>%
dplyr::filter(region %in% region_names$nhsregions) %>%
dplyr::mutate(med_case_admissions = ifelse(median_cases_blend > lower_50_cases_hosp &
median_cases_blend < upper_50_cases_hosp,
TRUE, FALSE),
med_admissions_death = ifelse(median_cases_hosp > lower_50_deaths_blend &
median_cases_hosp < upper_50_deaths_blend,
TRUE, FALSE),
lag_death_admissions = ifelse(dplyr::lag(median_deaths_blend, 7) > lower_50_cases_hosp &
dplyr::lag(median_deaths_blend, 7) < upper_50_cases_hosp,
TRUE, FALSE),
med_case_death = ifelse(median_cases_blend > lower_50_deaths_blend &
median_cases_blend < upper_50_deaths_blend,
TRUE, FALSE)
) %>%
dplyr::group_by(region) %>%
dplyr::summarise(perc_case_in_admissions = sum(med_case_admissions, na.rm=T) / sum(!is.na(med_case_admissions)),
perc_admissions_in_deaths = sum(med_admissions_death, na.rm=T) / sum(!is.na(med_admissions_death)),
perc_case_in_deaths = sum(med_case_death, na.rm=T) / sum(!is.na(med_case_death)),
lag_death_admissions = sum(lag_death_admissions, na.rm=T) / sum(!is.na(lag_death_admissions)))
library(magrittr)
# Check % of time that one estimate is within the 50% CI of another estimate
summary_wide <- readRDS("rt-estimate/summary_wide.rds")
median_within <- summary_wide %>%
dplyr::filter(region %in% region_names$nhsregions) %>%
dplyr::mutate(med_case_admissions = ifelse(median_cases_blend > lower_50_cases_hosp &
median_cases_blend < upper_50_cases_hosp,
TRUE, FALSE),
med_admissions_death = ifelse(median_cases_hosp > lower_50_deaths_blend &
median_cases_hosp < upper_50_deaths_blend,
TRUE, FALSE),
lag_death_admissions = ifelse(dplyr::lag(median_deaths_blend, 7) > lower_50_cases_hosp &
dplyr::lag(median_deaths_blend, 7) < upper_50_cases_hosp,
TRUE, FALSE),
med_case_death = ifelse(median_cases_blend > lower_50_deaths_blend &
median_cases_blend < upper_50_deaths_blend,
TRUE, FALSE)
) %>%
dplyr::group_by(region) %>%
dplyr::summarise(perc_case_in_admissions = sum(med_case_admissions, na.rm=T) / sum(!is.na(med_case_admissions)),
perc_admissions_in_deaths = sum(med_admissions_death, na.rm=T) / sum(!is.na(med_admissions_death)),
perc_case_in_deaths = sum(med_case_death, na.rm=T) / sum(!is.na(med_case_death)),
lag_death_admissions = sum(lag_death_admissions, na.rm=T) / sum(!is.na(lag_death_admissions)))
source("utils/utils.R")
source("utils/utils.R")
summary_wide <- readRDS("rt-estimate/summary_wide.rds")
median_within <- summary_wide %>%
dplyr::filter(region %in% region_names$nhsregions) %>%
dplyr::mutate(med_case_admissions = ifelse(median_cases_blend > lower_50_cases_hosp &
median_cases_blend < upper_50_cases_hosp,
TRUE, FALSE),
med_admissions_death = ifelse(median_cases_hosp > lower_50_deaths_blend &
median_cases_hosp < upper_50_deaths_blend,
TRUE, FALSE),
lag_death_admissions = ifelse(dplyr::lag(median_deaths_blend, 7) > lower_50_cases_hosp &
dplyr::lag(median_deaths_blend, 7) < upper_50_cases_hosp,
TRUE, FALSE),
med_case_death = ifelse(median_cases_blend > lower_50_deaths_blend &
median_cases_blend < upper_50_deaths_blend,
TRUE, FALSE)
) %>%
dplyr::group_by(region) %>%
dplyr::summarise(perc_case_in_admissions = sum(med_case_admissions, na.rm=T) / sum(!is.na(med_case_admissions)),
perc_admissions_in_deaths = sum(med_admissions_death, na.rm=T) / sum(!is.na(med_admissions_death)),
perc_case_in_deaths = sum(med_case_death, na.rm=T) / sum(!is.na(med_case_death)),
lag_death_admissions = sum(lag_death_admissions, na.rm=T) / sum(!is.na(lag_death_admissions)))
View(median_within)
colnames(median_within
)
summary <- tibble::tibble(vars = colnames(median_within[2:5]),
means = c(mean(median_within$perc_case_in_admissions),
mean(median_within$perc_case_in_deaths),
mean(median_within$perc_admissions_in_deaths),
mean(median_within$lag_death_admissions)),
sd = c(sd(median_within$perc_case_in_admissions),
sd(median_within$perc_case_in_deaths),
sd(median_within$perc_admissions_in_deaths),
sd(median_within$lag_death_admissions)))
View(summary)
median_within <- summary_wide %>%
dplyr::filter(region %in% region_names$nhsregions) %>%
dplyr::mutate(med_case_admissions = ifelse(median_cases_blend > lower_50_cases_hosp &
median_cases_blend < upper_50_cases_hosp,
TRUE, FALSE),
med_admissions_death = ifelse(median_cases_hosp > lower_50_deaths_blend &
median_cases_hosp < upper_50_deaths_blend,
TRUE, FALSE),
lag_death_admissions_0 = ifelse(median_deaths_blend > lower_50_cases_hosp &
median_deaths_blend < upper_50_cases_hosp,
TRUE, FALSE),
lag_death_admissions_7 = ifelse(dplyr::lag(median_deaths_blend, 7) > lower_50_cases_hosp &
dplyr::lag(median_deaths_blend, 7) < upper_50_cases_hosp,
TRUE, FALSE),
lag_death_admissions_14 = ifelse(dplyr::lag(median_deaths_blend, 14) > lower_50_cases_hosp &
dplyr::lag(median_deaths_blend, 14) < upper_50_cases_hosp,
TRUE, FALSE),
med_case_death = ifelse(median_cases_blend > lower_50_deaths_blend &
median_cases_blend < upper_50_deaths_blend,
TRUE, FALSE)
) %>%
dplyr::group_by(region) %>%
dplyr::summarise(perc_case_in_admissions = sum(med_case_admissions, na.rm=T) / sum(!is.na(med_case_admissions)),
perc_admissions_in_deaths = sum(med_admissions_death, na.rm=T) / sum(!is.na(med_admissions_death)),
perc_case_in_deaths = sum(med_case_death, na.rm=T) / sum(!is.na(med_case_death)),
lag_death_admissions_0 = sum(lag_death_admissions_0, na.rm=T) / sum(!is.na(lag_death_admissions_0)),
lag_death_admissions_7 = sum(lag_death_admissions_7, na.rm=T) / sum(!is.na(lag_death_admissions_7)),
lag_death_admissions_14 = sum(lag_death_admissions_14, na.rm=T) / sum(!is.na(lag_death_admissions_14)))
summary <- tibble::tibble(vars = colnames(median_within[2:7]),
means = c(mean(median_within$perc_case_in_admissions),
mean(median_within$perc_case_in_deaths),
mean(median_within$perc_admissions_in_deaths),
mean(median_within$lag_death_admissions_0),
mean(median_within$lag_death_admissions_7),
mean(median_within$lag_death_admissions_14)),
sd = c(sd(median_within$perc_case_in_admissions),
sd(median_within$perc_case_in_deaths),
sd(median_within$perc_admissions_in_deaths),
sd(median_within$lag_death_admissions_0),
mean(median_within$lag_death_admissions_7),
mean(median_within$lag_death_admissions_14)))
View(summary_wide)
median_within <- summary_wide %>%
dplyr::filter(region %in% region_names$nhsregions) %>%
dplyr::mutate(med_case_admissions = ifelse(median_cases_blend > lower_50_cases_hosp &
median_cases_blend < upper_50_cases_hosp,
TRUE, FALSE),
med_admissions_death = ifelse(median_cases_hosp > lower_50_deaths_blend &
median_cases_hosp < upper_50_deaths_blend,
TRUE, FALSE),
lag_death_admissions_0 = ifelse(median_deaths_blend > lower_50_cases_hosp &
median_deaths_blend < upper_50_cases_hosp,
TRUE, FALSE),
lag_death_admissions_7 = ifelse(dplyr::lag(median_deaths_blend, 7) > lower_50_cases_hosp &
dplyr::lag(median_deaths_blend, 7) < upper_50_cases_hosp,
TRUE, FALSE),
lag_death_admissions_14 = ifelse(dplyr::lag(median_deaths_blend, 14) > lower_50_cases_hosp &
dplyr::lag(median_deaths_blend, 14) < upper_50_cases_hosp,
TRUE, FALSE),
med_case_death = ifelse(median_cases_blend > lower_50_deaths_blend &
median_cases_blend < upper_50_deaths_blend,
TRUE, FALSE)
)
median_within <- summary_wide %>%
dplyr::filter(region %in% region_names$nhsregions) %>%
dplyr::mutate(med_case_admissions = ifelse(median_cases_blend > lower_50_cases_hosp &
median_cases_blend < upper_50_cases_hosp,
TRUE, FALSE),
med_admissions_death = ifelse(median_cases_hosp > lower_50_deaths_blend &
median_cases_hosp < upper_50_deaths_blend,
TRUE, FALSE),
lag_death_admissions_0 = ifelse(median_deaths_blend > lower_50_cases_hosp &
median_deaths_blend < upper_50_cases_hosp,
TRUE, FALSE),
lag_death_admissions_7 = ifelse(dplyr::lag(median_deaths_blend, 7) > lower_50_cases_hosp &
dplyr::lag(median_deaths_blend, 7) < upper_50_cases_hosp,
TRUE, FALSE),
lag_death_admissions_14 = ifelse(dplyr::lag(median_deaths_blend, 14) > lower_50_cases_hosp &
dplyr::lag(median_deaths_blend, 14) < upper_50_cases_hosp,
TRUE, FALSE),
med_case_death = ifelse(median_cases_blend > lower_50_deaths_blend &
median_cases_blend < upper_50_deaths_blend,
TRUE, FALSE)
) %>%
dplyr::group_by(region) %>%
dplyr::summarise(perc_case_in_admissions = sum(med_case_admissions, na.rm=T) / sum(!is.na(med_case_admissions)),
perc_admissions_in_deaths = sum(med_admissions_death, na.rm=T) / sum(!is.na(med_admissions_death)),
perc_case_in_deaths = sum(med_case_death, na.rm=T) / sum(!is.na(med_case_death)),
lag_death_admissions_0 = sum(lag_death_admissions_0, na.rm=T) / sum(!is.na(lag_death_admissions_0)),
lag_death_admissions_7 = sum(lag_death_admissions_7, na.rm=T) / sum(!is.na(lag_death_admissions_7)),
lag_death_admissions_14 = sum(lag_death_admissions_14, na.rm=T) / sum(!is.na(lag_death_admissions_14)))
median_within <- summary_wide %>%
dplyr::filter(region %in% region_names$nhsregions) %>%
dplyr::mutate(med_case_admissions = ifelse(median_cases_blend > lower_50_cases_hosp &
median_cases_blend < upper_50_cases_hosp,
TRUE, FALSE),
med_admissions_death_0 = ifelse(median_cases_hosp > lower_50_deaths_blend &
median_cases_hosp < upper_50_deaths_blend,
TRUE, FALSE),
lag_admissions_death_7 = ifelse(median_cases_hosp > dplyr::lag(lower_50_deaths_blend, 7) &
median_cases_hosp < dplyr::lag(upper_50_deaths_blend, 7),
TRUE, FALSE),
lag_admissions_death_14 = ifelse(median_cases_hosp > dplyr::lag(lower_50_deaths_blend, 14) &
median_cases_hosp < dplyr::lag(upper_50_deaths_blend, 14),
TRUE, FALSE),
med_case_death = ifelse(median_cases_blend > lower_50_deaths_blend &
median_cases_blend < upper_50_deaths_blend,
TRUE, FALSE)
) %>%
dplyr::group_by(region) %>%
dplyr::summarise(perc_case_in_admissions = sum(med_case_admissions, na.rm=T) / sum(!is.na(med_case_admissions)),
perc_admissions_in_deaths = sum(med_admissions_death, na.rm=T) / sum(!is.na(med_admissions_death)),
perc_case_in_deaths = sum(med_case_death, na.rm=T) / sum(!is.na(med_case_death)),
lag_death_admissions_0 = sum(lag_death_admissions_0, na.rm=T) / sum(!is.na(lag_death_admissions_0)),
lag_death_admissions_7 = sum(lag_death_admissions_7, na.rm=T) / sum(!is.na(lag_death_admissions_7)),
lag_death_admissions_14 = sum(lag_death_admissions_14, na.rm=T) / sum(!is.na(lag_death_admissions_14)))
median_within <- summary_wide %>%
dplyr::filter(region %in% region_names$nhsregions) %>%
dplyr::mutate(med_case_admissions = ifelse(median_cases_blend > lower_50_cases_hosp &
median_cases_blend < upper_50_cases_hosp,
TRUE, FALSE),
med_admissions_death_0 = ifelse(median_cases_hosp > lower_50_deaths_blend &
median_cases_hosp < upper_50_deaths_blend,
TRUE, FALSE),
lag_admissions_death_7 = ifelse(median_cases_hosp > dplyr::lag(lower_50_deaths_blend, 7) &
median_cases_hosp < dplyr::lag(upper_50_deaths_blend, 7),
TRUE, FALSE),
lag_admissions_death_14 = ifelse(median_cases_hosp > dplyr::lag(lower_50_deaths_blend, 14) &
median_cases_hosp < dplyr::lag(upper_50_deaths_blend, 14),
TRUE, FALSE),
med_case_death = ifelse(median_cases_blend > lower_50_deaths_blend &
median_cases_blend < upper_50_deaths_blend,
TRUE, FALSE)
) %>%
dplyr::group_by(region) %>%
dplyr::summarise(perc_case_in_admissions = sum(med_case_admissions, na.rm=T) / sum(!is.na(med_case_admissions)),
perc_case_in_deaths = sum(med_case_death, na.rm=T) / sum(!is.na(med_case_death)),
med_admissions_death_0 = sum(med_admissions_death_0, na.rm=T) / sum(!is.na(med_admissions_death_0)),
lag_admissions_death_7 = sum(lag_admissions_death_7, na.rm=T) / sum(!is.na(lag_admissions_death_7)),
lag_admissions_death_14 = sum(lag_admissions_death_14, na.rm=T) / sum(!is.na(lag_admissions_death_14)))
summary <- tibble::tibble(vars = colnames(median_within[2:7]),
means = c(mean(median_within$perc_case_in_admissions),
mean(median_within$perc_case_in_deaths),
mean(median_within$med_admissions_death_0),
mean(median_within$lag_admissions_death_7),
mean(median_within$lag_admissions_death_14)),
sd = c(sd(median_within$perc_case_in_admissions),
sd(median_within$perc_case_in_deaths),
sd(median_within$med_admissions_death_0),
mean(median_within$lag_admissions_death_7),
mean(median_within$lag_admissions_death_14)))
summary <- tibble::tibble(vars = colnames(median_within[2:6]),
means = c(mean(median_within$perc_case_in_admissions),
mean(median_within$perc_case_in_deaths),
mean(median_within$med_admissions_death_0),
mean(median_within$lag_admissions_death_7),
mean(median_within$lag_admissions_death_14)),
sd = c(sd(median_within$perc_case_in_admissions),
sd(median_within$perc_case_in_deaths),
sd(median_within$med_admissions_death_0),
mean(median_within$lag_admissions_death_7),
mean(median_within$lag_admissions_death_14)))
summary <- tibble::tibble(vars = colnames(median_within[2:6]),
means = c(mean(median_within$perc_case_in_admissions),
mean(median_within$perc_case_in_deaths),
mean(median_within$med_admissions_death_0),
mean(median_within$lag_admissions_death_7),
mean(median_within$lag_admissions_death_14)),
sd = c(sd(median_within$perc_case_in_admissions),
sd(median_within$perc_case_in_deaths),
sd(median_within$med_admissions_death_0),
sd(median_within$lag_admissions_death_7),
sd(median_within$lag_admissions_death_14)))
rm(list=ls())
library(ggplot2); library(magrittr)
# Get region names and plotting colours
source("utils/utils.R")
source("compare/plot-data.R")
source("compare/plot-rt.R")
source("compare/plot-ratios.R")
# Set global variables
# consistent date axis:
date_min <- as.Date("2020-03-01")
date_max <- as.Date("2020-08-20")
theme_set(theme_classic(base_size = 12))
source("compare/plot-data.R")
source("compare/plot-rt.R")
source("compare/plot-ratios.R")
# Raw data: moving average
plot_ma$data <- plot_ma$data %>%
dplyr::filter(region %in% region_names$nhsregions)
# Rt estimates
plot_rt$data <- plot_rt$data %>%
dplyr::filter(region %in% region_names$nhsregions)
# Ratios
plot_ratio_caseb_deathb$data <- plot_ratio_caseb_deathb$data %>%
dplyr::filter(region %in% region_names$nhsregions)
plot_ratio_caseb_hosp$data <- plot_ratio_caseb_hosp$data %>%
dplyr::filter(region %in% region_names$nhsregions)
plot_ratio_hosp_deathb$data <- plot_ratio_hosp_deathb$data %>%
dplyr::filter(region %in% region_names$nhsregions)
plot(plot_rt)
rm(list=ls())
summary <- readRDS("rt-estimate/summary.rds")
# Set data source names
summary <- summary %>%
dplyr::mutate('Data source' = dplyr::recode_factor(source,
"cases_blend" = "Cases",
"cases_hosp" = "Hospital admissions",
"deaths_blend" = "Deaths"))
# Get region names and plotting colours
source("utils/utils.R")
# Set y-axis
scale_min <- 0
scale_max <- 2.5
# Plot
plot_rt <- summary %>%
ggplot(aes(x = date, col = `Data source`, fill = `Data source`)) +
geom_ribbon(aes(ymin = lower_90, ymax = upper_90),
alpha = 0.1, size = 0.2) +
#geom_ribbon(aes(ymin = lower_50, ymax = upper_50),
#            alpha = 0.1, size = 0.2) +
geom_hline(yintercept = 1, linetype = 2) +
coord_cartesian(ylim = c(scale_min, scale_max),
xlim = c(date_min, date_max)) +
scale_color_manual(values = colours) +
scale_fill_manual(values = colours) +
facet_wrap("region", nrow = 2) +
cowplot::theme_cowplot() +
theme(panel.spacing.x = unit(0.5, "cm")) +
theme(strip.text.x = element_blank()) +
theme(axis.text.x = element_blank()) +
labs(subtitle = "Rt estimate",
y = "R", x = "", col = "Data source", fill = "Data source") +
theme(legend.position = "none")
# Set global variables
# consistent date axis:
date_min <- as.Date("2020-03-01")
date_max <- as.Date("2020-08-20")
# Plot
plot_rt <- summary %>%
ggplot(aes(x = date, col = `Data source`, fill = `Data source`)) +
geom_ribbon(aes(ymin = lower_90, ymax = upper_90),
alpha = 0.1, size = 0.2) +
#geom_ribbon(aes(ymin = lower_50, ymax = upper_50),
#            alpha = 0.1, size = 0.2) +
geom_hline(yintercept = 1, linetype = 2) +
coord_cartesian(ylim = c(scale_min, scale_max),
xlim = c(date_min, date_max)) +
scale_color_manual(values = colours) +
scale_fill_manual(values = colours) +
facet_wrap("region", nrow = 2) +
cowplot::theme_cowplot() +
theme(panel.spacing.x = unit(0.5, "cm")) +
theme(strip.text.x = element_blank()) +
theme(axis.text.x = element_blank()) +
labs(subtitle = "Rt estimate",
y = "R", x = "", col = "Data source", fill = "Data source") +
theme(legend.position = "none")
plot(plot_rt)
plot_rt$data <- plot_rt$data %>%
dplyr::filter(region %in% region_names$nhsregions)
plot(plot_rt)
# Plot
plot_rt <- summary %>%
ggplot(aes(x = date, col = `Data source`, fill = `Data source`)) +
geom_ribbon(aes(ymin = lower_90, ymax = upper_90),
alpha = 0.1, size = 0.2) +
#geom_ribbon(aes(ymin = lower_50, ymax = upper_50),
#            alpha = 0.1, size = 0.2) +
geom_hline(yintercept = 1, linetype = 2) +
coord_cartesian(ylim = c(scale_min, scale_max),
xlim = c(date_min, date_max)) +
scale_color_manual(values = colours) +
scale_fill_manual(values = colours) +
facet_wrap("region", nrow = 2) +
cowplot::theme_cowplot() +
theme(panel.spacing.x = unit(0.5, "cm")) +
#theme(strip.text.x = element_blank()) +
theme(axis.text.x = element_blank()) +
labs(subtitle = "Rt estimate",
y = "R", x = "", col = "Data source", fill = "Data source") +
theme(legend.position = "none")
plot_rt$data <- plot_rt$data %>%
dplyr::filter(region %in% region_names$nhsregions)
plot(plot_rt)
# Plot
plot_rt <- summary %>%
ggplot(aes(x = date, col = `Data source`, fill = `Data source`)) +
geom_ribbon(aes(ymin = lower_90, ymax = upper_90),
alpha = 0.1, size = 0.2) +
#geom_ribbon(aes(ymin = lower_50, ymax = upper_50),
#            alpha = 0.1, size = 0.2) +
geom_hline(yintercept = 1, linetype = 2) +
coord_cartesian(ylim = c(scale_min, scale_max),
xlim = c(date_min, date_max)) +
scale_color_manual(values = colours) +
scale_fill_manual(values = colours) +
facet_wrap("region", nrow = 2) +
cowplot::theme_cowplot() +
theme(panel.spacing.x = unit(0.5, "cm")) +
#theme(strip.text.x = element_blank()) +
#theme(axis.text.x = element_blank()) +
labs(subtitle = "Rt estimate",
y = "R", x = "", col = "Data source", fill = "Data source") +
theme(legend.position = "none")
plot_rt$data <- plot_rt$data %>%
dplyr::filter(region %in% region_names$nhsregions)
plot(plot_rt)
source("compare/plot-data.R")
source("compare/plot-rt.R")
source("compare/plot-ratios.R")
# Raw data: moving average
plot_ma$data <- plot_ma$data %>%
dplyr::filter(region %in% region_names$nhsregions)
# Rt estimates
plot_rt$data <- plot_rt$data %>%
dplyr::filter(region %in% region_names$nhsregions)
# Plot Rt and data
plot_rt_data <- plot_ma +
plot_rt
plot(plot_rt_data)
# Plot Rt and data
plot_rt_data <- plot_ma +
plot_rt +
patchwork::plot_layout(nrow = 2)
plot(plot_rt_data)
# Plot Rt and data
plot_rt_data <- plot_ma +
plot_rt +
patchwork::plot_layout(ncol = 2)
plot(plot_rt_data)
# Plot Rt and data
plot_rt_data <- plot_ma +
plot_rt_only +
patchwork::plot_layout(ncol = 4)
plot(plot_rt_data)
# Plot Rt and data
plot_rt_data <- plot_ma +
plot_rt_only +
patchwork::plot_layout(ncol = 1)
plot(plot_rt_data)
# Plot 7 day MA for use with 2 rows
plot_ma <- data_ma %>%
ggplot() +
geom_line(aes(x = date, y = as.numeric(ma), colour = `Data source`)) +
facet_wrap("region", nrow = 2) + #, scales = "free_y"
cowplot::theme_cowplot() +
coord_cartesian(xlim = c(date_min, date_max)) +
scale_color_manual(values = colours) +
#theme(panel.spacing.x = unit(0.5, "cm")) +
#theme(legend.position="top", legend.box = "horizontal") +
#theme(axis.text.x = element_blank()) +
labs(subtitle = "Smoothed counts", y = "Centred 7-day MA", x = "")
plot(plot_m)
plot(plot_ma)
# Plot 7 day MA for use with 2 rows
plot_ma_only <- data_ma %>%
ggplot() +
geom_line(aes(x = date, y = as.numeric(ma), colour = `Data source`)) +
facet_wrap("region", nrow = 2) + #, scales = "free_y"
cowplot::theme_cowplot() +
coord_cartesian(xlim = c(date_min, date_max)) +
scale_color_manual(values = colours) +
#theme(panel.spacing.x = unit(0.5, "cm")) +
#theme(legend.position="top", legend.box = "horizontal") +
#theme(axis.text.x = element_blank()) +
labs(subtitle = "Smoothed counts", y = "Centred 7-day MA", x = "")
# Plot Rt and data
plot_rt_data <- plot_ma_only +
plot_rt_only +
patchwork::plot_layout(ncol = 1)
plot(plot_rt_data)
ggsave(here::here("figures", paste0(Sys.Date(), "-regional_rt_and_data.pdf")),
plot_rt_data, dpi = 150, height = 15, width = 15)
# Plot Rt and data
plot_rt_data <- plot_ma_only +
plot_rt_only +
patchwork::plot_layout(ncol = 1) +
patchwork::wrap_plots()
patchwork::wrap_plots(plot_rt_only, plot_ma_only)
# Plot Rt and data
plot_rt_data <- plot_ma_only +
plot_rt_only +
patchwork::plot_layout(ncol = 3)
plot(plot_rt_data)
source('C:/Users/kaths/GitHub/rt-comparison-uk-public/compare/consistency_within_50ci.R', echo=TRUE)
View(median_within)
View(summary)
citation("covidregionaldata")
covidregionaldata:::get_uk_regional_cases_only_level_1()
