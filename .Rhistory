geom_ribbon(aes(ymin = pub_hosp_l50, ymax = pub_hosp_u50),
alpha = 0.2) +
#geom_ribbon(aes(ymin = pub_hosp_l90, ymax = pub_hosp_u90),
#            alpha = 0.1, size = 0.2) +
#geom_line(aes(y = pub_hosp_l50), alpha = 0.2) +
#geom_line(aes(y = pub_hosp_u50), alpha = 0.2) +
geom_hline(yintercept = 1, linetype = 2) +
#coord_cartesian(ylim = c(0.5, 1.5)) +
#scale_color_manual(values = colours) +
#scale_fill_manual(values = colours) +
cowplot::theme_cowplot(font_size = 11) +
theme(panel.spacing.x = unit(0.5, "cm")) +
#theme(strip.text.x = element_blank()) +
#theme(axis.text.x = element_blank()) +
labs(title = "Rt(all cases) / Rt(admissions)",
y = "Ratio", x = "", col = "source", fill = "source")
plot_ratio_national <- summary_ratios %>%
ggplot(aes(x = date)) +
geom_line(aes(y = pub_hosp_med), alpha = 0.6) +
geom_ribbon(aes(ymin = pub_hosp_l50, ymax = pub_hosp_u50),
alpha = 0.2) +
#geom_ribbon(aes(ymin = pub_hosp_l90, ymax = pub_hosp_u90),
#            alpha = 0.1, size = 0.2) +
#geom_line(aes(y = pub_hosp_l50), alpha = 0.2) +
#geom_line(aes(y = pub_hosp_u50), alpha = 0.2) +
geom_hline(yintercept = 1, linetype = 2) +
#coord_cartesian(ylim = c(0.5, 1.5)) +
#scale_color_manual(values = colours) +
#scale_fill_manual(values = colours) +
cowplot::theme_cowplot(font_size = 11) +
theme(panel.spacing.x = unit(0.5, "cm")) +
#theme(strip.text.x = element_blank()) +
#theme(axis.text.x = element_blank()) +
labs(title = "Rt(all cases) / Rt(admissions)",
y = "Ratio", x = "")
plot(plot_ratio_national)
plot_ratio_national <- summary_ratios %>%
ggplot(aes(x = date)) +
geom_line(aes(y = hosp_deaths_med), alpha = 0.6) +
geom_ribbon(aes(ymin = hosp_deaths_l50, ymax = hosp_deaths_u50),
alpha = 0.2) +
#geom_ribbon(aes(ymin = pub_hosp_l90, ymax = pub_hosp_u90),
#            alpha = 0.1, size = 0.2) +
#geom_line(aes(y = pub_hosp_l50), alpha = 0.2) +
#geom_line(aes(y = pub_hosp_u50), alpha = 0.2) +
geom_hline(yintercept = 1, linetype = 2) +
#coord_cartesian(ylim = c(0.5, 1.5)) +
#scale_color_manual(values = colours) +
#scale_fill_manual(values = colours) +
cowplot::theme_cowplot(font_size = 11) +
theme(panel.spacing.x = unit(0.5, "cm")) +
#theme(strip.text.x = element_blank()) +
#theme(axis.text.x = element_blank()) +
labs(title = "Rt(all cases) / Rt(admissions)",
y = "Ratio", x = "")
plot(plot_ratio_national)
rm(list=ls())
# Get delays and fresh UK data; set up cores
source(here::here("rt-estimate", "estimate", "utils", "rt-data-defaults.R"))
# Get function for Rts
source(here::here("rt-estimate", "estimate", "utils",  "run-rt-estimate.R"))
nations <- c("England", "Scotland", "Wales", "Northern Ireland")
regions <- setdiff(unique(data$region), nations)
national_data <- data[region %in% nations]
regional_data <- data[region %in% regions]
View(regional_data)
require(magrittr)
require(covidregionaldata) # install from Github for latest version
data <- covidregionaldata::get_regional_data(country = "UK", localise_regions = FALSE)
View(data)
url <- 'https://api.coronavirus.data.gov.uk/v1/data?filters=areaType=region&structure={"date":"date","newDeaths28DaysByDeathDate":"newDeaths28DaysByDeathDate"}'
httr::get(url)
httr::GET(url)
get <- httr::GET(url)
View(get)
response <- httr::GET(url)
# Convert response from binary to JSON:
json_text <- content(response, "text")
# Convert response from binary to JSON:
json_text <- httr::content(response, "text")
data = jsonlite::fromJSON(json_text)
View(data)
data = jsonlite::fromJSON(json_text)$data
View(data)
url <- 'https://api.coronavirus.data.gov.uk/v1/data?filters=areaType=region&structure={"date":"date","areaName":"areaName","newDeaths28DaysByDeathDate":"newDeaths28DaysByDeathDate"}'
response <- httr::GET(url)
# Convert response from binary to JSON:
json_text <- httr::content(response, "text")
data = jsonlite::fromJSON(json_text)$data
View(data)
source('C:/Users/kaths/GitHub/covidregionaldata/R/uk.R', echo=TRUE)
# Set up API query
query_filters <- list(nation = "areaType=nation",
region = "areaType=region")
# Get data for nations and regions
data_list <- purrr::map(query_filters, get_uk_data)
data <- dplyr::bind_rows(data_list$nation, data_list$region)
View(data)
View(data_list)
source('C:/Users/kaths/GitHub/covidregionaldata/R/uk.R', echo=TRUE)
# Set up API query
query_filters <- list(nation = "areaType=nation",
region = "areaType=region")
# Get data for nations and regions
data_list <- purrr::map(query_filters, get_uk_data)
View(data_list)
data_list[["region"]][["newDeaths28DaysByPublishDate"]]
region <- rbind(data_list$region)
View(region)
data_deaths <- jsonlite::fromJSON(json_text)$data
url <- 'https://api.coronavirus.data.gov.uk/v1/data?filters=areaType=region&structure={"date":"date","areaName":"areaName","newDeaths28DaysByDeathDate":"newDeaths28DaysByDeathDate"}'
response <- httr::GET(url)
# Convert response from binary to JSON:
json_text <- httr::content(response, "text")
data_deaths <- jsonlite::fromJSON(json_text)$data
rm(list=ls())
url <- 'https://api.coronavirus.data.gov.uk/v1/data?filters=areaType=region&structure={"date":"date","areaName":"areaName","newAdmissions":"newAdmissions"}'
response <- httr::GET(url)
# Convert response from binary to JSON:
json_text <- httr::content(response, "text")
data_adm <- jsonlite::fromJSON(json_text)$data
url <- 'https://api.coronavirus.data.gov.uk/v1/data?filters=areaType=region&structure={"date":"date","areaName":"areaName","newAdmissions":"newAdmissions"}'
response <- httr::GET(url)
View(response)
url <- 'https://api.coronavirus.data.gov.uk/v1/data?filters=areaType=region&structure={"date":"date","areaName":"areaName","newCasesBySpecimenDate":"newCasesBySpecimenDate"}'
response <- httr::GET(url)
View(response)
# Convert response from binary to JSON:
json_text <- httr::content(response, "text")
data_adm <- jsonlite::fromJSON(json_text)$data
data_test <- jsonlite::fromJSON(json_text)$data
rm(data_adm)
View(data_test)
unique(data_test$date)
unique(data_test$region)
unique(data_test$areaName)
table(data_test$areaName, data_test$date)
dates <- table(data_test$date, data_test$areaName)
View(dates)
rm(response, dates, url, json_text)
url <- 'https://api.coronavirus.data.gov.uk/v1/data?filters=areaType=region&structure={"date":"date","areaName":"areaName","newDeaths28DaysByDeathDate":"newDeaths28DaysByDeathDate"}'
response <- httr::GET(url)
# Convert response from binary to JSON:
json_text <- httr::content(response, "text")
data_deaths <- jsonlite::fromJSON(json_text)$data
# Join
data_regional <- dplyr::left_join(data_deaths, data_test, by = c("date", "areaName"))
View(data_regional)
# Join
data_regional <- dplyr::left_join(data_deaths, data_test, by = c("date", "areaName")) %>%
dplyr::rename(region = areaName, deaths = newDeaths28DaysByDeathDate, cases_test = newCasesBySpecimenDate)
View(data_regional)
rm(url, response, json_text, data_deaths, data_test)
data <- covidregionaldata::get_regional_data(country = "UK", localise_regions = FALSE)
data <- data.table::setDT(data)
# Reshape
keep_cols <- c("date", "region_level_1", "ons_region_code",
"newCasesBySpecimenDate", "newCasesByPublishDate", "hosp_new", "deaths_new")
data <- data[, ..keep_cols]
new <- c("date", "region", "region_code",
"cases_test", "cases_publish", "cases_hosp", "deaths")
data <- data.table::setnames(data, old = keep_cols, new = new)
View(data)
data$cases_publish <- ifelse(data$region %in% regions, NA, cases_publish)
regions <- setdiff(unique(data$region), nations)
data$cases_publish <- ifelse(data$region %in% regions, NA, cases_publish)
# # Organise data: regions download 0s where there should be NAs for cases by publish date
nations <- c("England", "Scotland", "Wales", "Northern Ireland")
regions <- setdiff(unique(data$region), nations)
data$cases_publish <- ifelse(data$region %in% regions, NA, cases_publish)
data$cases_publish <- ifelse(data$region %in% regions, NA, data$cases_publish)
View(data)
merge_deaths <- data_deaths[data, on = c("region", "date")]
url <- 'https://api.coronavirus.data.gov.uk/v1/data?filters=areaType=region&structure={"date":"date","areaName":"areaName","newDeaths28DaysByDeathDate":"newDeaths28DaysByDeathDate"}'
response <- httr::GET(url)
json_text <- httr::content(response, "text")
data_deaths <- jsonlite::fromJSON(json_text)$data
merge_deaths <- data_deaths[data, on = c("region", "date")]
merge_deaths <- data_deaths[data, on = .("region", "date")]
data.table::setDT(data_deaths)
data.table::setDT(data_deaths)
merge_deaths <- data_deaths[data, on = .("region", "date")]
data.table::setnames(data_deaths, old = c("areaName", "newDeaths28DaysByDeathDate"), new = c("region", "deaths"))
merge_deaths <- data_deaths[data, on = .("region", "date")]
View(data_deaths)
data.table::setnames(data_deaths, old = c("areaName", "newDeaths28DaysByDeathDate"), new = c("region", "deaths_region"))
url <- 'https://api.coronavirus.data.gov.uk/v1/data?filters=areaType=region&structure={"date":"date","areaName":"areaName","newDeaths28DaysByDeathDate":"newDeaths28DaysByDeathDate"}'
response <- httr::GET(url)
json_text <- httr::content(response, "text")
data_deaths <- jsonlite::fromJSON(json_text)$data
data.table::setDT(data_deaths)
data.table::setnames(data_deaths, old = c("areaName", "newDeaths28DaysByDeathDate"), new = c("region", "deaths_region"))
merge_deaths <- data_deaths[data, on = .("region", "date")]
merge_deaths <- data_deaths[data, on = c("region", "date")]
merge_deaths <- data_deaths[data, on = c("region", as.character("date"))]
data_deaths$date <- as.Date(data_deaths$date)
merge_deaths <- data_deaths[data, on = c("region", "date")]
View(merge_deaths)
region <- covidregionaldata:::get_uk_data(filters = "areaType=region")
View(region)
View(merge_deaths)
get_uk_data <- function(filters, progress_bar = FALSE) {
api_endpoint <- "https://api.coronavirus.data.gov.uk/v1/data"
uk_variables = list(
# --- Standard variables for covidregionaldata --- #
#
"date", "areaName", "areaCode",
# deaths
"newDeaths28DaysByPublishDate", "cumDeaths28DaysByPublishDate"
)
names(uk_variables) <- uk_variables
results <- list()
current_page <- 1
if (progress_bar) {
pb <- txtProgressBar(min = 0, max = 45, style = 3)
}
repeat {
response <- httr::VERB("GET",
url = api_endpoint,
query = list(
filters = filters,
structure = jsonlite::toJSON(uk_variables, auto_unbox = TRUE, pretty = FALSE),
page = current_page),
httr::timeout(20))
if (response$status_code >= 400) {
err_msg = httr::http_status(response)
stop(err_msg)
} else if (response$status_code == 204) {
break
}
# Convert response from binary to JSON:
json_text <- httr::content(response, "text")
dt <- jsonlite::fromJSON(json_text)
results <- rbind(results, dt$data)
if (is.null( dt$pagination$`next`)) {
break
}
current_page <- current_page + 1
if (progress_bar) {
setTxtProgressBar(pb, current_page)
}
}
return(results)
}
# deaths: Deaths only download when queried separately from above (- check in covidregionaldata)
data_deaths <- get_uk_data(filters = list(region = "areaType=region"))
data.table::setDT(data_deaths)
data.table::setnames(data_deaths, old = c("areaName", "newDeaths28DaysByDeathDate"), new = c("region", "deaths_region"))
data_deaths$date <- as.Date(data_deaths$date)
# deaths: Deaths only download when queried separately from above (- check in covidregionaldata)
data_deaths <- get_uk_data(filters = list(region = "areaType=region"))
View(data_deaths)
get_uk_data <- function(filters, progress_bar = FALSE) {
api_endpoint <- "https://api.coronavirus.data.gov.uk/v1/data"
uk_variables = list(
# --- Standard variables for covidregionaldata --- #
#
"date", "areaName",
# deaths
"newDeaths28DaysByPublishDate", "cumDeaths28DaysByPublishDate"
)
names(uk_variables) <- uk_variables
results <- list()
current_page <- 1
if (progress_bar) {
pb <- txtProgressBar(min = 0, max = 45, style = 3)
}
repeat {
response <- httr::VERB("GET",
url = api_endpoint,
query = list(
filters = filters,
structure = jsonlite::toJSON(uk_variables, auto_unbox = TRUE, pretty = FALSE),
page = current_page),
httr::timeout(60))
# Convert response from binary to JSON:
json_text <- httr::content(response, "text")
dt <- jsonlite::fromJSON(json_text)
results <- rbind(results, dt$data)
if (is.null( dt$pagination$`next`)) {
break
}
current_page <- current_page + 1
if (progress_bar) {
setTxtProgressBar(pb, current_page)
}
}
return(results)
}
# deaths: Deaths only download when queried separately from above (- check in covidregionaldata)
data_deaths <- get_uk_data(filters = list(region = "areaType=region"))
get_uk_data <- function(filters, progress_bar = FALSE) {
api_endpoint <- "https://api.coronavirus.data.gov.uk/v1/data"
uk_variables = list(
# --- Standard variables for covidregionaldata --- #
#
"date", "areaName",
# deaths
"newDeaths28DaysByPublishDate", "cumDeaths28DaysByPublishDate"
)
names(uk_variables) <- uk_variables
results <- list()
current_page <- 1
if (progress_bar) {
pb <- txtProgressBar(min = 0, max = 45, style = 3)
}
repeat {
response <- httr::VERB("GET",
url = api_endpoint,
query = list(
filters = filters,
structure = jsonlite::toJSON(uk_variables, auto_unbox = TRUE, pretty = FALSE),
page = current_page),
httr::timeout(60))
# Convert response from binary to JSON:
json_text <- httr::content(response, "text")
dt <- jsonlite::fromJSON(json_text)
results <- rbind(results, dt$data)
if (is.null( dt$pagination$`next`)) {
break
}
current_page <- current_page + 1
if (progress_bar) {
setTxtProgressBar(pb, current_page)
}
}
return(results)
}
# deaths: Deaths only download when queried separately from above (- check in covidregionaldata)
data_deaths <- get_uk_data(filters = list("region" = "areaType=region"))
get_uk_data <- function(filters, progress_bar = FALSE) {
api_endpoint <- "https://api.coronavirus.data.gov.uk/v1/data"
uk_variables = list(
"date", "areaName", "newDeaths28DaysByPublishDate", "cumDeaths28DaysByPublishDate")
names(uk_variables) <- uk_variables
results <- list()
current_page <- 1
repeat {
response <- httr::VERB("GET",
url = api_endpoint,
query = list(
filters = list("areaType=region"),
structure = jsonlite::toJSON(uk_variables, auto_unbox = TRUE, pretty = FALSE),
page = current_page),
httr::timeout(60))
# Convert response from binary to JSON:
json_text <- httr::content(response, "text")
dt <- jsonlite::fromJSON(json_text)
results <- rbind(results, dt$data)
if (is.null( dt$pagination$`next`)) {
break
}
current_page <- current_page + 1
if (progress_bar) {
setTxtProgressBar(pb, current_page)
}
}
return(results)
}
get_uk_data <- function() {
api_endpoint <- "https://api.coronavirus.data.gov.uk/v1/data"
uk_variables = list(
"date", "areaName", "newDeaths28DaysByPublishDate", "cumDeaths28DaysByPublishDate")
names(uk_variables) <- uk_variables
results <- list()
current_page <- 1
repeat {
response <- httr::VERB("GET",
url = api_endpoint,
query = list(
filters = list("areaType=region"),
structure = jsonlite::toJSON(uk_variables, auto_unbox = TRUE, pretty = FALSE),
page = current_page),
httr::timeout(60))
# Convert response from binary to JSON:
json_text <- httr::content(response, "text")
dt <- jsonlite::fromJSON(json_text)
results <- rbind(results, dt$data)
if (is.null( dt$pagination$`next`)) {
break
}
current_page <- current_page + 1
}
return(results)
}
# deaths: Deaths only download when queried separately from above (- check in covidregionaldata)
data_deaths <- get_uk_data()
View(data_deaths)
remotes::install_github("publichealthengland/coronavirus-dashboard-api-R-sdk")
data <- ukcovid19::get_data(
filters = "areaType=region",
structure = list(date = "date", areaName = "areaName", newDeaths28DaysByDeathDate = "newDeaths28DaysByDeathDate"),
latest_by = "newCasesByPublishDate"
)
api_endpoint <- 'https://api.coronavirus.data.gov.uk/v1/data?filters=areaType=region&structure={"name":"areaName","date":"date","newDeaths28DaysByPublishDate":"newDeaths28DaysByPublishDate"}&format="csv"'
get_url <- httr::GET(api_endpoint)
View(get_url)
response <- httr::GET(api_endpoint)
json_text <- httr::content(response, "text")
dt <- jsonlite::fromJSON(json_text)
results <- rbind(results, dt$data)
View(dt)
View(data_regional)
api_endpoint <- 'https://api.coronavirus.data.gov.uk/v1/data'
uk_variables = list(
"date", "areaName", "newDeaths28DaysByPublishDate")
names(uk_variables) <- uk_variables
results <- list()
current_page <- 1
repeat {
response <- httr::VERB("GET",
url = api_endpoint,
query = list(
filters = list("areaType=region"),
structure = jsonlite::toJSON(uk_variables, auto_unbox = TRUE, pretty = FALSE),
page = current_page),
httr::timeout(60))
# Convert response from binary to JSON:
json_text <- httr::content(response, "text")
dt <- jsonlite::fromJSON(json_text)
results <- rbind(results, dt$data)
if (is.null( dt$pagination$`next`)) {
break
}
current_page <- current_page + 1
}
api_endpoint <- 'https://api.coronavirus.data.gov.uk/v1/data?filters=areaType=region&structure={"name":"areaName","date":"date","newDeaths28DaysByPublishDate":"newDeaths28DaysByPublishDate"}'
response <- httr::GET(api_endpoint)
json_text <- httr::content(response, "text")
dt <- jsonlite::fromJSON(json_text)
results <- rbind(results, dt$data)
results <- rbind(dt$data)
View(data_regional)
api_endpoint <- 'https://api.coronavirus.data.gov.uk/v1/data?filters=areaType=region&structure={"name":"areaName","date":"date","newDeaths28DaysByPublishDate":"newDeaths28DaysByPublishDate"}'
response <- httr::GET(api_endpoint)
json_text <- httr::content(response, "text")
dt <- jsonlite::fromJSON(json_text)
results <- rbind(dt$data)
rm(list=ls())
# Plot ratios
summary_wide <- readRDS("summary_wide.rds")
summary_ratios <- summary_wide %>%
dplyr::select(date, region,
pub_hosp_med, pub_hosp_l90, pub_hosp_u90, pub_hosp_l50, pub_hosp_u50,
pub_deaths_med, pub_deaths_l90, pub_deaths_u90, pub_deaths_l50, pub_deaths_u50,
hosp_deaths_med, hosp_deaths_l90, hosp_deaths_u90, hosp_deaths_l50, hosp_deaths_u50)
plot_ratio_national <- summary_ratios %>%
ggplot(aes(x = date)) +
geom_line(aes(y = hosp_deaths_med), alpha = 0.6) +
geom_ribbon(aes(ymin = hosp_deaths_l50, ymax = hosp_deaths_u50),
alpha = 0.2) +
#geom_ribbon(aes(ymin = pub_hosp_l90, ymax = pub_hosp_u90),
#            alpha = 0.1, size = 0.2) +
#geom_line(aes(y = pub_hosp_l50), alpha = 0.2) +
#geom_line(aes(y = pub_hosp_u50), alpha = 0.2) +
geom_hline(yintercept = 1, linetype = 2) +
#coord_cartesian(ylim = c(0.5, 1.5)) +
#scale_color_manual(values = colours) +
#scale_fill_manual(values = colours) +
cowplot::theme_cowplot(font_size = 11) +
theme(panel.spacing.x = unit(0.5, "cm")) +
#theme(strip.text.x = element_blank()) +
#theme(axis.text.x = element_blank()) +
labs(title = "Rt(all cases) / Rt(admissions)",
y = "Ratio", x = "")
plot(plot_ratio_national)
plot_ratio_national <- summary_ratios %>%
ggplot(aes(x = date)) +
geom_line(aes(y = hosp_deaths_med), alpha = 0.6) +
geom_ribbon(aes(ymin = hosp_deaths_l50, ymax = hosp_deaths_u50),
alpha = 0.2) +
#geom_ribbon(aes(ymin = pub_hosp_l90, ymax = pub_hosp_u90),
#            alpha = 0.1, size = 0.2) +
#geom_line(aes(y = pub_hosp_l50), alpha = 0.2) +
#geom_line(aes(y = pub_hosp_u50), alpha = 0.2) +
geom_hline(yintercept = 1, linetype = 2) +
#coord_cartesian(ylim = c(0.5, 1.5)) +
#scale_color_manual(values = colours) +
#scale_fill_manual(values = colours) +
cowplot::theme_cowplot(font_size = 11) +
theme(panel.spacing.x = unit(0.5, "cm")) +
#theme(strip.text.x = element_blank()) +
#theme(axis.text.x = element_blank()) +
labs(title = "Rt(all cases) / Rt(admissions)",
y = "Ratio", x = "")
plot(plot_ratio_national)
function (x, y, ...)
UseMethod("plot")
plot(plot_ratio_national)
function (x, y, ...)
UseMethod("plot")
function (x, y, ...)
plot_ratio_national <- summary_ratios %>%
ggplot(aes(x = date)) +
geom_line(aes(y = hosp_deaths_med), alpha = 0.6) +
geom_ribbon(aes(ymin = hosp_deaths_l50, ymax = hosp_deaths_u50),
alpha = 0.2) +
#geom_ribbon(aes(ymin = pub_hosp_l90, ymax = pub_hosp_u90),
#            alpha = 0.1, size = 0.2) +
#geom_line(aes(y = pub_hosp_l50), alpha = 0.2) +
#geom_line(aes(y = pub_hosp_u50), alpha = 0.2) +
geom_hline(yintercept = 1, linetype = 2) +
#coord_cartesian(ylim = c(0.5, 1.5)) +
#scale_color_manual(values = colours) +
#scale_fill_manual(values = colours) +
cowplot::theme_cowplot(font_size = 11) +
theme(panel.spacing.x = unit(0.5, "cm")) +
#theme(strip.text.x = element_blank()) +
#theme(axis.text.x = element_blank()) +
labs(title = "Rt(all cases) / Rt(admissions)",
y = "Ratio", x = "")
plot(plot_ratio_national)
